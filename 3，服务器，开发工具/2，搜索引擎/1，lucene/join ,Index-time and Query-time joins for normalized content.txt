join ,Index-time and Query-time joins for normalized content
关联

by hxzon
===========

Package org.apache.lucene.search.join Description

This modules support index-time and query-time joins.
本模块支持索引期间，和搜索期间的关联。

Index-time joins
索引期间的关联

The index-time joining support joins while searching, 
where joined documents are indexed as a single document block using IndexWriter.addDocuments(). 
被关联的文档，在索引时是作为一个单独的文档块。

This is useful for any normalized content (XML documents or database tables). 
这对规范化的内容很有用，例如xml文档或数据库表（它们包含嵌套和关联）。

In database terms, all rows for all joined tables 
matching a single row of the primary table 
must be indexed as a single document block, with the parent document being last in the group.
在数据库项中，主表的一行，所对应的子表的所有子行，必须作为一个单独的文档块，
和它们的父文档一起，父文档会作为组的最后一个文档。

When you index in this way, 
the documents in your index are divided into parent documents (the last document of each block) 
and child documents (all others). 
当你使用这种方式时，
索引中的文档分为父文档（每个块中的最后一个文档），以及子文档（块的其它文档）。

You provide a Filter that identifies the parent documents, 
as Lucene does not currently record any information about doc blocks.
你提供一个用来标识父文档的过滤器，因为lucene不记录任何文档块的信息。


At search time, use ToParentBlockJoinQuery to remap/join matches from any child Query 
(ie, a query that matches only child documents) up to the parent document space. 
在搜索期间，使用ToParentBlockJoinQuery来重新映射或关联任何子查询到父文档的空间。

The resulting query can then be used as a clause in any query that matches parent.
返回的查询可以作为任意能匹配父亲的查询的子句。

If you only care about the parent documents matching the query, 
you can use any collector to collect the parent hits, 
如果你只关心匹配的父文档，你可以使用任何收集器来收集父文档查询结果。

but if you'd also like to see which child documents match for each parent document, 
use the ToParentBlockJoinCollector to collect the hits. 
但如果你也关心子文档，使用“ToParentBlockJoinCollector”来收集查询结果。

Once the search is done, you retrieve a TopGroups instance from the ToParentBlockJoinCollector.getTopGroups() method.
查询完成后，使用“ToParentBlockJoinCollector.getTopGroups()”来取得“TopGroups”对象。

To map/join in the opposite direction, use ToChildBlockJoinQuery. 
反过来，使用 ToChildBlockJoinQuery 。

This wraps any query matching parent documents, creating the joined query matching only child documents.
这会包装那些匹配父文档的查询，创建出关联查询，用来只匹配子文档。

==================
Query-time joins
查询期间的关联

The query time joining is index term based and implemented as two pass search. 
查询时联合在索引项时，使用两轮搜索。

The first pass collects all the terms from a fromField that match the fromQuery. 
第一轮收集匹配fromQuery的来自fromField字段的项，

The second pass returns all documents that have matching terms in a toField to the terms collected in the first pass.
？第二轮返回“匹配第一轮收集的项”的“来自toField”字段的文档。

Query time joining has the following input:

fromField: The from field to join from.
关联的起始的字段。

fromQuery: The query executed to collect the from terms. This is usually the user specified query.
关联的起始查询。

multipleValuesPerDocument: Whether the fromField contains more than one value per document
起始字段是否有多于一个的值。

scoreMode: Defines how scores are translated to the other join side. 
评分如何转换，在关联的另一端。

If you don't care about scoring use ScoreMode.None mode. 
This will disable scoring and is therefore more efficient (requires less memory and is faster).
如果你不关心评分，使用ScoreMode.None选项。

toField: The to field to join to
被关联的字段。

Basically the query-time joining is accessible from one static method. 

The user of this method supplies the method with the described input 
and a IndexSearcher where the from terms need to be collected from. 

The returned query can be executed with the same IndexSearcher, 
but also with another IndexSearcher. 

Example usage of the JoinUtil.createJoinQuery() :
示例

  String fromField = "from"; // Name of the from field
  boolean multipleValuesPerDocument = false; // Set only yo true in the case when your fromField has multiple values per document in your index
  String toField = "to"; // Name of the to field
  ScoreMode scoreMode = ScoreMode.Max // Defines how the scores are translated into the other side of the join.
  Query fromQuery = new TermQuery(new Term("content", searchTerm)); // Query executed to collect from values to join to the to values

  Query joinQuery = JoinUtil.createJoinQuery(fromField, multipleValuesPerDocument, toField, fromQuery, fromSearcher, scoreMode);
  TopDocs topDocs = toSearcher.search(joinQuery, 10); // Note: toSearcher can be the same as the fromSearcher
  // Render topDocs...

