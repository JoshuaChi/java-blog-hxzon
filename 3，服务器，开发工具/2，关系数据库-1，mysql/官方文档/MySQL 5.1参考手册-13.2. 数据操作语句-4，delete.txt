MySQL 5.1参考手册-13.2. 数据操作语句-4，delete
http://dev.mysql.com/doc/refman/5.1/zh/sql-syntax.html#data-manipulation

13.2. 数据操作语句

13.2.1. DELETE语法

13.2.4. INSERT语法

13.2.7. SELECT语法

13.2.9. TRUNCATE语法

13.2.10. UPDATE语法

13.2.8. Subquery语法


13.2.2. DO语法

13.2.3. HANDLER语法

13.2.5. LOAD DATA INFILE语法

13.2.6. REPLACE语法

====
13.2.1. DELETE语法

单表语法：

DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name
    [WHERE where_definition]
    [ORDER BY ...]
    [LIMIT row_count]

（hxzon：可以排序，限制删除数量。）

多表语法：

DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
    tbl_name[.*] [, tbl_name[.*] ...]
    FROM table_references
    [WHERE where_definition]

或：

DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
    FROM tbl_name[.*] [, tbl_name[.*] ...]
    USING table_references
    [WHERE where_definition]

（hxzon：.*语法没有意义，只是为了与access兼容。）

tbl_name中有些行满足由where_definition给定的条件。
DELETE用于删除这些行，并返回被删除的记录的数目。

如果您编写的DELETE语句中没有WHERE子句，则所有的行都被删除。
当您不想知道被删除的行的数目时，有一个更快的方法，即使用TRUNCATE TABLE。
请参见13.2.9节，“TRUNCATE语法”。

如果您删除的行中包括用于AUTO_INCREMENT列的最大值，则该值被重新用于BDB表，
但是不会被用于MyISAM表或InnoDB表。
如果您在AUTOCOMMIT模式下使用DELETE FROM tbl_name（不含WHERE子句）删除表中的所有行，
则对于所有的表类型（除InnoDB和MyISAM外），序列重新编排。
对于InnoDB表，此项操作有一些例外，
在15.2.6.3节，“AUTO_INCREMENT列如何在InnoDB中运行”中进行了讨论。

对于MyISAM和BDB表，您可以把AUTO_INCREMENT次级列指定到一个多列关键字中。
在这种情况下，从序列的顶端被删除的值被再次使用，甚至对于MyISAM表也如此。
请参见3.6.9节，“使用AUTO_INCREMENT”。

DELETE语句支持以下修饰符：

·         如果您指定LOW_PRIORITY，则DELETE的执行被延迟，直到没有其它客户端读取本表时再执行。

·         对于MyISAM表，如果您使用QUICK关键词，则在删除过程中，
存储引擎不会合并索引端结点，这样可以加快部分种类的删除操作的速度。

·         在删除行的过程中，IGNORE关键词会使MySQL忽略所有的错误。
（在分析阶段遇到的错误会以常规方式处理。）由于使用本选项而被忽略的错误会作为警告返回。

删除操作的速度会受到一些因素的影响，这些因素在7.2.18节，“DELETE语句的速度”中进行了讨论。

在MyISAM表中，被删除的记录被保留在一个带链接的清单中，后续的INSERT操作会重新使用旧的记录位置。
要重新使用未使用的空间并减小文件的尺寸，则使用OPTIMIZE TABLE语句或myisamchk应用程序重新编排表。
OPTIMIZE TABLE更简便，但是myisamchk速度更快。
请参见13.5.2.5节，“OPTIMIZE TABLE语法”和第7章：优化。

QUICK修饰符会影响到在删除操作中索引端结点是否合并。
当用于被删除的行的索引值被来自后插入的行的相近的索引值代替时，DELETE QUICK最为适用。
在此情况下，被删除的值留下来的空穴被重新使用。

未充满的索引块跨越某一个范围的索引值，会再次发生新的插入。
当被删除的值导致出现未充满的索引块时，DELETE QUICK没有作用。
在此情况下，使用QUICK会导致未利用的索引中出现废弃空间。
下面是此种情况的举例说明：

1.    创建一个表，表中包含已编索引的AUTO_INCREMENT列。

2.    在表中插入很多记录。每次插入会产生一个索引值，此索引值被添加到索引的高端处。

3.    使用DELETE QUICK从列的低端处删除一组记录。

在此情况下，与被删除的索引值相关的索引块变成未充满的状态，
但是，由于使用了QUICK，这些索引块不会与其它索引块合并。
当插入新值时，这些索引块仍为未充满的状态，原因是新记录不含有在被删除的范围内的索引值。
另外，即使您此后使用DELETE时不包含QUICK，这些索引块也仍是未充满的，
除非被删除的索引值中有一部分碰巧位于这些未充满的块的之中，或与这些块相邻。
在这些情况下，如果要重新利用未使用的索引空间，需使用OPTIMIZE TABLE。

如果您打算从一个表中删除许多行，使用DELETE QUICK再加上OPTIMIZE TABLE可以加快速度。
这样做可以重新建立索引，而不是进行大量的索引块合并操作。

用于DELETE的MySQL唯一的LIMIT row_count选项用于告知服务器在控制命令被返回到客户端前被删除的行的最大值。
本选项用于确保一个DELETE语句不会占用过多的时间。
您可以只重复DELETE语句，直到相关行的数目少于LIMIT值为止。

如果DELETE语句包括一个ORDER BY子句，则各行按照子句中指定的顺序进行删除。
此子句只在与LIMIT联用是才起作用。
例如，以下子句用于查找与WHERE子句对应的行，使用timestamp_column进行分类，并删除第一（最旧的）行：

DELETE FROM somelog
WHERE user = 'jcole'
ORDER BY timestamp_column
LIMIT 1;

您可以在一个DELETE语句中指定多个表，根据多个表中的特定条件，从一个表或多个表中删除行。
不过，您不能在一个多表DELETE语句中使用ORDER BY或LIMIT。

table_references部分列出了包含在联合中的表。
此语法在13.2.7.1节，“JOIN语法”中进行了说明。

对于第一个语法，只删除列于FROM子句之前的表中的对应的行。
对于第二个语法，只删除列于FROM子句之中（在USING子句之前）的表中的对应的行。
作用是，您可以同时删除许多个表中的行，并使用其它的表进行搜索：

DELETE t1, t2 FROM t1, t2, t3 WHERE t1.id=t2.id AND t2.id=t3.id;

或：

DELETE FROM t1, t2 USING t1, t2, t3 WHERE t1.id=t2.id AND t2.id=t3.id;

当搜索待删除的行时，这些语句使用所有三个表，但是只从表t1和表t2中删除对应的行。

以上例子显示了使用逗号操作符的内部联合，
但是多表DELETE语句可以使用SELECT语句中允许的所有类型的联合，比如LEFT JOIN。

本语法允许在名称后面加.*，以便与Access相容。

如果您使用的多表DELETE语句包括InnoDB表，并且这些表受外键的限制，则MySQL优化程序会对表进行处理，改变原来的从属关系。
在这种情况下，该语句出现错误并返回到前面的步骤。
要避免此错误，您应该从单一表中删除，并依靠InnoDB提供的ON DELETE功能，对其它表进行相应的修改。

注释：当引用表名称时，您必须使用别名（如果已给定）：

DELETE t1 FROM test AS t1, test2 WHERE ...

进行多表删除时支持跨数据库删除，但是在此情况下，您在引用表时不能使用别名。举例说明：

DELETE test1.tmp1, test2.tmp2 FROM test1.tmp1, test2.tmp2 WHERE ...

目前，您不能从一个表中删除，同时又在子查询中从同一个表中选择。

（mysql5.7版：
Subqueries
Currently, you cannot delete from a table and select from the same table in a subquery.）

===========
13.2.9. TRUNCATE语法
TRUNCATE [TABLE] tbl_name
TRUNCATE TABLE用于完全清空一个表。从逻辑上说，该语句与用于删除所有行的DELETE语句等同，但是在有些情况下，两者在使用上有所不同。

对于InnoDB表，如果有需要引用表的外键限制，则TRUNCATE TABLE被映射到DELETE上；否则使用快速删减（取消和重新创建表）。使用TRUNCATE TABLE重新设置AUTO_INCREMENT计数器，设置时不考虑是否有外键限制。

对于其它存储引擎，在MySQL 5.1中，TRUNCATE TABLE与DELETE FROM有以下几处不同：

·         删减操作会取消并重新创建表，这比一行一行的删除行要快很多。

·         删减操作不能保证对事务是安全的；在进行事务处理和表锁定的过程中尝试进行删减，会发生错误。

·         被删除的行的数目没有被返回。

·         只要表定义文件tbl_name.frm是合法的，则可以使用TRUNCATE TABLE把表重新创建为一个空表，即使数据或索引文件已经被破坏。

·         表管理程序不记得最后被使用的AUTO_INCREMENT值，但是会从头开始计数。即使对于MyISAM和InnoDB也是如此。MyISAM和InnoDB通常不再次使用序列值。

·         当被用于带分区的表时，TRUNCATE TABLE会保留分区；即，数据和索引文件被取消并重新创建，同时分区定义（.par）文件不受影响。

TRUNCATE TABLE是在MySQL中采用的一个Oracle SQL扩展。


