（hxzon学习笔记）PostgreSQL 9.4beta1 Documentation-Chapter 40. PL pgSQL - SQL Procedural Language-5，触发器过程

注释by hxzon
====
40.1. Overview
40.1.1. Advantages of Using PL/pgSQL
40.1.2. Supported Argument and Result Data Types
40.2. Structure of PL/pgSQL
40.3. Declarations
40.3.1. Declaring Function Parameters
40.3.2. ALIAS
40.3.3. Copying Types
40.3.4. Row Types
40.3.5. Record Types
40.3.6. Collation of PL/pgSQL Variables
40.4. Expressions
40.5. Basic Statements
40.5.1. Assignment
40.5.2. Executing a Command With No Result
40.5.3. Executing a Query with a Single-row Result
40.5.4. Executing Dynamic Commands
40.5.5. Obtaining the Result Status
40.5.6. Doing Nothing At All
40.6. Control Structures
40.6.1. Returning From a Function
40.6.2. Conditionals
40.6.3. Simple Loops
40.6.4. Looping Through Query Results
40.6.5. Looping Through Arrays
40.6.6. Trapping Errors
40.6.7. Getting Diagnostics Information
40.7. Cursors
40.7.1. Declaring Cursor Variables
40.7.2. Opening Cursors
40.7.3. Using Cursors
40.7.4. Looping Through a Cursor's Result
40.8. Errors and Messages

==
40.9. Trigger Procedures
40.9.1. Triggers on data changes
40.9.2. Triggers on events

==
40.10. PL/pgSQL Under the Hood
40.10.1. Variable Substitution
40.10.2. Plan Caching
40.11. Tips for Developing in PL/pgSQL
40.11.1. Handling of Quotation Marks
40.11.2. Additional compile-time checks
40.12. Porting from Oracle PL/SQL
40.12.1. Porting Examples
40.12.2. Other Things to Watch For
40.12.3. Appendix

===========
40.9. Trigger Procedures

（hxzon：注意，“触发器过程”不是触发器，它被触发器调用。）

====
40.9.1. Triggers on data changes

PL/pgSQL can be used to define trigger procedures. 
A trigger procedure is created with the CREATE FUNCTION command, 
declaring it as a function with no arguments and a return type of trigger. 
Note that the function must be declared with no arguments 
even if it expects to receive arguments specified in CREATE TRIGGER 
— trigger arguments are passed via TG_ARGV, as described below.
即时触发器有函数，触发器过程在定义时也是不带参数的，触发器的参数是通过 TG_ARGV 变量传递的。

When a PL/pgSQL function is called as a trigger, 
several special variables are created automatically in the top-level block. They are:

NEW
Data type RECORD; variable holding the new database row for INSERT/UPDATE operations in row-level triggers. 
This variable is unassigned in statement-level triggers and for DELETE operations.

OLD
Data type RECORD; variable holding the old database row for UPDATE/DELETE operations in row-level triggers. 
This variable is unassigned in statement-level triggers and for INSERT operations.

TG_NAME
Data type name; variable that contains the name of the trigger actually fired.

TG_WHEN
Data type text; a string of BEFORE, AFTER, or INSTEAD OF, depending on the trigger's definition.

TG_LEVEL
Data type text; a string of either ROW or STATEMENT depending on the trigger's definition.

TG_OP
Data type text; a string of INSERT, UPDATE, DELETE, or TRUNCATE telling for which operation the trigger was fired.

TG_RELID
Data type oid; the object ID of the table that caused the trigger invocation.

TG_RELNAME
Data type name; the name of the table that caused the trigger invocation. 
This is now deprecated, and could disappear in a future release. 
Use TG_TABLE_NAME instead.

TG_TABLE_NAME
Data type name; the name of the table that caused the trigger invocation.

TG_TABLE_SCHEMA
Data type name; the name of the schema of the table that caused the trigger invocation.

TG_NARGS
Data type integer; the number of arguments given to the trigger procedure in the CREATE TRIGGER statement.

TG_ARGV[]
Data type array of text; the arguments from the CREATE TRIGGER statement. 
The index counts from 0. Invalid indexes (less than 0 or greater than or equal to tg_nargs) result in a null value.

A trigger function must return either NULL or a record/row value having 
exactly the structure of the table the trigger was fired for.
一个触发器函数必须返回null，或者该表的行结构。

Row-level triggers fired BEFORE can return null
一个行级别的“之前”触发器函数可以返回null，从而不执行这一行的后续操作。 
to signal the trigger manager to skip the rest of the operation for this row 
(i.e., subsequent triggers are not fired, and the INSERT/UPDATE/DELETE does not occur for this row).
即不会引起后续的触发器，这一行的插删改也被取消。 
If a nonnull value is returned then the operation proceeds with that row value. 
Returning a row value different from the original value of NEW 
alters the row that will be inserted or updated.
如果触发器函数返回一个不同的行值，会用这个值来插入或更新。 
Thus, if the trigger function wants the triggering action to succeed normally without altering the row value, 
NEW (or a value equal thereto) has to be returned. 
如果触发器函数不想影响数据，则需要返回原来的new值。
To alter the row to be stored, it is possible to replace single values directly in NEW and return the modified NEW, 
or to build a complete new record/row to return. 
In the case of a before-trigger on DELETE, the returned value has no direct effect, 
对于“删除”的“之前”触发器函数，返回的非null值无什么影响，
but it has to be nonnull to allow the trigger action to proceed.
但返回非null值才能真的删除数据。 
Note that NEW is null in DELETE triggers, so returning that is usually not sensible. 
The usual idiom in DELETE triggers is to return OLD.
一种好的惯例是，“删除”“之前”触发器函数，返回OLD。

INSTEAD OF triggers (which are always row-level triggers, and may only be used on views) 
can return null to signal that they did not perform any updates, 
and that the rest of the operation for this row should be skipped 
(i.e., subsequent triggers are not fired, 
and the row is not counted in the rows-affected status for the surrounding INSERT/UPDATE/DELETE). 
Otherwise a nonnull value should be returned, to signal that the trigger performed the requested operation. 
For INSERT and UPDATE operations, the return value should be NEW, 
which the trigger function may modify to support INSERT RETURNING and UPDATE RETURNING 
(this will also affect the row value passed to any subsequent triggers). 
For DELETE operations, the return value should be OLD.

The return value of a row-level trigger fired AFTER 
or a statement-level trigger fired BEFORE or AFTER is always ignored; 
语句级别的触发器函数，或者行级别的“之后”触发器函数，返回值总是被忽略。
it might as well be null. 
However, any of these types of triggers might still abort the entire operation by raising an error.
但是，如果它们抛出错误，则会中断整个操作。

==
Example 40-3 shows an example of a trigger procedure in PL/pgSQL.

Example 40-3. A PL/pgSQL Trigger Procedure

This example trigger ensures that any time a row is inserted or updated in the table, 
the current user name and time are stamped into the row. 
And it checks that an employee's name is given and that the salary is a positive value.

CREATE TABLE emp (
    empname text,
    salary integer,
    last_date timestamp,
    last_user text
);

CREATE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$
    BEGIN
        -- Check that empname and salary are given
        IF NEW.empname IS NULL THEN
            RAISE EXCEPTION 'empname cannot be null';
        END IF;
        IF NEW.salary IS NULL THEN
            RAISE EXCEPTION '% cannot have null salary', NEW.empname;
        END IF;

        -- Who works for us when she must pay for it?
        IF NEW.salary < 0 THEN
            RAISE EXCEPTION '% cannot have a negative salary', NEW.empname;
        END IF;

        -- Remember who changed the payroll when
        NEW.last_date := current_timestamp;
        NEW.last_user := current_user;
        RETURN NEW;
    END;
$emp_stamp$ LANGUAGE plpgsql;

CREATE TRIGGER emp_stamp BEFORE INSERT OR UPDATE ON emp
    FOR EACH ROW EXECUTE PROCEDURE emp_stamp();

Another way to log changes to a table involves creating a new table 
that holds a row for each insert, update, or delete that occurs. 
This approach can be thought of as auditing changes to a table. 
Example 40-4 shows an example of an audit trigger procedure in PL/pgSQL.

Example 40-4. A PL/pgSQL Trigger Procedure For Auditing
示例：审计表

This example trigger ensures that any insert, update or delete of a row in the emp table is recorded (i.e., audited) in the emp_audit table. 
The current time and user name are stamped into the row, together with the type of operation performed on it.

CREATE TABLE emp (
    empname           text NOT NULL,
    salary            integer
);

CREATE TABLE emp_audit(
    operation         char(1)   NOT NULL,
    stamp             timestamp NOT NULL,
    userid            text      NOT NULL,
    empname           text      NOT NULL,
    salary integer
);

CREATE OR REPLACE FUNCTION process_emp_audit() RETURNS TRIGGER AS $emp_audit$
    BEGIN
        --
        -- Create a row in emp_audit to reflect the operation performed on emp,
        -- make use of the special variable TG_OP to work out the operation.
        --
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO emp_audit SELECT 'D', now(), user, OLD.*;
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
            INSERT INTO emp_audit SELECT 'U', now(), user, NEW.*;
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO emp_audit SELECT 'I', now(), user, NEW.*;
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$emp_audit$ LANGUAGE plpgsql;

CREATE TRIGGER emp_audit
AFTER INSERT OR UPDATE OR DELETE ON emp
    FOR EACH ROW EXECUTE PROCEDURE process_emp_audit();

A variation of the previous example uses a view joining the main table to the audit table, to show when each entry was last modified. 
This approach still records the full audit trail of changes to the table, 
but also presents a simplified view of the audit trail, 
showing just the last modified timestamp derived from the audit trail for each entry. 
Example 40-5 shows an example of an audit trigger on a view in PL/pgSQL.

Example 40-5. A PL/pgSQL View Trigger Procedure For Auditing

This example uses a trigger on the view to make it updatable, and ensure that any insert, 
update or delete of a row in the view is recorded (i.e., audited) in the emp_audit table. 
The current time and user name are recorded, together with the type of operation performed, 
and the view displays the last modified time of each row.

CREATE TABLE emp (
    empname           text PRIMARY KEY,
    salary            integer
);

CREATE TABLE emp_audit(
    operation         char(1)   NOT NULL,
    userid            text      NOT NULL,
    empname           text      NOT NULL,
    salary            integer,
    stamp             timestamp NOT NULL
);

CREATE VIEW emp_view AS
    SELECT e.empname,
           e.salary,
           max(ea.stamp) AS last_updated
      FROM emp e
      LEFT JOIN emp_audit ea ON ea.empname = e.empname
     GROUP BY 1, 2;

CREATE OR REPLACE FUNCTION update_emp_view() RETURNS TRIGGER AS $$
    BEGIN
        --
        -- Perform the required operation on emp, and create a row in emp_audit
        -- to reflect the change made to emp.
        --
        IF (TG_OP = 'DELETE') THEN
            DELETE FROM emp WHERE empname = OLD.empname;
            IF NOT FOUND THEN RETURN NULL; END IF;

            OLD.last_updated = now();
            INSERT INTO emp_audit VALUES('D', user, OLD.*);
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
            UPDATE emp SET salary = NEW.salary WHERE empname = OLD.empname;
            IF NOT FOUND THEN RETURN NULL; END IF;

            NEW.last_updated = now();
            INSERT INTO emp_audit VALUES('U', user, NEW.*);
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
            INSERT INTO emp VALUES(NEW.empname, NEW.salary);

            NEW.last_updated = now();
            INSERT INTO emp_audit VALUES('I', user, NEW.*);
            RETURN NEW;
        END IF;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER emp_audit
INSTEAD OF INSERT OR UPDATE OR DELETE ON emp_view
    FOR EACH ROW EXECUTE PROCEDURE update_emp_view();

One use of triggers is to maintain a summary table of another table. 
The resulting summary can be used in place of the original table for certain queries — often with vastly reduced run times. 
This technique is commonly used in Data Warehousing, 
where the tables of measured or observed data (called fact tables) might be extremely large. 
Example 40-6 shows an example of a trigger procedure in PL/pgSQL that maintains a summary table for a fact table in a data warehouse.

Example 40-6. A PL/pgSQL Trigger Procedure For Maintaining A Summary Table

The schema detailed here is partly based on the Grocery Store example from The Data Warehouse Toolkit by Ralph Kimball.

--
-- Main tables - time dimension and sales fact.
--
CREATE TABLE time_dimension (
    time_key                    integer NOT NULL,
    day_of_week                 integer NOT NULL,
    day_of_month                integer NOT NULL,
    month                       integer NOT NULL,
    quarter                     integer NOT NULL,
    year                        integer NOT NULL
);
CREATE UNIQUE INDEX time_dimension_key ON time_dimension(time_key);

CREATE TABLE sales_fact (
    time_key                    integer NOT NULL,
    product_key                 integer NOT NULL,
    store_key                   integer NOT NULL,
    amount_sold                 numeric(12,2) NOT NULL,
    units_sold                  integer NOT NULL,
    amount_cost                 numeric(12,2) NOT NULL
);
CREATE INDEX sales_fact_time ON sales_fact(time_key);

--
-- Summary table - sales by time.
--
CREATE TABLE sales_summary_bytime (
    time_key                    integer NOT NULL,
    amount_sold                 numeric(15,2) NOT NULL,
    units_sold                  numeric(12) NOT NULL,
    amount_cost                 numeric(15,2) NOT NULL
);
CREATE UNIQUE INDEX sales_summary_bytime_key ON sales_summary_bytime(time_key);

--
-- Function and trigger to amend summarized column(s) on UPDATE, INSERT, DELETE.
--
CREATE OR REPLACE FUNCTION maint_sales_summary_bytime() RETURNS TRIGGER
AS $maint_sales_summary_bytime$
    DECLARE
        delta_time_key          integer;
        delta_amount_sold       numeric(15,2);
        delta_units_sold        numeric(12);
        delta_amount_cost       numeric(15,2);
    BEGIN

        -- Work out the increment/decrement amount(s).
        IF (TG_OP = 'DELETE') THEN

            delta_time_key = OLD.time_key;
            delta_amount_sold = -1 * OLD.amount_sold;
            delta_units_sold = -1 * OLD.units_sold;
            delta_amount_cost = -1 * OLD.amount_cost;

        ELSIF (TG_OP = 'UPDATE') THEN

            -- forbid updates that change the time_key -
            -- (probably not too onerous, as DELETE + INSERT is how most
            -- changes will be made).
            IF ( OLD.time_key != NEW.time_key) THEN
                RAISE EXCEPTION 'Update of time_key : % -> % not allowed',
                                                      OLD.time_key, NEW.time_key;
            END IF;

            delta_time_key = OLD.time_key;
            delta_amount_sold = NEW.amount_sold - OLD.amount_sold;
            delta_units_sold = NEW.units_sold - OLD.units_sold;
            delta_amount_cost = NEW.amount_cost - OLD.amount_cost;

        ELSIF (TG_OP = 'INSERT') THEN

            delta_time_key = NEW.time_key;
            delta_amount_sold = NEW.amount_sold;
            delta_units_sold = NEW.units_sold;
            delta_amount_cost = NEW.amount_cost;

        END IF;


        -- Insert or update the summary row with the new values.
        <<insert_update>>
        LOOP
            UPDATE sales_summary_bytime
                SET amount_sold = amount_sold + delta_amount_sold,
                    units_sold = units_sold + delta_units_sold,
                    amount_cost = amount_cost + delta_amount_cost
                WHERE time_key = delta_time_key;

            EXIT insert_update WHEN found;

            BEGIN
                INSERT INTO sales_summary_bytime (
                            time_key,
                            amount_sold,
                            units_sold,
                            amount_cost)
                    VALUES (
                            delta_time_key,
                            delta_amount_sold,
                            delta_units_sold,
                            delta_amount_cost
                           );

                EXIT insert_update;

            EXCEPTION
                WHEN UNIQUE_VIOLATION THEN
                    -- do nothing
            END;
        END LOOP insert_update;

        RETURN NULL;

    END;
$maint_sales_summary_bytime$ LANGUAGE plpgsql;

CREATE TRIGGER maint_sales_summary_bytime
AFTER INSERT OR UPDATE OR DELETE ON sales_fact
    FOR EACH ROW EXECUTE PROCEDURE maint_sales_summary_bytime();

INSERT INTO sales_fact VALUES(1,1,1,10,3,15);
INSERT INTO sales_fact VALUES(1,2,1,20,5,35);
INSERT INTO sales_fact VALUES(2,2,1,40,15,135);
INSERT INTO sales_fact VALUES(2,3,1,10,1,13);
SELECT * FROM sales_summary_bytime;
DELETE FROM sales_fact WHERE product_key = 1;
SELECT * FROM sales_summary_bytime;
UPDATE sales_fact SET units_sold = units_sold * 2;
SELECT * FROM sales_summary_bytime;

====
40.9.2. Triggers on events
事件触发器

PL/pgSQL can be used to define event triggers. 
PostgreSQL requires that a procedure that is to be called as an event trigger 
must be declared as a function with no arguments and a return type of event_trigger.

When a PL/pgSQL function is called as a event trigger, 
several special variables are created automatically in the top-level block. They are:
事件触发器特有的变量。

TG_EVENT
Data type text; a string representing the event the trigger is fired for.

TG_TAG
Data type text; variable that contains the command tag for which the trigger is fired.

==
Example 40-7 shows an example of a event trigger procedure in PL/pgSQL.

Example 40-7. A PL/pgSQL Event Trigger Procedure

This example trigger simply raises a NOTICE message each time a supported command is executed.

CREATE OR REPLACE FUNCTION snitch() RETURNS event_trigger AS $$
BEGIN
    RAISE NOTICE 'snitch: % %', tg_event, tg_tag;
END;
$$ LANGUAGE plpgsql;

CREATE EVENT TRIGGER snitch ON ddl_command_start EXECUTE PROCEDURE snitch();

