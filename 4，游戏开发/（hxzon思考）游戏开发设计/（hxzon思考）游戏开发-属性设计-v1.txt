（hxzon思考）游戏开发-属性设计-v1

by hxzon
========
1，值的类型

非公式值：非公式计算得到，需要保存（除非来自定义文件，且不再变化）。

公式值：根据公式计算得到，不需要保存。

====
2，值的分段

基础值：非公式值（需保存），公式值（不需保存）
附加值：玩家穿上装备（不需保存），物品锻造（需保存）

最终值：基础值+附加值

========
3，值的更新

定义属性间的级联关系，计算拓扑顺序。

====
3.1，api设计

justSetValue(group,a,value)
更新group的a

justResetValue(a)
更新a的总值
更新a的级联属性的值（非总值）

setValue(group,a,value)
更新group的a，更新a的总值
更新a的级联属性值（各段的值，及总值）

resetValue(a)
更新a的最终值
更新a的级联属性值（各段的值，及总值）

resetValueAndNotify(a)
=resetValue
并通知最终值的变化

setValueNoReset(group,a,value)
=justSetValue(group,a,value)

==
resetValue(a)
与setValueNoReset(group,a)
总是同时使用，用于提高效率

resetValueAndNofity(a)
与setValueNoReset(group,a)
总是同时使用，用于计算最终值的变化

========
3.2，api实现-clojure版

(defComp Comp-Attrbar)

(defCompFns Comp-Attrbar 

  ;; g 属性组，关键字
  ;; a 属性，ref
  
  (:get-value 
    ([go, g a ] (dosync (get-in @go [g a])))
    ([go g a vd] (dosync (get-in @go [ g a] vd)))
    )

  (:-just-set-value [go, g a v] 
                    (dosync (assoc-in @go [g a] v)))

  (:-just-reset-value [go, a] 
                      (prn "由子类实现"))

  (:reset-value 
    [go, a] 
    (let [acs (:cascade-attrs @a)
          acs (into acs a)
          acs (util/order-depen acs :base-attrs :name)]
      (doseq [ac acs] 
        (kfcthis :-just-reset-value go ac)))
    )

  (:reset-values 
    [go,& as] 
    (let [acs (loop [r #{} as as]
                (if (empty? as)
                  r
                  (recur (into r (:cascade-attrs @(first as)))
                         (rest as))
                  ))
          acs (into acs as)
          acs (util/order-depen acs :base-attrs :name)]
      (doseq [ac acs]
        (kfcthis :-just-reset-value go ac)))
    )

  (:-set-value [go,reset  g a v] 
               (do 
                 (kfcthis :-just-set-value go  g a v)
                 (when reset (kfcthis :reset-value go a))))

  (:set-value [go,  g a v] (kfcthis :-set-value go true g a v))

  (:set-value-no-reset [go  g a v ] (kfcthis :-set-value go false  g a v))
  
  (:add-value 
    ([go g a v] (kfcthis :set-value go g a (+ v (kfcthis :get-value go g a 0))))
    ([go g a v vd] (kfcthis :set-value go g a (+ v (kfcthis :get-value go g a vd))))
    )
  
  (:add-value-no-reset
    ([go g a v] (kfcthis :set-value-no-reset go g a (+ v (kfcthis :get-value go g a 0))))
    ([go g a v vd] (kfcthis :set-value-no-reset go g a (+ v (kfcthis :get-value go g a vd)) ))
    )
)

(kd Comp-Attrbar
    :-init {:attr-bar [#{} 
                       (fn [go]
                         (dosync (alter go assoc-in [:data :attrs] {})))
                       ]})

;; Comp-Attrbar 作为抽象实现类，用于被继承
;; ====
(defComp Comp-AgentAttrbar Comp-Attrbar)

(add-comp Go-Agent Comp-AgentAttrbar)

(kd Comp-AgentAttrbar
    :-init 
    (into (:-init @Comp-Attrbar) {}))

;; grs = [group ratio group ratio]
(defn attr-set-final-value-grs [this go a grs]
  (kfcthis :-just-set-value go :final a
       (loop [r 0 grs grs]
         (if (empty? grs)
           r
           (recur (+ r (* 
                         (kfcthis :get-value go (first grs) a 0)
                         (first (rest grs))
                         ))
                  (rest (rest grs))    )
           ))
       ))

;; ars = [a ratio a ratio]
(defn attr-set-final-value-ars [this go a ars]
  (kfcthis :-just-set-value go :final a
       (loop [r 0 ars ars]
         (if (empty? ars)
           r
           (recur (+ r (* 
                         (kfcthis :get-value go :base (first ars) 0)
                         (first (rest ars))
                         ))
                  (rest (rest ars))
                  )
           ))
       ))

(defn set-base-values [this go])

(defCompFns Comp-AgentAttrbar
  
  (:-just-reset-value 
    [go a]
    (cond
      (= a Attr-atk)
      (attr-set-final-value-grs this go a [:base 1 :equip 1])
      (= a Attr-def)
      (attr-set-final-value-grs this go a [:base 1 :equip 1])
      (= a Attr-hp)
      (attr-set-final-value-grs this go a [:base 1 :equip 1])
      (= a Attr-zdl)
      (attr-set-final-value-ars this go a [Attr-atk 3 Attr-def  2 Attr-hp 1])
      (= a Attr-user-lvl)
      (do
        (attr-set-final-value-grs this go a [:base 1])
        (set-base-values this go)
        )
      ))
  
  )

========
3.3，api实现-java版

	//设置值（不重算）
	protected final Number justSetValue_impl(String group, Attr attr, Number value)
	{
		AttrValueMap g = getValues(group);
		Number valueOrig = g.put(attr, value);
		return valueOrig;
	}

	//核心方法（钩子）
	protected void whenValueUpdate_impl(Attr attr)
	{//示例
		if (attr == .USER_LVL)
		{
			Number base = getBaseValue(attr);
			setFinalValueNoReset(attr, base);
			//
			AttrValueMap newBaseValues = calcAttrBaseValues(base);
			getBaseValues().putAll(newBaseValues);
		}
		else if (attr == CUR_EXP)
		{
			Number base = getBaseValue(attr);
			setFinalValueNoReset(attr, base);
		}
		else if (attr == ATK)
		{
			Number base = getBaseValue(attr);
			Number equip = getEquipExtraValue(attr);
			Number skill = getSkillExtraValue(attr);
			setFinalValueNoReset(attr, base + equip + skill);
		}

	}

	//重算本属性及受影响的属性
	public final void resetValue(Attr attr)
	{
		List<Attr> attrsNeedUpdate = attrsNeedUpdateCascade(attr);
		for (Attr a : attrsNeedUpdate)
		{
			whenValueUpdate_impl(a);
		}
	}

	//外部api：更新多个属性后，用此方法批量重算
	public final void resetValues(Collection<Attr> attrs)
	{
		List<Attr> attrsNeedUpdate = attrsNeedUpdateCascade(attrs);
		for (Attr a : attrsNeedUpdate)
		{
			whenValueUpdate_impl(a);
		}
	}

	//内部实现，同时也可作为钩子（见最后）
	protected Number setValue_impl(String group, Attr attr, Number value, boolean reset)
	{
		Number result = justSetValue_impl(group, attr, value);
		if (reset)
		{
			resetValue(attr);
		}
		return result;
	}

	//外部api：更新单个属性，并自动重算
	public final Number setValue(String group, Attr attr, Number value)
	{
		return setValue_impl(group, attr, value, true);
	}

	//外部api：更新多个属性，稍后再批量重算（提升性能，或比对最终值变化）
	public final Number setValueNoReset(String group, Attr attr, Number value)
	{
		return setValue_impl(group, attr, value, false);
	}

	//示例
	protected Number setValue_impl(String group, Attr attr, Number value, boolean reset)
	{
		if (attr == SW)
		{
			Number result = super.setValue_impl(group, attr, value, reset);
			notifyShengwangAdd(user);//额外加入通知
			return result;
		}
		else if (attr == EXP)
		{
			return setExp(value.longValue());//特殊处理
		}
		else
		{
			return super.setValue_impl(group, attr, value, reset);
		}
	}

	private long setExp(long exp)
	{
		long expUpgradeNeed = getBaseValue(EXP_UPGRADE_NEED);
		int userMaxLvl = getBaseValue(USER_MAX_LVL);;
		int userLvl = getBaseValue(USER_LVL);;
		while (exp >= expUpgradeNeed && userLvl < userMaxLvl)
		{
			userLvl++;
			exp -= expUpgradeNeed;
			expUpgradeNeed = calcExpUpgradeNeed(userProfession, userLvl);
		}
		//
		justSetValue_impl(Group_Base, EXP, exp);
		justSetValue_impl(Group_Base, USER_LVL, userLvl);
		notifyUserLvlUpgraded();//比对最终值变化
		return exp;
	}

========
4，多个系统间的属性级联更新

装备/技能=》玩家=》技能

为了避免无限循环，必须是有关的属性，才触发另一个系统更新。

========
========
（hxzon思考）游戏开发-属性设计-v0

by hxzon
====
1，属性分组（根据来源等）：

-1，初始值

-2，各种行为产生：例如物品，“强化”得到的属性，“锻造”得到的属性，
例如玩家，穿上装备得到的属性，吃丹药得到的属性，打怪得到的提升。

分组的作用：
-1，用于界面分开显示，
-2，用于分开计算（算入或者不算入总和，不同的权重）
-3，作为整体修改（添加和移除）。

分组的特征：
-1，是否加入总和：
有些分组不加入总和，例如物品对人的“增益属性”，它不属于物品的自身属性。
物品自身属性，例如攻击力，当使用本物品攻击时。
物品对玩家的增益属性，例如伤害减免，攻击增益。

hxzon：是否还有其它原因，不加入总和？

===========
2，属性的特征：

2.1，是否消耗

消耗属性：生命值
非消耗属性：攻击力，防御力

消耗属性需要两个值：最大值，当前值。
当前值通过时间，或其他机制，会恢复到最大值。

非消耗属性只有一个值：当前值。

====
2.2，属性值“部分”

属性值的计算方式：

-1，临时累加：例如穿上某个物品时得到，脱下某个物品时失去

-2，永久累加：例如吃丹药得到

-3，公式计算（依赖其它属性值）：例如攻击力根据玩家等级，玩家经验来计算

==
属性值常见“部分”

-1，基础值部分：初始值，永久累加（成长值1），公式计算值（成长值2）

-2，临时部分：临时累加

分部分是为了公式计算：基础值部分和临时部分可能有不同的权重。

根据分组，来归到某一个部分？
hxzon：是否有分组，其中一些属性视为基础值部分，另一些属性视为临时部分？
在属性上增加一个特征：属于哪部分？

============
常见属性

体力
负重上限（影响背包容量，装备重量）

血量（生命值）

攻击力
防御力

暴击率

耐久度（物品可使用时间或可使用次数）

-等级
-经验

-走路速度
-跳跃高度

========
========
使用状态机？

使用事件订阅？
更新属性[a :base b :base ] 后发出事件，
在事件处理器中更新[a :final b :final]，发出事件，
在事件处理器中更新[z :final]，发出事件，
在事件处理器中，更新其他系统的属性值。

可以在一轮事件中更新所有受影响的属性，
那和v2版本本质上是一样的。

分为多轮处理，需要更新[a :final]时，不立即更新[z :final]，
太复杂。


