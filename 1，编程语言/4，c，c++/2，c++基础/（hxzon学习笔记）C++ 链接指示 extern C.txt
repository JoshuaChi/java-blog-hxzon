（hxzon学习笔记）C++ 链接指示 extern C

by hxzon
======
固有的不可移植的特性
extern "C"

1，C++程序有时需要调用其他语言编写的函数，其它语言中的函数名字也必须在C++中进行声明。
对于其它语言编写的函数来说，编译器检查其调用的方式与处理普通C++函数的方式相同，
但是生成的代码有所区别。
C++使用链接指示（linkage directive）指出非C++函数所用的语言。

====
2，声明一个非C++函数

链接指示可以是单个的或复合的。
链接指示不能出现在类定义或函数定义的内部。
同样的链接指示必须在函数的每个声明中都出现。

extern "C" size_t strlen(const char *);

复合语句链接指示
extern "C"{
    int strcmp(const char*, const char*);
    char *strcat(char*, const char*);
}

====
3，链接指示与头文件

复合语句链接指示可以应用于整个头文件。

extern "C"{
    #include <string.h>
}

当一个#include指示被放置在复合链接指示的花括号中时，
头文件中的所有普通函数声明都被认为是由链接指示的语言编写的。

链接指示可以嵌套，
如果头文件包含自带链接指示的函数，则该函数的链接不受影响。

====
4，指向extern "C"函数的指针

指向其他语言编写的函数的指针，必须与函数本身使用相同的链接指示。

//pf指向一个C函数，该函数接受一个int，返回void
extern "C" void (*pf)(int);

当我们使用pf调用函数时，编译器认定当前调用的是一个C函数。

指向C函数的指针，和指向C++函数的指针，不是一样的类型，不能相互赋值。

====
5，链接指示对整个声明都有效

即不仅对函数有效，对作为返回类型或形参类型的函数指针也有效。

extern "C" void f1(void(*)(int));

当我们调用f1时，必须传给它一个C函数的名字，或指向C函数的指针。

如果我们希望给C++函数传入一个指向C函数的指针，则必须使用类型别名。

extern "C" typedef void FC(int);
void f2(FC *);

====
6，导出C++函数到其它语言

使用链接指示对函数进行定义，可以令一个C++函数在其它语言编写的程序中可用。

extern "C" double calc(double dparam){/*... */}

编译器将为该函数生成适合于指定语言的代码。

注意，可被多种语言共享的函数的返回类型或形参类型受很多的限制。
例如，不可能把C++类的对象传给C程序。

====
7，有时需要在C和C++中编译同一个源文件，在编译C++版本的程序时，预处理器定义了 __cplusplus 。

#ifdef __cplusplsu
extern "C"
#endif
int strcmp(const char*, const char*);

====
8，重载函数与链接指示

如果目标语言支持重载函数，则为该语言实现链接指示的编译器也可能支持重载这些C++的函数。

C语言不支持函数重载。

//错误：两个extern "C"函数的名字相同
extern "C" void print(const char*);
extern "C" void print(int);

