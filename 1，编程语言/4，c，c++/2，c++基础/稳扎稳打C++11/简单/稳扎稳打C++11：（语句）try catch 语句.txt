稳扎稳打C++11：（语句）try catch 语句

来源：ilanever.com | 作者：LanPei | 创建时间：2014-3-27 0:20:10
http://ilanever.com/article/sitedetail.html?id=261

介绍了handler的查找机制以及标准库中的异常类

======
目录

查找Handler
标准异常

====
try catch 语句的语法形式如下：

try{
    program-statements
} catch (exception-declaration){
    handler-statements
} catch (exception-declaration){
    handler-statements
}

在标准C++中没有finally块，Microsoft扩展了标准C++提供了finally块。
如果想在标准C++中实现finally的效果，可通过析构函数来实现。

====
查找Handler 

在一个复杂的系统中，程序的执行路径或许会在遇到抛出异常的代码之前通过多个try模块。
例如，一个try块会调用一个包含try块的函数，这个函数会调用另一个包含try块的函数，等等。

查找handler的顺序与调用链的顺序相反。
当一个异常被抛出，首先查找抛出异常的函数是否有匹配的catch块。
如果没有匹配的catch块，则当前函数终止。
继续查找函数的调用者，就这样回朔代码的执行路径，直到遇到合适的catch类型。

如果没有找到合适的catch，将会执行一个名为terminate的函数。
这个函数的行为依系统而不同，但他们都会停止程序的执行。

====
标准异常 

C++库定义了一些类用于报告标准库中函数的问题。
这些类同样可以应用到我们的代码中。这些类定义在4个头文件中：

exception 头文件，定义了最通用的异常类exception。它只用来说明发生了一个异常，但不提供任何信息。

stdexcept 头文件，定义了一些通用的异常类。参见下表。

new 头文件，定义了bad_alloc异常类。

type_info 头文件，定义了bad_cast异常类。

====
stdexcept头文件中定义的标准异常类如下表所示：

类	描述

exception	最通用的问题类型
runtime_error	只有在运行时才能被检测到的问题
range_error	运行时错误：产生的结果在有意义的值范围之外
overflow_error	运行时错误：计算上溢。
underflow_error	运行时错误：计算下溢。
logic_error	程序逻辑错误
domain_error	逻辑错误：存在不会产生结果的参数
invalid_argument	逻辑错误：不合适的参数
length_error	逻辑错误：试图创建的对象的大小大于类型的最大值
out_of_range	逻辑错误：使用了一个可用范围外的值

我们只能默认初始化exception、bad_alloc和bad_cast对象。不能为这些对象提供初始化器。

其他的类型正好相反：我们能够使用字符串初始化这些异常类型，但不能默认初始化他们。

异常类型都只定义了一个名为what的操作。
这个函数没有参数，只返回一个const char*，指向一个C-style字符串。
该字符串提供了一些抛出异常的描述。

