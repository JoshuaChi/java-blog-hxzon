java库-持久化数据结构

http://stackoverflow.com/questions/8575723/whats-a-good-persistent-collections-framework-for-use-in-java


========
http://pcollections.org/
https://github.com/blackdrag/pcollections

Related Work

Clojure also provides persistent collections in Java, 
but for now they are less interoperable with Java Collections, 
and seem more designed to be used within the Clojure language itself. 
Both Guava and Java's Collections utility class provide immutable collections but they are not persistent, 
that is they do not provide efficient producers, so they are not nearly as useful. 
See Persistent versus Unmodifiable above.

========
http://www.functionaljava.org/

========
https://github.com/tempredirect/PersistentCollections
迁移clojure的数据结构

Persistent Collections
This is a port of the clojure collection classes to be more approachable from a pure java project.

New PersistentList, TransientList

Implemented features

PersistentTreeList - Immutable List implementation with structural sharing
TransientTreeList - Mutable partner to PersistentTreeList

==
Missing/Known issues

TransientTreeList isn't a complete list implementation:

only add and remove are implemented
clear()/subList().clear() haven't been implemented
iterator().remove()
It doesn't fail fast with ConcurrentModificationException's 
althrough it may not be nessary as it is only editable by a single thread

========
https://github.com/cornim/ClojureCollections

* ClojureCollections
* Copyright (c) Dr. Cornelius Mund. All rights reserved.
* The use and distribution terms for this software are covered by the
* Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
* which can be found in the file epl-v10.html at the root of this distribution.
* By using this software in any fashion, you are agreeing to be bound by the
* terms of this license.
* You must not remove this notice, or any other, from this software.

ClojureCollections offers straight forward generic wrapper classes for the
Persistent collection types in clojure so these can be readily used in Java.
So far, PersistentVector, PersistentMap and PersistentList have been implemented.

For usage examples see the unit tests.

Maven 2 build instructions:

  To build:  mvn package 
  The built JARs will be in target/

  To build without testing:  mvn package -Dmaven.test.skip=true

  To build and install in local Maven repository:  mvn install

  To build a ZIP distribution:  mvn package -Pdistribution
  The built .zip will be in target/

========
https://github.com/andrewoma/dexx is a port of Scala's persistent collections to Java. It includes:

Set, SortedSet, Map, SortedMap and Vector
Adapters to view the persistent collections as java.util equivalents
Helpers for easy construction

========
https://code.google.com/p/totallylazy/

totallylazy is a very good FP library which has implementations of:

PersistentList<T>: the concrete implementations are LinkedList<T> and TreeList<T> (for random access)
PersistentMap<K, V>: the concrete implementations are  HashTreeMap<K, V> and ListMap<K, V>
PersistentSortedMap<K, V>
PersistentSet<T>: the concrete implementation is TreeSet<T>

==
Example of usage:

import static com.googlecode.totallylazy.collections.PersistentList.constructors.*;
import com.googlecode.totallylazy.collections.PersistentList;
import com.googlecode.totallylazy.numbers.Numbers;

...

PersistentList<Integer> list = list(1, 2, 3);

// Create a new list with 0 prepended
list = list.cons(0);

// Prints 0::1::2::3
System.out.println(list);

// Do some actions on this list (e.g. remove all even numbers)
list = list.filter(Numbers.odd);
// Prints 1::3
System.out.println(list);

totallylazy is constantly being maintained. 
The main disadvantage is the total absence of Javadoc.

