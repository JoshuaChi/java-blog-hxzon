AKKA文档（java版）-1，介绍

========
AKKA文档（java版）——什么是AKKA？
http://ifeve.com/akka-doc-java-what-is-akka/

原文：http://doc.akka.io/docs/akka/2.3.6/intro/what-is-akka.htmll  译者：吴京润

====
可扩展的实时事务处理

我们相信编写并发、容错、可扩展的应用相当的困难。
盖因大多数时候我们一直在使用错误的工具和错误的抽象等级。
AKKA就是为了改变这一切的。
我们利用角色模型提升了抽象等级，并且提供了一个用来构建可扩展的、弹性的以及响应式应用的更好的平台
——更多信息请见Reactive Manifesto。
对于容错机制我们采用“让它崩溃”模型，这一模型已在电信行业取得了巨大的成功，
旨在构建自我修复与永不停机的系统。
角色还提供了透明的分布式抽象以及真正的可扩展且容错应用的基础。

AKKA是开源的，并遵守Apache2许可。

从http://akka.io/downloads下载。

请注意所有代码样例的编译，因此如果你想直接访问这些源码，可以去github上访问AKKA文档子项目：Java和Scala。

====
AKKA实现了一个独特的混合

角色

角色给你提供了：

并发与并行性的高等级抽象
异步、无锁以及高性能的事件驱动编程模型
非常轻量级的事件驱动流程（1GB堆内存可容纳几百万的角色）
参考相关章节：Scala或Java

容错

拥有“让它崩溃”语义的管理层级
管理层级可跨越多个JVM，实现真正的容错系统
非常适合编写可自我修复且永不停机的高容错能力的系统
参考相关章节：Scala和Java

位置透明

AKKA的一切旨在分布式环境中工作：角色之间都使用纯消息交互，而且一切都是异步的。

对集群支持的概述请见：Java和Scala。

持久化

启动或重启角色时，可以选择持久化或重放它接收到的消息。
在JVM崩溃或角色迁移到另一节点时，这一点可以使角色恢复它的状态。

更多细节请见：Java和Scala

Scala和Java API

AKKA拥有Scala和Java两种语言的接口文档。

AKKA有两种使用方式

作为一个库：将它放到WEB-INF/lib下面供一个web应用使用，或把它当作一个常规的JAR放到你的类路径里。
微内核方式：将你的应用放到独立的内核里。
更多信息参考用例与部署场景。

商业支持

AKKA由Typesafe Inc.按照包含开发与生产支持的商业许可证开发，更多内容请读这里。

译者注：本人正在翻译AKKA官网文档，本篇是文档第一章，欢迎有兴趣的同学加入一起翻译。
更多内容请读这里：
https://tower.im/projects/ac49db18a6a24ae4b340a5fa22d930dc/todos/640e53d6e8c149ab95c47cd333b91073/

原创文章，转载请注明： 转载自并发编程网 – ifeve.com

========
========
Akka文档（java版）-为什么选择Akka
http://ifeve.com/akka-doc-java-why-akka-2/
原文： http://doc.akka.io/docs/akka/2.3.6/intro/why-akka.html 译者：Vitas Wang

====
1.2 为什么选择Akka?

1.2.1 与同类其它产品相比，Akka平台有什么过人之处呢？

Akka 提供可伸缩的实时事务处理能力。

Akka在以下方面提供了一致的运行时和编程模型：

纵向扩展性（并发）
横向扩展性（远程调用）
容错性

由于Akka的高内聚性和连贯的语义，学习和管理就成了一件事。


Akka是一款极具可伸缩性的软件，它的可伸缩性不仅体现在性能方面，在控制应用程序的大小方面也很实用。
Akka的内核—akka-actor, 非常小并且很容易植入已有项目中。
当你的项目需要异步或没有冲突的无锁并发时就可以考虑将akka-actor植入你的程序。

你还可以对akka核进行瘦身，使其只包含你的程序用到的部分，我们称这个瘦身后的包为Akka微内核。
然后基于它来部署你的Akka应用。
随着cpu核心数的持续攀升，为了得到系统性能方面的提升akka也成了一个不错的选择。
因为Akka即使在单机环境下也能提供杰出的性能。
Akka还提供了一系列的并发范式，用户可以根据自己的需求特点选择最优的方案。

====
1.2.2 Akka适用于那些场景？

Akka被很多大型组织在不同的领域所采用，如：

· 投资和商业银行业务

· 零售业

· 社交媒体

· 仿真

· 游戏和赌博

· 汽车和交通系统

· 医疗卫生

· 数据分析

等等。任何系统只要是需要高吞吐量或低延迟率的都可以考虑使用Akka。

通过角色(Actor)来管理服务故障(Supervisor)，负载管理(回退策略，超时以及进程隔离)，
以及水平和垂直的伸缩性管理(增加cpu核或增加机器数量)。

下面的链接是Akka的使用者对他们是怎样使用Akka的一些评论：

http://stackoverflow.com/questions/4493001/good-use-case-for-akka

所有这些都是基于ApacheV2的开源项目。

