（文章列表）java字节码

by hxzon
====
ASM，字节级别。
hibernate，spring，tapestry5都使用。
除了CGLIB包，脚本语言例如Groovy和BeanShell，也是使用ASM来生成java的字节码。
当然不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。
http://asm.ow2.org/
5.0.3，May 24, 2014
http://download.forge.objectweb.org/asm/asm4-guide.pdf  事件模型和树模型

==
Javassist，源码级别。
hibernate，tapestry5（早期）都使用。
https://github.com/jboss-javassist/javassist
Javassist 3.18.2-GA

==
CGLIB(Code Generation Library)是一个开源项目！
是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。
Hibernate用它来实现PO(Persistent Object 持久化对象)字节码的动态生成。
CGLIB包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类。

Byte Code Generation Library is high level API to generate and transform Java byte code. 
It is used by AOP, testing, data access frameworks to generate dynamic proxy objects and intercept field access.
https://github.com/cglib/cglib

net.sf.cglib.proxy.Enhancer 字节码增强

==
org.apache.tapestry5.plastic

基于ASM。

==
eclipse jdt
java源代码处理。

==
BCEL

==
SERP

====
使用 ASM 实现 Java 语言的“多重继承”

尽管大部分情况下我们并不需要多重继承，但总有一些情况下我们不得不做出多重继承的考虑。
但又由于 Java 语言本身不支持多重继承，这就会带来问题。本文试图使用 ASM 来解决这一问题。
技术文章	2012年 01月 04日

====
Java 字节码工具 ASM 在 web services 开发中的应用

在基于 JAX-WS 标准的 web services 的开发中，不少实际场景都是希望采用自底向上的开发方式， 
即基于已有的 Java bean 来创建 web services 。
WebSphere Application Server ( 以下简称 WAS ) 提供了命令行的工具 wsgen 和相对应的 Ant task 来支持这种开发过程，
而且这两个工具比较适合大型项目的自动化构建。 
这两个工具的使用前提是 Java bean 中事先添加有 web services 的 Annotation 标注，
而在现有的业务系统中，class 文件一般是不带 Annotation 的，
这就需要开发人员去修改现有的代码，以手工方式添加 Annotation，但这样带来的工作量太大且容易出错。
本文介绍了一种解决途径，可以不用修改源代码，而是利用字节码工具 ASM 直接修改 class 文件， 
在字节码文件中自动注入 Annotation ，然后再利用 wsgen 工具就可以很方便地生成 web services 应用。 
本文同时也总结了使用 ASM 的一些实践
技术文章	2011年 09月 26日

====
测试 Java 类的非公有成员变量和方法

测试是软件开发过程中的重要环节之一，充分的测试是保证软件可靠性的重要基础。
然而，测试人员经常遇到一个尴尬的场景，就是当我们要测试一个类的成员变量或方法时，却发现该类的成员变量或方法是非公有的（私有或保护的），
这令很多有经验的测试人员也感到头痛。
本文总结了访问类的非公有成员变量或方法的四种途径，并提供它们在测试领域中的常见应用场景。
技术文章	2008年 04月 25日

====
AOP 的利器：ASM 3.0 介绍

随着 AOP（Aspect Oriented Programming）的发展，代码动态生成已然成为 Java 世界中不可或缺的一环。
本文将介绍一种小巧轻便的 Java 字节码操控框架 ASM，它能方便地生成和改造 Java 代码。
著名的框架，如 Hibernate 和 Spring 在底层都用到了 ASM。
比起传统的 Java 字节码操控框架，BCEL 或者 SERP，它具有更符合现代软件模式的编程模型和更迅捷的性能。
技术文章	2007年 07月 25日

====
Classworking 工具箱: 泛型与 ASM

Java 5 泛型提供了对于许多 classworking 都非常有用的信息。
尽管 Java 反射可用于为载入的类获取泛型信息，但要求类必须载入到 JVM 中，这是一个很大的缺点。
在本文中，classworking 精神领袖 Dennis Sosnoski 展示了 ASM Java 字节码操纵框架
怎样在无需经过 Java classloading 处理的情况下提供对泛型信息的灵活访问。
在文中，他还深入探讨了泛型的二进制类表示。
技术文章	2006年 03月 20日

====
Classworking 工具箱: ASM classworking

在这一期的“Classworking 工具箱”中，咨询顾问 Dennis Sosnoski 把 ASM 字节码操作框架
与他在“Java 编程动态性”系列中讨论过的字节码工程库（Byte Code Engineering Library，BCEL）以及 Javassist 框架进行比较。
ASM 声称自己又小又快 —— 但将它与其他框架进行比较的情况如何呢？ 
Dennis 将采用他在以前系列文章中使用的示例对可用性和性能进行评估。
技术文章	2005年 06月 01日

====
Classworking 工具箱: 注释（Annotation）与 ASM

您是否厌倦了为所有的数据类构建和维护 toString() 方法？
在本期“Classworking 工具箱”文章中，Dennis Sosnoski 顾问向您展示了如何使用 J2SE 5.0 注释和 ASM 字节码操作框架来自动化该过程。
他使用新增的 J2SE 5.0 instrumentation API 来在类被载入 JVM 中时调用 ASM，以提供运行时的动态类修改。
技术文章	2005年 06月 01日

====
====
Java 编程的动态性，第 8 部分: 用代码生成取代反射

从本系列前面的文章中，您了解到反射的性能比直接访问要慢许多倍，并了解了用 Javassist 和 Apache Byte Code Engineering Library （BCEL）进行classworking。
Java 顾问 Dennis Sosnoski 通过演示如何使用运行时 classworking，来用全速前进的生成代码取代反射代码，从而结束他的 Java 编程的动态性 系列。
技术文章	2004年 06月 01日

====
Java 编程的动态性，第 6 部分: 利用 Javassist 进行面向方面的更改

Java 顾问 Dennis Sosnoski 在他的关于 Javassist 框架的三期文章中将精华部分留在了最后。
这次他展现了 Javassist 对搜索-替换的支持是如何使对 Java 字节码的编辑变得像文本编辑器的“替换所有（Replace All ）”命令一样容易的。
想报告所有写入特定字段的内容或者对方法调用中参数的更改中的补丁吗？
Javassist 使这变得很容易，Dennis 向您展示了其做法。
技术文章	2004年 03月 15日

====
Java 编程的动态性，第 5 部分: 动态转换类

在经过一段时间的休息之后，Dennis Sosnoski 又回来推出了他的Java 编程的动态性 系列的第 5 部分。
您已在前面的文章中看到了如何编写用于转换 Java 类文件以改变代码行为的程序。
在本期中，Dennis将展示如何使用 Javassist 框架，把转换与实际的类加载过程结合起来，用以进行灵活的“即时”面向方面的特性处理。
这种方法允许您决定想要在运行时改变的内容，并潜地在每次运行程序时做出不同的修改。
在整个过程中，您还将更深入地了解向JVM 中加载类的一般问题。
技术文章	2004年 03月 13日

====
Java 编程的动态性， 第四部分: 用 Javassist 进行类转换

厌倦了只能按编写好源代码的方式执行的 Java 类了吗？那么打起精神吧，因为您就要发现如何将编译器编译好的类进行改造的方法了！
在本文中，Java 顾问 Dennis Sosnoski 通过介绍字节码操作库 Javassist 将他的Java 编程的动态性 系列带入高潮，
Javassist 是广泛使用的 JBoss 应用服务器中加入的面向方面的编程功能的基础。
您会看到到用 Javassist 转换现有类的基本内容，并且了解到这种用框架源代码处理类的方法的威力和局限性。

====
Java 编程的动态性，第 7 部分: 用 BCEL 设计字节码

Apache Byte Code Engineering Library (BCEL)可以深入 Java 类的字节码。
可以用它转换现有的类表示或者构建新的类，因为 BCEL 在单独的 JVM 指令级别上进行操作，所以可以让您对代码有最强大的控制。
不过，这种能力的代价是复杂性。
在本文中，Java 顾问 Dennis Sosnoski 介绍了 BCEL 的基本内容，并引导读者完成一个示例 BCEL 应用程序，
这样您就可以自己决定是否值得以这种复杂性来换取这种能力。
技术文章	2004年 04月 01日

====
Java 编程的动态性，第 1 部分: 类和类装入

这一有关 Java 编程动态方面的新的系列文章研究了执行 Java 应用程序时幕后所发生的事情。
企业 Java专家 Dennis Sosnoski 提供了 Java 二进制类格式以及在 JVM 内部类所发生的情况的内幕。
接着，他将讨论类装入问题，其范围涉及从运行简单的 Java 应用程序所需的类的数量到可能造成 J2EE 及类似的复杂体系结构出现问题的类装入器冲突。
技术文章	2003年 06月 06日

====
Java编程 的动态性，第 2部分: 引入反射
使用运行时类信息来准备编程
http://www.ibm.com/developerworks/cn/java/j-dyn0603/

反射使您的程序代码能够接入装载到JVM中的类的内部信息，允许您编写与执行时，而不是源代码中选定的类协作的代码。
这使反射成为构建灵活的应用的主要工具。
但需注意的是 --如果使用不当，反射的成本很高。
在Java平台系列的第2部分中，软件顾问Dennis Sosnoski介绍了如何使用反射，以及某些相关的成本。
您还将找到JavaReflection API如何使您能够在运行时关联对象。

====
Java 编程的动态性，第3部分: 应用反射
为命令行参数构建一个框架
http://www.ibm.com/developerworks/cn/java/j-dyn0715/

命令行参数处理是一项令人厌烦的零碎工作，不管您过去已经处理过多少次了，它好像总能重新摆在您的面前。
与其一遍又一遍地编写同一块代码的不同变种，为什么不利用反射来简化参数处理的工作呢？
Java 顾问 Dennis Sosnoski 向您展示了如何做到这一点。
在本文中，Dennis 简明扼要地介绍了一个开源库，这个库可以使得命令行参数实际上自己处理自己。
技术文章	2003年 09月 25日

====
结合反射与 XML 实现 Java 编程的动态性

反射是 Java 语言被视为动态或准动态语言的一个关键性质，结合反射和 XML 会帮助我们更快、更方便地实现一些动态代码，
从而解决编程中可能遇到的不确定问题。
本文将结合反射与 XML 对 Java 编程的动态性进行深入浅出的讨论。
在理解本文的思想之后，您可以将其应用到程序中以创建灵活的代码。




