（官方文档）kotlin-Classes and Inheritance，Properties and Fields

========
Classes and Inheritance
http://kotlinlang.org/docs/reference/classes.html

Classes

Classes are first-class citizens in Kotlin and are declared using the keyword class

class Invoice {

}
Class bodies are optional. In Kotlin if a class has no body, it can omit the curly braces

class Invoice
Constructors

Classes in Kotlin can only have a single constructor, which is declared in the header and any initialization code should be enclosed in an anonymous initializer

class Customer(name: String) {

    {
        logger.info("Customer initialized with value ${name}")
    }
}
If the initialization is merely assigning values to class properties, this can be done without having to use an anonymous initializer

class Customer(name: String) {
    val customerName = name
}
In fact, for declaring properties and initializing them from the constructor, Kotlin has a more concise syntax

class Customer(val customerName: String) {

}
which is equivalent to the previous code. Much the same way as when declaring properties, those explicitly declared in the constructor can be mutable (var) or read-only (val).

To specify a visibility of a constructor, use the following syntax:

class Customer private (name: String) { ... }
For more details, see Visibility Modifiers.

Creating instances of classes

To create an instance of a class, we call the constructor as if it were a regular function

val invoice = Invoice()

val customer = Customer("Joe Smith")
Note that Kotlin does not have a new

Class Members

Classes can contain

Functions
Properties
Nested and Inner Classes
Object Declarations
Inheritance

All classes in Kotlin have a common superclass Any, that is a default super for a class with no supertypes declared:

class Example // Implicitly inherits from Any
Any is not java.lang.Object; in particular, it does not have any members other than equals(), hashCode() and toString(). Please consult the Java interoperability section for more details.

To declare an explicit supertype, we place the type after a colon in the class header:

open class Base(p : Int)

class Derived(p : Int) : Base(p)
As you can see, the base type can (and must) be initialized right there, using the parameters of the primary constructor.

The open annotation on a class is the opposite of Java’s final: it allows others to inherit from this class. By default, all classes in Kotlin are final, which corresponds to Item 17 of Effective Java: Design and document for inheritance or else prohibit it.

Overriding Members

As we mentioned before, we stick to making things explicit in Kotlin. And unlike Java, Kotlin requires explicit annotations for overridable members that we call open and for overrides:

open class Base {
  open fun v() {}
  fun nv() {}
}
class Derived() : Base() {
  override fun v() {}
}
The override annotation is required for Derived.v(). If it were missing, the compiler would complain. If there is no open annotation on a function, like Base.nv(), declaring a method with the same signature in a subclass is illegal, either with override or without it. In a final class (e.g. a class with no open annotation), open members are prohibited.

A member marked override is itself open, i.e. it may be overridden in subclasses. If you want to prohibit re-overriding, use final:

open class AnotherDerived() : Base() {
  final override fun v() {}
}
Wait! How will I hack my libraries now?!

One issue with our approach to overriding (classes and members final by default) is that it would be difficult to subclass something inside the libraries you use to override some method that was not intended for overriding by the library designer, and introduce some nasty hack there.

We think that this is not a disadvantage, for the following reasons:

Best practices say that you should not allow these hacks anyway
People successfully use other languages (C++, C#) that have similar approach
If people really want to hack, there still are ways: in some cases it will be possible to write your hack in Java, and Aspect frameworks always work for these purposes…
Overriding Rules

In Kotlin, implementation inheritance is regulated by the following rule: if a class inherits many implementations of the same member from its immediate superclasses, it must override this member and provide its own implementation (perhaps, using one of the inherited ones). To denote the supertype from which the inherited implementation is taken, we use super qualified by the supertype name in angle brackets, e.g. super<Base>:

open class A {
  open fun f() { print("A") }
  fun a() { print("a") }
}

trait B {
  fun f() { print("B") } // trait members are 'open' by default
  fun b() { print("b") }
}

class C() : A(), B {
  // The compiler requires f() to be overridden:
  override fun f() {
    super<A>.f() // call to A.f()
    super<B>.f() // call to B.f()
  }
}
It’s fine to inherit from both A and B, and we have no problems with a() and b() since C inherits only one implementation of each of these functions. But for f() we have two implementations inherited by C, and thus we have to override f() in C and provide our own implementation that eliminates the ambiguity.

Abstract Classes

A class and some of its members may be declared abstract. An abstract member does not have an implementation in its class. Thus, when some descendant inherits an abstract member, it does not count as an implementation:

abstract class A {
  abstract fun f()
}

trait B {
  open fun f() { print("B") }
}

class C() : A(), B {
  // We are not required to override f()
}
Note that we do not need to annotate an abstract class open – it goes without saying. Neither need we annotate an abstract function open.

We can override a non-abstract open member with an abstract one

open class Base {
  open fun f() {}
}

abstract class Derived : Base() {
  override abstract fun f()
}
Class Objects

In Kotlin, unlike Java or C#, classes do not have static methods. In most cases, namespace-level functions form a good substitute for them, but there are a few cases when they don’t. These cases involve access to class’ internals (private members).

For example, to replace a constructor with a Factory method, we make the constructor private and provide a function that calls the constructor. But if this function in located outside the class in question, it would not have any access to the constructor.

To address this issue (and to provide some other interesting features), Kotlin introduces a concept of a class object (the closest analog in other languages would be Companion objects in Scala). Roughly speaking, a class object for class C is an object (in the sense of Object declaration) that is associated to C. There may be not more than one class object for each class. A class object is declared inside its associated class, and thus it can access its private members. A class object for C itself is (usually) not an instance of C. For example:

class C() {
  class object {
    fun create() = C()
  }
}

fun main() {
  val c = C.create() // C denotes the class object here
}
At first you may think that this is just a way of grouping static members of a class together instead of mixing them with instance members: in Java we access static members of C by calling C.foo(), and the same happens with class object’s members in Kotlin. But in fact there is an important difference: a class object can have supertypes, and C, as an expression denotes this object as a value, so we can pass it around, say, as an argument for a function. Let’s modify our example to demonstrate this

abstract class Factory<out T> {
  abstract fun create() : T
}

open class C() {
  class object : Factory<C>() {
    override fun create() : C = C()
  }
}

fun main() {
  val factory = C // C denotes the class object
  val c = factory.create()
}
Note that class objects are never inherited:

class D : C()

val d = D.create() // Error: no class object for D
A description of some more interesting features related to class objects can be found in the Generic constraints section.

Note: if you think that class objects are a great way of implementing singletons in Kotlin, please see Object expressions and Declarations.

========
Properties and Fields
http://kotlinlang.org/docs/reference/properties.html

Declaring Properties

Classes in Kotlin can have properties. These can be declared as mutable, using the var keyword or read-only using the val keyword.

public class Address { 
  public var name : String = ...
  public var street : String = ...
  public var city : String = ...
  public var state : String? = ...
  public var zip : String = ...
}
To use a property, we simply refer to it by name, as if it were a field in Java:

fun copyAddress(address : Address) : Address {
  val result = Address() // there's no 'new' keyword in Kotlin
  result.name = address.name // accessors are called
  result.street = address.street
  // ...
  return result
}
Getters and Setters

The full syntax for declaring a property is

var <propertyName> : <PropertyType> [= <property_initializer>]
  <getter>
  <setter>
The initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer or from the base class member being overridden .

Examples

var allByDefault : Int? // error: explicit initializer required, default getter and setter implied
var initialized = 1 // has type Int, default getter and setter
var setterVisibility : String = "abc" // Initializer required, not a nullable type
  private set // the setter is private and has the default implementation
Note that types are not inferred for properties exposed as parts of the public API, i.e. public and protected, because changing the initializer may cause an unintentional change in the public API then. For example

public val example = 1 // A public property must have a type specified explicitly
The full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with val instead of var and does not allow a setter:

val simple : Int? // has type Int, default getter, must be initialized in constructor
val inferredType = 1 // has type Int and a default getter
We can write custom accessors, very much like ordinary functions, right inside a property declaration. Here’s an example of a custom getter:

val isEmpty : Boolean
  get() = this.size == 0
Since this property is purely derived from others, the compiler will not generate a backing field for it.

A custom setter looks like this:

var stringRepresentation : String
  get() = this.toString()
  set(value) {
    setDataFromString(value) // parses the string and assigns values to other properties
  }
Backing Fields

Classes in Kotlin cannot have fields. However, sometimes it is necessary to have a backing field when using custom accessors. For these purposes, Kotlin provides an automatic backing field which can be accessed using the $ symbol followed by the property name.

var counter = 0 // the initializer value is written directly to the backing field
  set(value) {
    if (value >= 0)
      $counter = value
  }
The $counter field can be accessed only from inside the class where the counter property is defined.

The compiler looks at the accessors’ bodies, and if they use the backing field (or the accessor implementation is left by default), a backing field is generated, otherwise it is not.

For example, in the following case there will be no backing field:

val isEmpty : Boolean
  get() = this.size > 0
Backing Properties

If you want to do something that does not fit into this “implicit backing field” scheme, you can always fall back to having a “backing property”:

private var _table : Map<String, Int>? = null
public val table : Map<String, Int>
  get() {
    if (_table == null)
      _table = HashMap() // Type parameters are inferred
    return _table ?: throw AssertionError("Set to null by another thread")
  }
In all respects, this is just the same as in Java since access to private properties with default getters and setters is optimized so that no function call overhead is introduced.

Overriding Properties

See Overriding Member

Delegated Properties

The most common kind of properties simply reads from (and maybe writes to) a backing field. On the other hand, with custom getters and setters one can implement any behaviour of a property. Somewhere in between, there are certain common patterns of how a property may work. A few examples: lazy values, reading from a map by a given key, accessing a database, notifying listener on access, etc.

Such common behaviours can be implemented as libraries using delegated properties. For more information, look here.

