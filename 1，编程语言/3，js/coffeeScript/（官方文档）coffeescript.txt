（官方文档）coffeescript
http://coffeescript.org/

Overview
Installation
Usage
Literate CoffeeScript

Language Reference
Literals: Functions, Objects and Arrays
Lexical Scoping and Variable Safety
If, Else, Unless, and Conditional Assignment
Splats...
Loops and Comprehensions

Array Slicing and Splicing
Everything is an Expression
Operators and Aliases

Classes, Inheritance, and Super
Destructuring Assignment
Function Binding
Embedded JavaScript
Switch and Try/Catch
Chained Comparisons
String Interpolation, Block Strings, and Block Comments
Block Regular Expressions

Cake, and Cakefiles
Source Maps
"text/coffeescript" Script Tags
Books, Screencasts, Examples and Resources
Change Log

==============
CoffeeScript is a little language that compiles into JavaScript. 
Underneath that awkward Java-esque patina, JavaScript has always had a gorgeous heart. 
CoffeeScript is an attempt to expose the good parts of JavaScript in a simple way.
编译成javascript。

The golden rule of CoffeeScript is: "It's just JavaScript". 
The code compiles one-to-one into the equivalent JS, and there is no interpretation at runtime. 
You can use any existing JavaScript library seamlessly from CoffeeScript (and vice-versa). 
The compiled output is readable and pretty-printed, will work in every JavaScript runtime, 
and tends to run as fast or faster than the equivalent handwritten JavaScript.
逐行翻译，没有运行时解释。

Latest Version: 1.8.0

npm install -g coffee-script

=========
Overview
概览

CoffeeScript on the left, compiled JavaScript output on the right.

# Assignment:
number   = 42
opposite = true

# Conditions:
number = -42 if opposite

# Functions:
square = (x) -> x * x

# Arrays:
list = [1, 2, 3, 4, 5]

# Objects:
math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x

# Splats:
race = (winner, runners...) ->
  print winner, runners

# Existence:
alert "I knew it!" if elvis?

# Array comprehensions:
cubes = (math.cube num for num in list)
var cubes, list, math, num, number, opposite, race, square,
  __slice = [].slice;

number = 42;

opposite = true;

if (opposite) {
  number = -42;
}

square = function(x) {
  return x * x;
};

list = [1, 2, 3, 4, 5];

math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {
    return x * square(x);
  }
};

race = function() {
  var runners, winner;
  winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return print(winner, runners);
};

if (typeof elvis !== "undefined" && elvis !== null) {
  alert("I knew it!");
}

cubes = (function() {
  var _i, _len, _results;
  _results = [];
  for (_i = 0, _len = list.length; _i < _len; _i++) {
    num = list[_i];
    _results.push(math.cube(num));
  }
  return _results;
})();
run: cubes

=========
Installation
安装

The CoffeeScript compiler is itself written in CoffeeScript, using the Jison parser generator. 
The command-line version of coffee is available as a Node.js utility. 
The core compiler however, does not depend on Node, 
and can be run in any JavaScript environment, or in the browser (see "Try CoffeeScript", above).

To install, first make sure you have a working copy of the latest stable version of Node.js, and npm (the Node Package Manager). 
You can then install CoffeeScript globally with npm:

npm install -g coffee-script

When you need CoffeeScript as a dependency, install it locally:

npm install --save coffee-script

If you'd prefer to install the latest master version of CoffeeScript, 
you can clone the CoffeeScript source repository from GitHub, or download the source directly. 
To install the latest master CoffeeScript compiler with npm:

npm install -g jashkenas/coffeescript

Or, if you want to install to /usr/local, and don't want to use npm to manage it, open the coffee-script directory and run:

sudo bin/cake install

=======
Usage

Once installed, you should have access to the coffee command, 
which can execute scripts, compile .coffee files into .js, and provide an interactive REPL. 
The coffee command takes the following options:

-c, --compile	Compile a .coffee script into a .js JavaScript file of the same name.
-m, --map	Generate source maps alongside the compiled JavaScript files. Adds  sourceMappingURL directives to the JavaScript as well.
-i, --interactive	Launch an interactive CoffeeScript session to try short snippets. Identical to calling coffee with no arguments.
-o, --output [DIR]	Write out all compiled JavaScript files into the specified directory. Use in conjunction with --compile or --watch.
-j, --join [FILE]	Before compiling, concatenate all scripts together in the order they were passed, and write them into the specified file. Useful for building large projects.
-w, --watch	Watch files for changes, rerunning the specified command when any file is updated.
-p, --print	Instead of writing out the JavaScript as a file, print it directly to stdout.
-s, --stdio	Pipe in CoffeeScript to STDIN and get back JavaScript over STDOUT. Good for use with processes written in other languages. An example:
cat src/cake.coffee | coffee -sc
-l, --literate	Parses the code as Literate CoffeeScript. You only need to specify this when passing in code directly over stdio, or using some sort of extension-less file name.
-e, --eval	Compile and print a little snippet of CoffeeScript directly from the command line. For example:
coffee -e "console.log num for num in [10..1]"
-b, --bare	Compile the JavaScript without the top-level function safety wrapper.
-t, --tokens	Instead of parsing the CoffeeScript, just lex it, and print out the token stream: [IDENTIFIER square] [ASSIGN =] [PARAM_START (] ...

-n, --nodes	Instead of compiling the CoffeeScript, just lex and parse it, and print out the parse tree:
Expressions
  Assign
    Value "square"
    Code "x"
      Op *
        Value "x"
        Value "x"
--nodejs	The node executable has some useful options you can set, such as
--debug, --debug-brk, --max-stack-size, and --expose-gc. Use this flag to forward options directly to Node.js. To pass multiple flags, use --nodejs multiple times.

Examples:

Compile a directory tree of .coffee files in src into a parallel tree of .js files in lib:
coffee --compile --output lib/ src/
Watch a file for changes, and recompile it every time the file is saved:
coffee --watch --compile experimental.coffee
Concatenate a list of files into a single script:
coffee --join project.js --compile src/*.coffee
Print out the compiled JS from a one-liner:
coffee -bpe "alert i for i in [0..10]"
All together now, watch and recompile an entire project as you work on it:
coffee -o lib/ -cw src/
Start the CoffeeScript REPL (Ctrl-D to exit, Ctrl-Vfor multi-line):
coffee

====
Literate CoffeeScript

Besides being used as an ordinary programming language, CoffeeScript may also be written in "literate" mode. 
If you name your file with a  .litcoffee extension, you can write it as a Markdown document 
— a document that also happens to be executable CoffeeScript code. 
The compiler will treat any indented blocks (Markdown's way of indicating source code) as code, and ignore the rest as comments.

Just for kicks, a little bit of the compiler is currently implemented in this fashion: 
See it as a document, raw, and properly highlighted in a text editor.

I'm fairly excited about this direction for the language, 
and am looking forward to writing (and more importantly, reading) more programs in this style. 
More information about Literate CoffeeScript, including an example program, are available in this blog post.

====
Language Reference

This reference is structured so that it can be read from top to bottom, if you like. 
Later sections use ideas and syntax previously introduced. 
Familiarity with JavaScript is assumed. 
In all of the following examples, the source CoffeeScript is provided on the left, 
and the direct compilation into JavaScript is on the right.

Many of the examples can be run (where it makes sense) by pressing the run button on the right, 
and can be loaded into the "Try CoffeeScript" console by pressing the load button on the left.

First, the basics: CoffeeScript uses significant whitespace to delimit blocks of code. 
You don't need to use semicolons ; to terminate expressions, ending the line will do just as well 
(although semicolons can still be used to fit multiple expressions onto a single line). 
Instead of using curly braces  { } to surround blocks of code in functions, if-statements, switch, and try/catch, use indentation.

You don't need to use parentheses to invoke a function if you're passing arguments. 
The implicit call wraps forward to the end of the line or block expression.
传递参数时不用使用括号。

console.log sys.inspect object → console.log(sys.inspect(object));

====
Functions

Functions are defined by an optional list of parameters in parentheses, an arrow, and the function body. 
函数定义

The empty function looks like this:  ->
空函数定义。

square = (x) -> x * x
cube   = (x) -> square(x) * x

生成的js：

var cube, square;

square = function(x) {
  return x * x;
};

cube = function(x) {
  return square(x) * x;
};


Functions may also have default values for arguments, which will be used if the incoming argument is missing (null or undefined).
可以有默认参数值。

fill = (container, liquid = "coffee") ->
  "Filling the #{container} with #{liquid}..."

生成的js：

var fill;

fill = function(container, liquid) {
  if (liquid == null) {
    liquid = "coffee";
  }
  return "Filling the " + container + " with " + liquid + "...";
};

fill("cup")

====
Objects and Arrays

The CoffeeScript literals for objects and arrays look very similar to their JavaScript cousins. 
When each property is listed on its own line, the commas are optional. 
Objects may be created using indentation instead of explicit braces, similar to YAML.

song = ["do", "re", "mi", "fa", "so"]

singers = {Jagger: "Rock", Elvis: "Roll"}

bitlist = [
  1, 0, 1
  0, 0, 1
  1, 1, 0
]

kids =
  brother:
    name: "Max"
    age:  11
  sister:
    name: "Ida"
    age:  9

生成的js：

var bitlist, kids, singers, song;

song = ["do", "re", "mi", "fa", "so"];

singers = {
  Jagger: "Rock",
  Elvis: "Roll"
};

bitlist = [1, 0, 1, 0, 0, 1, 1, 1, 0];

kids = {
  brother: {
    name: "Max",
    age: 11
  },
  sister: {
    name: "Ida",
    age: 9
  }
};

song.join(" ... ")

In JavaScript, you can't use reserved words, like class, as properties of an object, without quoting them as strings. 
CoffeeScript notices reserved words used as keys in objects and quotes them for you, 
so you don't have to worry about it (say, when using jQuery).
在js中，不能使用保留字。
在coffeescript中可以使用，会自动帮你转换。

$('.account').attr class: 'active'

log object.class

生成的js：

$('.account').attr({
  "class": 'active'
});

log(object["class"]);

====
Lexical Scoping and Variable Safety
词法作用域，安全变量

The CoffeeScript compiler takes care to make sure that 
all of your variables are properly declared within lexical scope — you never need to write  var yourself.
所有的变量都是词法作用域的，你不需要使用var关键字。

outer = 1
changeNumbers = ->
  inner = -1
  outer = 10
inner = changeNumbers()

生成的js：

var changeNumbers, inner, outer;

outer = 1;

changeNumbers = function() {
  var inner;
  inner = -1;
  return outer = 10;
};

inner = changeNumbers();

Notice how all of the variable declarations have been pushed up to the top of the closest scope, the first time they appear. 
outer is not redeclared within the inner function, because it's already in scope; 
inner within the function, on the other hand, should not be able to change the value of the external variable of the same name, 
and therefore has a declaration of its own.

This behavior is effectively identical to Ruby's scope for local variables. 
Because you don't have direct access to the var keyword, it's impossible to shadow an outer variable on purpose, you may only refer to it. 
So be careful that you're not reusing the name of an external variable accidentally, if you're writing a deeply nested function.

Although suppressed within this documentation for clarity, all CoffeeScript output is wrapped in an anonymous function:  
(function(){ ... })(); 
This safety wrapper, combined with the automatic generation of the var keyword, 
make it exceedingly difficult to pollute the global namespace by accident.

If you'd like to create top-level variables for other scripts to use, attach them as properties on window, or on the exports object in CommonJS. 
The existential operator (covered below), gives you a reliable way to figure out where to add them; 
if you're targeting both CommonJS and the browser: exports ? this
如果需要创建全局变量，使用全局对象，例如window。

====
If, Else, Unless, and Conditional Assignment

If/else statements can be written without the use of parentheses and curly brackets. 
As with functions and other block expressions, multi-line conditionals are delimited by indentation. 
There's also a handy postfix form, with the if or unless at the end.

CoffeeScript can compile if statements into JavaScript expressions, using the ternary operator when possible, and closure wrapping otherwise. 
There is no explicit ternary statement in CoffeeScript — you simply use a regular if statement on a single line.
没有三元操作符。

mood = greatlyImproved if singing

if happy and knowsIt
  clapsHands()
  chaChaCha()
else
  showIt()

date = if friday then sue else jill

生成的js：

var date, mood;

if (singing) {
  mood = greatlyImproved;
}

if (happy && knowsIt) {
  clapsHands();
  chaChaCha();
} else {
  showIt();
}

date = friday ? sue : jill;

====
Splats...
不定参数

The JavaScript arguments object is a useful way to work with functions that accept variable numbers of arguments. 
CoffeeScript provides splats ..., both for function definition as well as invocation, 
making variable numbers of arguments a little bit more palatable.

gold = silver = rest = "unknown"

awardMedals = (first, second, others...) ->
  gold   = first
  silver = second
  rest   = others

contenders = [
  "Michael Phelps"
  "Liu Xiang"
  "Yao Ming"
  "Allyson Felix"
  "Shawn Johnson"
  "Roman Sebrle"
  "Guo Jingjing"
  "Tyson Gay"
  "Asafa Powell"
  "Usain Bolt"
]

awardMedals contenders...

alert "Gold: " + gold
alert "Silver: " + silver
alert "The Field: " + rest

生成的js：

var awardMedals, contenders, gold, rest, silver,
  __slice = [].slice;

gold = silver = rest = "unknown";

awardMedals = function() {
  var first, others, second;
  first = arguments[0], second = arguments[1], others = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
  gold = first;
  silver = second;
  return rest = others;
};

contenders = ["Michael Phelps", "Liu Xiang", "Yao Ming", "Allyson Felix", "Shawn Johnson", "Roman Sebrle", "Guo Jingjing", "Tyson Gay", "Asafa Powell", "Usain Bolt"];

awardMedals.apply(null, contenders);

alert("Gold: " + gold);

alert("Silver: " + silver);

alert("The Field: " + rest);

