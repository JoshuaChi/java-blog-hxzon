（hxzon学习笔记）clojure-集合相关的函数-2，常用操作

by hxzon

----
截取：
(drop n coll)，丢弃开头n个元素
(drop-last n coll) ，丢弃最后n个元素
(drop-while pred coll)

take，
take-last，
(take-nth n coll)，取出n，2n，3n... 位置的元素
take-while 。
subvec

数据变换：
(update-in map ks f & fps)，
update-in（嵌套），

(replace s-map coll) ，根据s-map，替换集合中的元素，

merge-with，
map，
mapv ，同map，但返回的是向量，

mapcat，
map-indexed，
keep，
keep-indexed，
juxt，
map-invert，
(interpose sep coll)，在元素之间插入sep

(flatten x) ，平铺

分组：
group-by（分组），
partition（分区），
partition-all ，
partition-by 。
split-at ，
split-with 。

规约（聚合）：
reduce，
reductions  规约历史，
frequencies ， 
max-key 。

筛选：
filter，filterv，
remove，
select-keys ，
subseq 。

(rand-nth coll) ，随机一个元素

clojure.set/select，
clojure.set/difference，
clojure.set/intersection 
distinct （去除重复元素） 。

检查集合的元素：
contains? ，
distinct? ，
empty? ，
every? ，not-every? ，
some，not-any? 。

排序：
sort，sort-by，
sorted-map-by ， sorted-set-by ， 
reverse （逆序）， shuffle （乱序），
rseq （逆序向量或有序map）， 
rsubseq 。 

强迫求值：
doall ， 
dorun 。

========
截取：

1，drop
function
Usage: (drop n) ，hxzon：抛出异常。
       (drop n coll)

Elides the first n values from the reduction of coll.
（Elides，滑动，幻灯片。）
丢弃开头n个元素。

(drop 2 [\a \b \c \d \e \f])
;= (\c \d \e \f)

====
1.1，(drop-while pred coll)

与take-while相反。
从头开始去掉元素，直到(pred item)返回false。

user=> (drop-while even? [2 4 1 5 6])
(1 5 6)

====
2，take
function
Usage: (take n coll)

Returns a lazy sequence of the first n items in coll, 
or all items if there are fewer than n.
获取惰性序列的开头n个元素。

====
2.1，take-last
function
Usage: (take-last n coll)

Returns a seq of the last n items in coll.  
Depending on the type of coll may be no better than linear time.  
For vectors, see also subvec.
获取惰性序列尾部n个元素。

====
2.2，take-nth
function
Usage: (take-nth n coll)

Returns a lazy seq of every nth item in coll.

(take-nth 2 [0 1 2 3 4 5 6 7 8 9])
;= (0 2 4 6 8)

====
2.3，take-while
function
Usage: (take-while pred coll)

Returns a lazy sequence of successive items from coll while (pred item) returns true. 
pred must be free of side-effects.
获取开头的元素，直到遇到不满足谓词的元素时停止。

(take-while even? [0 2 4 1 2 3 4])
;= (0 2 4)

====
3，subvec：
(subvec vec start)
(subvec vec start end)

subvec接收两个或三个参数。
第一个是向量，第二个和第三个（如果有的话）是索引。
它返回一个新向量，这个向量由原来那个向量的
介于两个索引之间或者第一个索引到向量末尾（如果没有第二个索引）的部分组成。 

user=> (subvec [12 3 4 5 6 7] 2)  
[4 5 6 7]

user=> (subvec [12 3 4 5 6 7] 2 4)  
[4 5]

========
数据变换：

====
1，(update-in map ks f & fps)
根据 f 更新map中指定路径对应的值。
f 的第一个参数是原来的值。

user=> (update-in {:name "qh" :age 30} [:age] #(inc %))  
{:age 31, :name "qh"}

user=> (update-in {:a {:b 3 :b2 4} :a2 3} [:a :b] / 4 5)
{:a2 3, :a {:b2 4, :b 3/20}}

==
(defn update-in
  "'Updates' a value in a nested associative structure, where ks is a
  sequence of keys and f is a function that will take the old value
  and any supplied args and return the new value, and returns a new
  nested structure.  If any levels do not exist, hash-maps will be
  created."
  {:added "1.0"
   :static true}
  ([m [k & ks] f & args]
   (if ks
     (assoc m k (apply update-in (get m k) ks f args))
     (assoc m k (apply f (get m k) args)))))

====
1.2，update

(defn update
  "'Updates' a value in an associative structure, where k is a
  key and f is a function that will take the old value
  and any supplied args and return the new value, and returns a new
  structure.  If the key does not exist, nil is passed as the old value."
  {:added "1.7"
   :static true}

  ([m k f]
   (assoc m k (f (get m k))))
  ([m k f x]
   (assoc m k (f (get m k) x)))
  ([m k f x y]
   (assoc m k (f (get m k) x y)))
  ([m k f x y z]
   (assoc m k (f (get m k) x y z)))
  ([m k f x y z & more]
   (assoc m k (apply f (get m k) x y z more))))

====
2，

====
3，replace
function
Usage: (replace s-map coll)

Given a map of replacement pairs and a vector/collection, 
returns a vector/seq with any elements = a key in smap replaced with the corresponding val in smap.

将coll集合中的元素替换成smap中该元素（键）对应的值。

====
4，(merge-with f map1 map2 ...) 
合并map，用 f 对 key相同的value做处理。 

user=> (merge-with + {:a 1 :b 2} {:a 2 :b 98 :c 0})  
{:c 0, :a 3, :b 100}  

这里把value值相加作为新的value值。

====
5，map
(map f [a b c]) 相当于 [(f a) (f b) (f c)] 。

(map f [a b c] [x y x]) 相当于 [(f a x) (f b y) (f c z)] 。

map的结果跟它最短的参数一样长。

====
5.1，mapv
和map一样，但是返回的是向量，而不是惰性序列。后缀v表示向量。


====
6，map-indexed
(map-indexed f coll)

返回一个惰性序列，序列里的元素，是函数 f 的求值结果，
函数 f 应该接受两个参数：一个索引值，一个是 coll 的元素值。

user=> (map-indexed (fn [idx item] [idx item]) "foobar")
([0 \f] [1 \o] [2 \o] [3 \b] [4 \a] [5 \r])

user=> (map-indexed vector "foobar")    ; 另一种更简单的解法
([0 \f] [1 \o] [2 \o] [3 \b] [4 \a] [5 \r])

====
7，keep
(keep f coll)

返回一个惰性序列， 序列包含 (f item) 除 nil 之外的所有计算结果。
因为带副作用的函数会返回与计算结果无关的虚假值， 因此，
为了确保虚假值不会混进 keep 所生成的惰性序列中， f 必须是一个无副作用的函数。

user=> (keep inc [1 2 3])
(2 3 4)

; 将空的 collection 传给 seq 函数会返回 nil
; 可以根据这个性质来测试 keep
; 看它是否真的会省略等于 nil 的值
user=> (seq [])
nil

user=> (keep seq (list [1 2 3] [] [4 5 6]))
((1 2 3) (4 5 6))

====
7.1，keep-indexed
(keep-indexed f coll)

返回一个惰性序列， 序列中包含 (f index item) 除 nil 之外的所有计算结果。

因为带副作用的函数会返回与计算结果无关的虚假值， 
因此，为了确保虚假值不会混进 keep-indexed 所生成的惰性序列中， f 必须是一个无副作用的函数。

; 返回 0 - 9 内所有排序位置(index)为偶数的数字（对于奇数，匿名函数返回nil，这些nil被移除了。）
user=> (keep-indexed #(if (even? %1) %2 nil) (range 10))
(0 2 4 6 8)

====
8，mapcat
(mapcat f & colls)

等同于调用 (concat (map f colls)) 。

user=> (mapcat reverse [[3 2 1 0]
                        [6 5 4]
                        [9 8 7]])
(0 1 2 3 4 5 6 7 8 9)

====
9，juxt，并列。
function
Usage: (juxt f)
       (juxt f g)
       (juxt f g h)
       (juxt f g h & fs)

Takes a set of functions and returns a fn that is the juxtaposition（并列） of those fns.  
The returned fn takes a variable number of args, and
returns a vector containing the result of applying each fn to the args (left-to-right).

返回一个函数。

((juxt a b c) x) => [(a x) (b x) (c x)]

====
10，map-invert
(map-invert m)

反转一个 map ，将它原本的 value 映射为新 map 的 key ，原本的 key 映射为新 map 的 value 。
注意，当多个 key 有同一个 value 时，新 map 只保留其中的一个作为 key 。

====
11，interpose
function
Usage: (interpose sep coll)
(interpose)

Returns a lazy seq of the elements of coll separated by sep.
返回一个新序列，在元素之间插入sep 。

Returns a stateful transducer when no collection is provided.

(interpose 'a [1 2 3 4 5])
;= (1 a 2 a 3 a 4 a 5)

====
flatten

function
Usage: (flatten x)

Takes any nested combination of sequential things (lists, vectors,
etc.) and returns their contents as a single, flat sequence.
(flatten nil) returns an empty sequence.

平铺。

========
分组：

====
1，group-by
function
Usage: (group-by f coll)

Returns a map of the elements of coll keyed by the result of f on each element. 
The value at each key will be a vector of the corresponding elements, 
in the order they appeared in coll.
对集合的每个元素调用 f ，按 f 的返回值分组。

(group-by #(rem % 3) (range 10))
;= {0 [0 3 6 9], 1 [1 4 7], 2 [2 5 8]}

(def playlist
    [   {:title "Elephant", :artist "The White Stripes", :year 2003}
        {:title "Helioself", :artist "Papas Fritas", :year 1997}
        {:title "Stories from the City, Stories from the Sea",:artist "PJ Harvey", :year 2000}
        {:title "Buildings and Grounds", :artist "Papas Fritas", :year 2000}
        {:title "Zen Rodeo", :artist "Mardi Gras BB", :year 2002}])

(group-by :artist playlist)
;= {"Papas Fritas" [{:title "Helioself", :artist "Papas Fritas", :year 1997}
;=     {:title "Buildings and Grounds", :artist "Papas Fritas"}]
;= ...}

(into {} 
      (for [ [k v] (group-by key-fn coll)]
           [ k (summarize v)]))


====
2，partition，分区。
function
Usage: (partition n coll)
       (partition n step coll)
       (partition n step pad coll)

Returns a lazy sequence of lists of n items each, at offsets step apart. 
返回一个延迟序列，序列元素为列表，每个列表含n个元素，根据偏移量step来切分，step表示每个列表的第一个元素之间的距离。
If step is not supplied, defaults to n, i.e. the partitions do not overlap. 
如果没有指定步长step，默认等于n，所以每个分区不会重叠。
If a pad collection is supplied, use its elements as necessary to complete last partition upto n items.
In case there are not enough padding elements, return a partition with less than n items.

如果没有指定pad集合，不会包含不足元素个数的分区。
如果指定pad集合，会在末尾添加pad集合中的元素，然后再切一个分区（即最后分区）。
最后分区有可能不足元素个数。

注意对比有无填充集合的区别（指定比不指定总是多一个分区）：
(partition 4 1 (range 5))
;= ((0 1 2 3) (1 2 3 4))

(partition 4 1 [\a \b] (range 5))
;= ((0 1 2 3) (1 2 3 4) (2 3 4 \a))     ;注意没有(3 4 \a \b) 。

(partition 3 1 [\a \b] (range 5))
;=  ((0 1 2) (1 2 3) (2 3 4) (3 4 \a))  ;注意没有(4 \a \b) 。

(partition 4 4 [\a \b] (range 13))
;=  ((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 \a \b))

(partition 1 4 [\a \b] (range 13))
;=  ((0) (4) (8) (12))

====
2.1，partition-all
function
Usage: (partition-all n coll)
       (partition-all n step coll)

Returns a lazy sequence of lists like partition, but may include partitions with fewer than n items at the end.
和partition一样，但包含所有不足元素个数的分区。

(partition-all 4 1 (range 5))
;= ((0 1 2 3) (1 2 3 4) (2 3 4) (3 4) (4))

(partition-all 4 (range 5))
;=  ((0 1 2 3) (4))

====
2.2，partition-by
function
Usage: (partition-by f coll)

Applies f to each value in coll, splitting it each time f returns a new value.  
Returns a lazy seq of partitions.
对每个元素调用f，每当f返回一个新的值时，开始一个新的分区。

(partition-by #(= 0 (mod % 4)) (range 14))
;=  ((0) (1 2 3) (4) (5 6 7) (8) (9 10 11) (12) (13))

====
3.1，split-at
function
Usage: (split-at n coll)

Returns a vector of [(take n coll) (drop n coll)]
在位置n切割。

====
3.2，split-with
function
Usage: (split-with pred coll)

Returns a vector of [(take-while pred coll) (drop-while pred coll)]
在pred首次满足的位置切割。

========
规约（聚合）：

1，reduce，规约。

(reduce
    (fn [m v]    ;; m 是累积值，v 是当前迭代参数
        (assoc m v (* v v)))
    {}  ;初始是个空集合
    [1 2 3 4])
;= {4 16, 3 9, 2 4, 1 1}

(reduce
    #(assoc % %2 (* %2 %2))
    {}
    [1 2 3 4])
;= {4 16, 3 9, 2 4, 1 1}

====
1.1，reductions，规约历史。
(reductions f coll)
(reductions f init coll)

返回一个惰性序列， 序列里包含计算 (reduce f coll) 所产生的所有中间结果。

user=> (reduce + (range 1 10))
45

user=> (reductions + (range 1 10))
(1 3 6 10 15 21 28 36 45)

user=> (reductions + 0 (range 1 10))
(0 1 3 6 10 15 21 28 36 45)

user=> (reductions + 10 (range 1 10))
(10 11 13 16 20 25 31 38 46 55)

====
2，frequencies，频率。
根据集合中元素出现的次数，构成一个数组映射。

user=> (frequencies [1 2 1 1 "a" "b" "a"])  
{1 3, 2 1, "a" 2, "b" 1}  

user=> (type (frequencies [1 2 1 1 "a" "b" "a"]))  
clojure.lang.PersistentArrayMap

====
3，max-key
(max-key f item1)
(max-key f item1 item2)
(max-key f item1 item2 & items)

将函数 f 应用到所有给定元素上，其中 (f item) 值最大的那个 item 被返回。

(f item) 的结果必须是数字值。

user=> (max-key count "abc"
                      "abcd"
                      "a"
                      "abcdefg"
                      "aa")
"abcdefg"

========
筛选：

====
1，filter
Usage: (filter pred coll)

Returns a lazy sequence of the items in coll for which
(pred item) returns true. pred must be free of side-effects.

返回满足谓词的元素的惰性序列。

====
1.1，filterv
和 filter 相同，但是返回向量，而不是惰性序列。后缀v表示向量。

====
1.2，remove

function
Usage: (remove pred coll)

Returns a lazy sequence of the items in coll for which
(pred item) returns false. pred must be free of side-effects.
移除满足条件的元素。

====
2，select-keys
根据指定的key序列，返回包含指定key的map。

user=> (select-keys {:a 1 :b 2} [:a])
{:a 1}

user=> (select-keys {:a 1 :b 2} [:a :c])
{:a 1}

====
3，subseq，
(subseq sc test key)
(subseq sc start-test start-key end-test end-key)

过滤 sc 并返回一个序列，序列里的所有实体(entry)的键 ek 都必须符合条件 
(true? (test (.. sc comparator (compare ek key)) 0)) 。

如果没有任何实体符合条件，则返回 nil 。
参数 sc 必须是一个 sorted collection ，测试条件 test 可以是 < 、 <= 、 > 或者 >= 。

user=> (def numbers (sorted-map 1 "one" 2 "two" 3 "three" 4 "four" 5 "five"))
#'user/numbers

user=> numbers
{1 "one", 2 "two", 3 "three", 4 "four", 5 "five"}


; 过滤所有键小于 3 的键-值对
user=> (subseq numbers >= 3)
([3 "three"] [4 "four"] [5 "five"])


; 过滤所有键小于 1 大于 4 的键-值对
user=> (subseq numbers >= 2 <= 4)
([2 "two"] [3 "three"] [4 "four"])


; 过滤所有键小于 10 的键-值对，返回 nil
user=> (subseq numbers >= 10)
nil

user=> (subseq (sorted-map :a 1 :c 2 :b 4) < :b)  
([:a 1])

user=> (subseq (sorted-map :a 1 :c 2 :b 4) >= :b)  
([:b 4] [:c 2])

====
4，clojure.set/select
(select pred xset)

返回 xset 中所有使 pred 为真的元素。
select 和 clojure.core/filter 类似，只是 select 的输入和输出都是 set 。

user=> (clojure.set/select even? #{1 2 3 4 5})
#{2 4}

====
4.1，clojure.set/difference，差集

user=> (clojure.set/difference #{1 2 3} #{1 2 4})
#{3}

====
4.2，clojure.set/intersection，交集

user=> (clojure.set/intersection #{1 2 3} #{1 2 4})
#{1 2}

====
5，distinct

(distinct coll)
Returns a lazy sequence of the elements of coll with duplicates removed.
去除重复的元素。

(distinct)
Returns a stateful transducer when no collection is provided.



========
检查集合的元素：

====
1，contains? 
集合是否存在指定的key。
不支持列表。

user=> (contains? {:a 1} :a)  
true  
user=> (contains? {:a nil} :a)  
true  
user=> (contains? {:a 1} :b)  
false  
user=> (contains? [:a :b :c] :b)  
false  
user=> (contains? [:a :b :c] 2)  
true  
user=> (contains? "f" 0)  
true  
user=> (contains? "f" 2)  
false  

user=> (contains? '(1 2 3) 1)  
java.lang.IllegalArgumentException: contains? not supported on type: clojure.lang.PersistentList

user=> (contains? #{"a" "b" "v"} "a")  
true

user=> (contains? #{"a" "b" "c"} "z")  
false  

====
2，distinct? 
是否有重复元素。 

user=> (distinct? 1 2 3)  
true  

user=> (distinct? 1 1 2 3)  
false  

user=> (distinct? "a" "b" "a")  
false  

====
3，empty?
集合是否为空。 

user=> (empty? ())  
true  
user=> (empty? '(1 2 3))  
false  
user=> (empty? [])  
true  
user=> (empty? {})  
true  
user=> (empty? #{})  
true

====
4，every?
是否所有的元素都满足谓词。 

user=> (every? even? '(2 4 6))  
true  

user=> (every? odd? '(1 3 9))  
true  

user=> (every? true? '())  
true  

user=> (every? false? '())  
true  

====
5，not-every?
是否有元素不满足谓词。
not-every?与every作用相反。

user=> (not-every? odd? '(1 2 3))  
true  

user=> (not-every? odd? '(1 3))  
false  

====
6，some： 
Usage: (some pred coll)

Returns the first logical true value of (pred x) for any x in coll,
else nil.  
One common idiom is to use a set as pred, for example,
(some #{:fred} coll)
this will return :fred if :fred is in the sequence, otherwise nil .

返回满足谓词的第1个元素，或者nil 。

user=> (some even? '(1 2 3 4))  
true  

user=> (some even? '(1 3 5 7))  
nil  

user=> (some true? [false false false])  
nil  

user=> (some true? [false true false])  
true  

====
7，not-any?
是否所有元素都不满足谓词。

user=> (not-any? odd? '(2 4 6))  
true  

user=> (not-any? odd? '(1 2 3))  
false  

========
排序：

====
1，sort
function
Usage: (sort coll)
       (sort comp coll)

Returns a sorted sequence of the items in coll. If no comparator is
supplied, uses compare.  comparator must implement
java.util.Comparator.  If coll is a Java array, it will be modified.
To avoid this, sort a copy of the array.

根据 (comp item1 item2) 来排序。
如果传入的是数组，它会被修改。

====
2，sort-by
function
Usage: (sort-by keyfn coll)
       (sort-by keyfn comp coll)

Returns a sorted sequence of the items in coll, where the sort
order is determined by comparing (keyfn item).  If no comparator is
supplied, uses compare.  comparator must implement
java.util.Comparator.  If coll is a Java array, it will be modified.
To avoid this, sort a copy of the array.

根据 (comp (keyfn item1) (keyfn item2)) 来排序。

====
3，sorted-map-by
function
Usage: (sorted-map-by comparator & keyvals)
keyval => key val

Returns a new sorted map with supplied mappings, using the supplied
comparator.  If any keys are equal, they are handled as if by
repeated uses of assoc.

user=> (sorted-map-by > 1 "a", 2 "b", 3 "c")  
{3 "c", 2 "b", 1 "a"}  

user=> (sorted-map-by < 1 "a", 2 "b", 3 "c")  
{1 "a", 2 "b", 3 "c"}  

====
4，sorted-set-by
function
Usage: (sorted-set-by comparator & keys)

Returns a new sorted set with supplied keys, using the supplied
comparator.  Any equal keys are handled as if by repeated uses of
conj.

user=> (sorted-set-by > 3 5 8 2 1)  
#{8 5 3 2 1}  

user=> (sorted-set-by <  3 5 8 2 1)  
#{1 2 3 5 8}

====
5，reverse
(reverse coll)

逆序给定的 coll 。这个操作不是惰性(lazy)的。

====
6，shuffle
(shuffle coll)

返回对 coll 进行乱序排列之后得出的序列。

====
7，rseq，在常数时间内，返回 rev 的逆序序列。
rev 只能是向量或者 sorted-map 。
rev 为空时，返回 nil 。

user=> (rseq [])
nil

user=> (rseq [3 5 9 1 3])
(3 1 9 5 3)

user=> (rseq (sorted-map :a 1 :c 2 :b 4))  
([:c 2] [:b 4] [:a 1])

====
7.1，rsubseq，
(rsubseq sc test key)
(rsubseq sc start-test start-key end-test end-key)
用法和 `subseq`_ 一样，但是返回的序列是逆序排序的。

user=> (rsubseq (sorted-map :a 1 :c 2 :b 4) >= :b)
([:c 2] [:b 4])


========
强迫求值：

1，doall
(doall coll)
(doall n coll)

对于那些带副作用的函数所生成的惰性序列来说，
只有当列表的某个元素被求值时，该元素的副作用才会被显现出来。
doall 使用 next 函数遍历整个序列，从而迫使惰性序列的副作用产生。
这个函数返回序列的首个元素作为结果，因此它需要在内存中保存整个序列。

====
2，dorun
(dorun coll)
(dorun n coll)

对于那些带副作用的函数所生成的惰性序列来说，
只有当列表的某个元素被求值时，该元素的副作用才会被显现出来。
dorun 使用 next 函数遍历整个序列，从而迫使惰性列表的副作用产生。
这个函数返回 nil ，而不是序列的首个元素。

