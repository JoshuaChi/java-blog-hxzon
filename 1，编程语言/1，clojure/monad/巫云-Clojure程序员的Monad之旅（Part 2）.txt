巫云-Clojure程序员的Monad之旅（Part 2）

http://www.cnblogs.com/darkluck99/archive/2012/03/17/2403082.html
翻译自 A Monad Tutorial For Clojure Programmers (Part 2)
http://onclojure.com/2009/03/06/a-monad-tutorial-for-clojure-programmers-part-2/

=======
在Part1中，我们已经学习了最基础的2个monad：identity monad和maybe monad。
在本节中，我们继续介绍sequence monad，并联系m-result函数进行讲解。
最后，我会演示2个有用的monad泛操作符。

sequence monad（Haskell中与之对应的是list monad）是使用频率最高的monad之一。
Clojure中也内建了这个monad，比如for。

让我们看下面的例子：

(for [a (range 5)
      b (range a)]
   (* a b))

for和let在语法上很像，它们有相同的结构：
一个由绑定表达式组成的list，每个绑定表达式可以使用前面表达式的符号；
一个结果表达式，此表达式通常需使用前面的绑定。
不同的是：let给每个符号绑定一个单值，for绑定的是一个序列。
for必须绑定序列，返回结果也是序列。
for可以配合条件表达式:when和:while使用。
从monad的复合运算的观点来看，
sequence的运算结果可以看作非单一性的，比如，运算结果不只一个的情况。

使用monad库，上面的循环可以写成：

(domonad sequence-m
   [a (range 5)
    b (range a)]
   (* a b))
 
我们已经知道，domonad宏展开为一个m-bind的操作链，并在结尾调用m-result函数。
下面我们要讲解如何定义m-bind和m-result，来获得循环效果。

前面我们看到，m-bind调用一个代表“剩余计算步骤”的函数，参数是绑定值。
为了达到循环效果，我们要重复调用这个函数。
第一步我们构造一个这样的函数：


(defn m-bind-first-try [sequence function]
   (map function sequence))

(m-bind-first-try (range 5)
  (fn [a]
    (m-bind-first-try (range a)
        (fn [b] (* a b)))))

结果为：(() (0) (0 2) (0 3 6) (0 4 8 12))， 而for表达式的到的结果是 (0 0 2 0 3 6 0 4 8 12)。
我们想要一个无嵌套的sequence，因为嵌套的层数跟调用m-bind的次数是相同的。
既然m-bind引入一次嵌套，我们就要想办法去掉这次嵌套。
这似乎可以用concat解决，那么我们再来试一下：

(defn m-bind-second-try [sequence function]
   (apply concat (map function sequence)))
  
(m-bind-second-try (range 5)
  (fn [a]
    (m-bind-second-try (range a)
        (fn [b] (* a b)))))

这次更糟，我们得到了一个异常。
java.lang.IllegalArgumentException: Don't know how to create ISeq from: Integer

我们来思考一下! 
每次m-bind引入一层嵌套，同时消除一次嵌套。
调用函数的嵌套层数决定了结果的嵌套层数。
我们最终结果的嵌套层数跟（* a b）相同，即没有嵌套。
那么如果我们想在结果中实现1层嵌套，跟调用多少次m-bind无关，正确的办法是在最后一次计算引入嵌套：

(m-bind-second-try (range 5)
  (fn [a]
    (m-bind-second-try (range a)
        (fn [b] (list (* a b))))))

一切正常。
我们的(fn [b]...)始终返回一个单元素的list。
内层的m-bind创建一个单元素的sequence，每个元素是b的一个值，由这些值组成一个无嵌套的list。
外层的m-bind，创建的是a的值组成的list。
每个m-bind的结果同样是一个无嵌套的list。
这很好的表现了m-result在monad中的作用。

Sequence monad的最终定义如下：

(defn m-bind [sequence function]
   (apply concat (map function sequence)))
 
(defn m-result [value]
   (list value))
 
m-result的作用是，当出现在monad绑定的右侧时返回一个值，把符号绑定到这个值。
在定义monad时，m-bind和m-result必须满足这个条件。

在Clojure代码中表现为：

(= (m-bind (m-result value) function)
   (function value))

还有其它两个monad规则，其中一个是：

(= (m-bind monadic-expression m-result)
   monadic-expression)

monadic-expression代表任何有效的monad表达式，
例如一个sequence monad表达式。
使用domonad宏可以更清楚的理解这个规则。

(= (domonad
     [x monadic-expression]
      x)
   monadic-expression)

最后一个规则是：

(= (m-bind (m-bind monadic-expression
                   function1)
           function2)
   (m-bind monadic-expression
           (fn [x] (m-bind (function1 x)
                           function2))))

使用domonad表示：

(= (domonad
     [y (domonad
          [x monadic-expression]
          (function1 x))]
     (function2 y))
   (domonad
     [x monadic-expression
      y (m-result (function1 x))]
     (function2 y)))

使用monad时不需要记住这些法则，除非你要创建自己的monad。
你需要记住的是(m-result x)代表值为x的monad运算。
我们前面讲过的identity monad和maybe monad，没有特别的monad表达式，此时m-result只是identity函数。

现在放松一下。
关于monad的理论我们下一节再讨论，那时我还会告诉你一些关于for中使用:when的事情。
本节剩余部分主要是编程实践。

====
我们也许要问，既然Clojure已经有个let和for，
为什么还要制造identity monad和sequence monad呢？
答案就是在各种monad中有可共用的泛操作。
使用monad库，你可以写一个函数，把monad作为参数，并在给定的monad中组合多个运算。
我待会用一个抽象示例来演示。
Monad库还包括许多可在任何monad中使用的操作，它们的名字都以“m-”开头。

使用最频繁的monad泛函数是m-lift，
它把一个参数为n个值参数的函数，转换成一个参数为n个monad表达式，
并且返回值也是monad表达式的函数。
这个新函数隐式调用了m-bind和m-result。
举个简单的例子：

(def nil-respecting-addition
   (with-monad maybe-m
     (m-lift 2 +)))

这个函数返回两个参数的和，类似+，区别是它在任何参数为nil的情况下都返回nil。
记住，m-lift必须指定函数需要的参数个数，这个信息是无法从函数中获得的。

我们用domonad写出等效的表达式，以便看清m-lift的工作原理。

(defn nil-respecting-addition
   [x y]
   (domonad maybe-m
     [a x
      b y]
     (+ a b)))

看得出，m-lift对每个参数调用了一次m-result和m-bind。
同样的定义，如果使用sequence monad，将会返回一个函数，
这个函数返回一个求和的sequence，它的值是从两个输入的sequence中计算得来。

====
练习：下面的函数跟Clojure的哪个著名的内建函数等效呢？

(with-monad sequence-m
  (defn mystery
    [f xs]
      ((m-lift 1 f) xs )))

巫云@：从函数结构巫云认为这个好像是map嘛，我们来试一下：
(mystery #(* 2 %) [1 2 3 4 5])

返回结果：(2 4 6 8 10)，果然跟map一样哦。

====
另一个常用的monad泛函数是m-seq，他接受一个monad 表达式组成的sequence，
返回一个结果值的sequence。
根据domonad的规则，（m-seq [a b c]）相当于

(domonad
  [x a
   y b
   z c]
  '(x y z))

使用m-seq的例子，请自己来试一下。

(with-monad sequence-m
    (defn ntuples [n xs]
       (m-seq (replicate n xs))))

巫云@：我们来测试一下。

(ntuples 1 [1 2 3]) 
=> ((1) (2) (3))

(ntuples 2 [1 2 3]) 
=> ((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3))

因为使用了sequence-m，我们可以想象成这是n层的循环。

====
最后介绍m-chain，它接受一个单参数操作组成的list。
然后把这些操作组成一个链，并使每个参数从操作链上流过。
比如：（m-chain [a b c]）等价于

(fn [arg]
   (domonad
     [x (a arg)
      y (b x)
      z (c y)]
     z))

一个常用的例子是层级结构的遍历。
Clojure的parents函数通过使用multimethod，返回一个类的的所有基类和接口。
下面的函数以parents为基础，寻找一个类的第n代祖先。

(with-monad sequence-m
   (defn n-th-generation
     [n cls]
     ((m-chain (replicate n parents)) cls )))
  
(n-th-generation 0 (class []))

(n-th-generation 1 (class []))

(n-th-generation 2 (class []))

巫云@：这个例子相当于把n次parents操作组成了一个操作链。

你可能发现了，有些类在结果中出现了不只一次，因为他们是很多类的基类。
事实上，我们应该使用sets代替sequence来表现结果，这并不难，把sequence-m，替换成set-m即可。

在Part3，我会讲:when条件表达式在循环中的使用，
并且看看他们在monad中是如何实现的，并且还会介绍其它几个monad。

========
========
A monad tutorial for Clojure programmers (part 2)
March 6, 2009
Filed under: Libraries — Konrad Hinsen @ 1:09 pm


In the first part of this tutorial, I have introduced the two most basic monads: the identity monad and the maybe monad. 
In this part, I will continue with the sequence monad, 
which will be the occasion to explain the role of the mysterious m-result function. 
I will also show a couple of useful generic monad operations.

One of the most frequently used monads is the sequence monad (known in the Haskell world as the list monad). 
It is in fact so common that it is built into Clojure as well, in the form of the for form. 
Let’s look at an example:

(for [a (range 5)
      b (range a)]
  (* a b))

A for form resembles a let form not only syntactically. 
It has the same structure: a list of binding expressions, in which each expression can use the bindings from the preceding ones, 
and a final result expressions that typically depends on all the bindings as well. 
The difference between let and for is that let binds a single value to each symbol, whereas for binds several values in sequence. 
The expressions in the binding list must therefore evaluate to sequences, and the result is a sequence as well. 
The for form can also contain conditions in the form of :when and :while clauses, which I will discuss later. 
From the monad point of view of composable computations, 
the sequences are seen as the results of non-deterministic computations, i.e. computations that have more than one result.

Using the monad library, the above loop is written as

(domonad sequence-m
  [a (range 5)
   b (range a)]
  (* a b))

Since we alread know that the domonad macro expands into a chain of m-bind calls ending in an expression that calls m-result, 
all that remains to be explained is how m-bind and m-result are defined to obtain the desired looping effect.

As we have seen before, m-bind calls a function of one argument that represents the rest of the computation, 
with the function argument representing the bound variable. 
To get a loop, we have to call this function repeatedly. 
A first attempt at such an m-bind function would be

(defn m-bind-first-try [sequence function]
  (map function sequence))

Let’s see what this does for our example:

(m-bind-first-try (range 5)  (fn [a]
  (m-bind-first-try (range a)  (fn [b]
    (* a b)))))

This yields (() (0) (0 2) (0 3 6) (0 4 8 12)), whereas the for form given above yields (0 0 2 0 3 6 0 4 8 12). 
Something is not yet quite right. 
We want a single flat result sequence, but what we get is a nested sequence whose nesting level equals the number of m-bind calls. 
Since m-bind introduces one level of nesting, it must also remove one. 
That sounds like a job for concat. 
So let’s try again:

(defn m-bind-second-try [sequence function]
  (apply concat (map function sequence)))

(m-bind-second-try (range 5)  (fn [a]
  (m-bind-second-try (range a)  (fn [b]
    (* a b)))))

This is worse: we get an exception. Clojure tells us:

java.lang.IllegalArgumentException: Don't know how to create ISeq from: Integer

Back to thinking!

Our current m-bind introduces a level of sequence nesting and also takes one away. 
Its result therefore has as many levels of nesting as the return value of the function that is called. 
The final result of our expression has as many nesting values as (* a b) – which means none at all. 
If we want one level of nesting in the result, no matter how many calls to m-bind we have, 
the only solution is to introduce one level of nesting at the end. 
Let’s try a quick fix:

(m-bind-second-try (range 5)  (fn [a]
    (m-bind-second-try (range a)  (fn [b]
        (list (* a b))))))

This works! 
Our (fn [b] ...) always returns a one-element list. 
The inner m-bind thus creates a sequence of one-element lists, one for each value of b, and concatenates them to make a flat list. 
The outermost m-bind then creates such a list for each value of a and concatenates them to make another flat list. 
The result of each m-bind thus is a flat list, as it should be. 
And that illustrates nicely why we need m-result to make a monad work. 
The final definition of the sequence monad is thus given by

(defn m-bind [sequence function]
  (apply concat (map function sequence)))

(defn m-result [value]
  (list value))

The role of m-result is to turn a bare value into the expression that, 
when appearing on the right-hand side in a monadic binding, binds the symbol to that value. 
This is one of the conditions that a pair of m-bind and m-result functions must fulfill in order to define a monad. 
Expressed as Clojure code, this condition reads

(= (m-bind (m-result value) function)
   (function value))

There are two more conditions that complete the three monad laws. 
One of them is

(= (m-bind monadic-expression m-result)
   monadic-expression)

with monadic-expression standing for any expression valid in the monad under consideration, 
e.g. a sequence expression for the sequence monad. 
This condition becomes clearer when expressed using the domonad macro:

(= (domonad
     [x monadic-expression]
      x)
   monadic-expression)

The final monad law postulates associativity:

(= (m-bind (m-bind monadic-expression
                   function1)
           function2)
   (m-bind monadic-expression
           (fn [x] (m-bind (function1 x)
                           function2))))

Again this becomes a bit clearer using domonad syntax:

(= (domonad
     [y (domonad
          [x monadic-expression]
          (function1 x))]
     (function2 y))
   (domonad
     [x monadic-expression
      y (m-result (function1 x))]
     (function2 y)))

It is not necessary to remember the monad laws for using monads, they are of importance only when you start to define your own monads. 
What you should remember about m-result is that (m-result x) represents the monadic computation whose result is x. 
For the sequence monad, this means a sequence with the single element x. 
For the identity monad and the maybe monad, which I have presented in the first part of the tutorial, 
there is no particular structure to monadic expressions, and therefore m-result is just the identity function.

Now it’s time to relax: the most difficult material has been covered. 
I will return to monad theory in the next part, where I will tell you more about the :when clauses in for loops. 
The rest of this part will be of a more pragmatic nature.

You may have wondered what the point of the identity and sequence monads is, 
given that Clojure already contains fully equivalent forms. 
The answer is that there are generic operations on computations that have an interpretation in any monad. 
Using the monad library, you can write functions that take a monad as an argument and compose computations in the given monad. 
I will come back to this later with a concrete example. 
The monad library also contains some useful predefined operations for use with any monad, which I will explain now. 
They all have names starting with the prefix m-.

====
Perhaps the most frequently used generic monad function is m-lift. 
It converts a function of n standard value arguments into a function of n monadic expressions that returns a monadic expression. 
The new function contains implicit m-bind and m-result calls. 
As a simple example, take

(def nil-respecting-addition
  (with-monad maybe-m
    (m-lift 2 +)))

This is a function that returns the sum of two arguments, just like + does, 
except that it automatically returns nil when either of its arguments is nil. 
Note that m-lift needs to know the number of arguments that the function has, 
as there is no way to obtain this information by inspecting the function itself.

To illustrate how m-lift works, I will show you an equivalent definition in terms of domonad:

(defn nil-respecting-addition
  [x y]
  (domonad maybe-m
    [a x
     b y]
    (+ a b)))

This shows that m-lift implies one call to m-result and one m-bind call per argument. 
The same definition using the sequence monad would yield a function 
that returns a sequence of all possible sums of pairs from the two input sequences.

Exercice: The following function is equivalent to a well-known built-in Clojure function. Which one?

(with-monad sequence-m
  (defn mystery
    [f xs]
    ( (m-lift 1 f) xs )))

====
Another popular monad operation is m-seq. 
It takes a sequence of monadic expressions, and returns a sequence of their result values. 
In terms of domonad, the expression (m-seq [a b c]) becomes

(domonad
  [x a
   y b
   z c]
  '(x y z))

Here is an example of how you might want to use it:

(with-monad sequence-m
   (defn ntuples [n xs]
      (m-seq (replicate n xs))))

Try it out for yourself!

====
The final monad operation I want to mention is m-chain. 
It takes a list of one-argument computations, and chains them together by calling each element of this list with the result of the preceding one. 
For example, (m-chain [a b c]) is equivalent to

(fn [arg]
  (domonad
    [x (a arg)
     y (b x)
     z (c y)]
    z))

A usage example is the traversal of hierarchies. 
The Clojure function parents yields the parents of a given class or type in the hierarchy used for multimethod dispatch. 
When given a Java class, it returns its base classes. 
The following function builds on parents to find the n-th generation ascendants of a class:

(with-monad sequence-m
  (defn n-th-generation
    [n cls]
    ( (m-chain (replicate n parents)) cls )))

(n-th-generation 0 (class []))
(n-th-generation 1 (class []))
(n-th-generation 2 (class []))

You may notice that some classes can occur more than once in the result, 
because they are the base class of more than one class in the generation below. 
In fact, we ought to use sets instead of sequences for representing the ascendants at each generation. 
Well… that’s easy. 
Just replace sequence-m by set-m and run it again!

In part 3, I will come back to the :when clause in for loops, and show how it is implemented and generalized in terms of monads. 
I will also explain another monad or two. Stay tuned!

