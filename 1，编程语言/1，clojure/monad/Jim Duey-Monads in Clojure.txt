Jim Duey-Monads in Clojure
Copyright 2009 by Jim Duey
http://www.intensivesystems.net/tutorials/monads_101.html

http://code.google.com/p/clojure-contrib
http://www.intensivesystems.net/tutorials/code/monads_101.clj
http://www.cs.nott.ac.uk/~gmh/pearl.pdf    "Monadic Parsing in Haskell"

注释by hxzon
====
Preface

Note: Part 2 is here .

Clojure is an up-and-coming language that runs on the JVM. 
It has a strong functional programming foundation embedded in a LISP dialect. 
Very cool stuff.

One of the most powerful ideas in functional programming is that of monads. 
However, virtually all monad tutorials on the web, and there are a lot of them, use Haskell as their implementation language. 
And many come at monads from a category theory perspective. 
This combination can make monads seem like deep magic known only to the highest levels of the FP hierarchy. 
In this tutorial, I hope to dispel some of that mystique and show how to understand and use monads in Clojure.

Konrad Hinsen wrote a very good implementation of monads in Clojure and I'll not cover that ground again. 
It is included in the clojure.contrib package, so get that installed if you want to use any of the code I present below. 
Otherwise, all code will be standard Clojure. 
The sample code for this tutorial is here .
http://www.intensivesystems.net/tutorials/code/monads_101.clj

Konrad also wrote a tutorial for monads using Clojure here .
http://onclojure.com/2009/03/05/a-monad-tutorial-for-clojure-programmers-part-1/

====
First Looks

A monad is nothing more than a way to compose functions. 
If you consider composing functions with 'comp',
monad只是用来组合函数。

; f1, f2 and f3 are functions that each take one
; argument and return a result
(comp f1 f2 f3)

which returns a function where the output of f3 is fed to f2 
and the output of that is fed to f1 producing the final answer. 
An equivalent function could be defined as:

(fn [x]
   (f1
     (f2
       (f3 x))))

But what if the output of f3 isn't exactly what f2 needs as a parameter? 
Some plumbing code needs to be executed to hook them together. 
Suppose f1, f2 and f3 all accept an int and return a list of ints. 
To compose these three functions, you would do something like,
但是，如果f3的输出，不是f2所需的输入呢？
假设这三个函数，输入都是int，而输出都是int列表。

(fn [x]
   (mapcat f1
           (mapcat f2
                  (f3 x))))

（hxzon：

(mapcat f & colls) 即 (concat (map f colls)) 。
concat，拼接多个列表。

）

So f3 is called with the value of x and produces a list of ints. 
Then the inner mapcat applies f2 to each int in that list. 
Each call to f2 produces a list of ints, all of which mapcat combines to produce a single list of ints. 
Then the outer mapcat applies f1 to each of those ints 
and concatenates those lists to produce the final list of ints to return from the function. 

The idea behind a monad is to factor out the plumbing code so that its complexity is hidden, 
leaving only the composition of the functions visible.

（plumbing，n.水管装置；水暖工的工作；管道工程
v.用铅锤测量（plumb的现在分词）；探究）

monad背后的思想，是抽出这些“管道”代码，隐藏它们，只留下被组合的函数。

====
Monad Mechanics

（mechanics，n.力学；机械学；构成法；技术）

So how to abstract the plumbing? 
First, we have to nail down some terms. 
In a statically typed language like Haskell, a function would have a signature 
telling what the types of each parameter were and what the type of the return value was. 
This signature could be defined as a type itself, so that functions that have that signature would all be of the same type. 
Haskell的函数，有函数签名，表明自己的输入参数类型，和输出类型。

Clojure is dynamically typed, so functions don't really have a signature. 
But we can say that a group of functions expect certain kinds of arguments and return certain kinds of results, 
like we said above about f1, f2 and f3 accepting an int and returning a list of ints. 
A group of functions that are intended to be composed using a monad 
must all have the same signature and these are called "monadic functions". 
用同一个monad组合在一起的函数，必须拥有相同的签名。
这些函数称为“monadic函数”。
Also, the values they return are referred to as "monadic values" 
and can be thought of as containing, or wrapping, the basic values. 
这些函数的返回值，称为“monadic值”，可以理解为“原先的值”的容器。

In the above example, the monadic values are all lists of ints and the basic values are the ints. 
A monadic function takes basic values as parameters, not monadic values. 
If they took monadic values as parameters, they could be composed simply using 'comp'.

It is easy to see that a monadic function can be called with no complications.

(f2 4)

But how is a monadic function called with a monadic value? 
Another function is needed that takes a monadic value and a monadic function as parameters and "does the right thing". 
In our example above, mapcat does this. 
However, by convention and to make things easier to read, 
the monadic value should appear before the monadic function in the function call. 
为了让代码更容易阅读，我们将monadic值写在monadic函数前面。
So, with a monadic value of [1 5 7], instead of:

(mapcat f2 [1 5 7])

we write:

(m-bind [1 5 7] f2)

Two things to notice. 

First, we used a vector literal with brackets instead of a list literal with parenthesis. 
This is more idiomatic Clojure and is easier to write since parenthetical lists are also function calls. 

Second, what's that 'm-bind' thing?

m-bind is the standard name of a function that applies a monadic function to a monadic value. 
All monads are required to have a function named m-bind. 
m-bind是一个标准的函数名字，这个函数用来将monadic值应用于monadic函数。
每个monad必须有一个m-bind函数。

In this case, m-bind is defined as:

(defn m-bind [mv mf]
      (mapcat mf mv))

Another question comes up if we want to apply a monadic function to a regular value. 
If we could easily convert a regular value to a monadic value, 
we could then use m-bind to do the application. 
Every monad must have such a function defined, named 'm-result'. 
So for the example we're working with:
另一个问题是，如何将普通值（非monadic值）应用于monadic函数？
我们用一个函数，将普通值转成monadic值，这个函数称为 m-result 。

(m-result 6)

would return a value of [6]. 
And m-result would be defined as:

(defn m-result [x]
      [x])

So the first step towards understanding monads is to realize that a monad is a combination of; 
a signature that monadic functions must adhere to, 
a function, named 'm-result', to convert a regular value to a monadic value 
and a function, named 'm-bind', to apply a monadic function to a monadic value. 
A monad may then be used to easily compose monadic functions to create new monadic functions.
所以，一个monad由三部分组成：
一个函数签名，表明monadic可用于哪类函数。
一个名为m-result的函数，用来将普通值转成monadic值。
一个名为m-bind的函数，将monadic值应用于monadic函数。

====
Composing

So how would we produce a function by composing f1, f2 and f3 using a monad? 
Here's how:

(defn m-comp [f1 f2 f3]
      (fn [x]
          (m-bind
              (m-bind
                  (m-bind
                      (m-result x)      ;hxzon：因为 (m-bind xs f3)，所以需要先 (m-result x)
                      f3)
                   f2)
               f1)))

And at first glance, that is terribly ugly. 
However, notice that this function is independent of which monad is being used. 
注意，这个函数不依赖于哪个monad 。
So we could use it with any monad to compose monadic functions with that monad's signature, 
just like comp is used to compose regular functions.

(m-comp f1 f2 f3)

But it's still ugly.

====
Do Notation
“do”标记法：domonad（hxzon：重要）

A better way to compose monadic functions is to use the 'do' notation.

The monad that we defined in an ad hoc way previously 
is included in the clojure.contrib.monads namespace and is called 'sequence-m'. 
前面我们展示的monad，其实已经内建于 clojure.contrib.monads 中。
Monadic values for sequence-m are sequences of values 
and monadic functions take a basic value and return a sequence of values. 
Notice that the monadic values are not limited sequences of ints, they can be sequences of any kind of value.

Here's how to compose the three functions using the do-notation

(defn m-comp [f1 f2 f3]
      (fn [x]
          (domonad sequence-m
                   [a (f3 x)
                    b (f2 a)
                    c (f1 b)]
                   c)))

which is much less ugly than the previous attempt. 
A 'domonad' statement has 3 parts. 
First is the name of the monad to be used. 
Second is a vector, surrounded by brackets, of pairs of variables/expressions. 
And finally, an expression to generate the return value.

domonad表达式分三部分，
第一部分指明用哪个monad，
第二部分是一个向量，是一系列的“变量和表达式”对。
第三部分是一个表达式，用来生成返回值，这个值是monadic值。

Here's where it appears to get tricky. 
In the variable/expression pairs, the expressions produce monadic values when they are evaluated. 
So '(f3 x)' will produce a monadic value depending on what 'x' is. 
However, the monadic value does not get assigned to 'a'. 
Rather, 'a' can be used in the following expressions 
to access the basic values contained inside the monadic value returned from '(f3 x)'.

在“变量和表达式”对中，表达式求值得到monadic值。
但是，该monadic值没有绑定到 a，
a 被绑定到“普通值”。

So in the above example, '(f3 x)' generates a monadic value from x, specifically a list of values. 
Then f2 is applied to each of those values in turn 
with all those results being combined into another list of values whose elements are accessed by 'b'. 
And then the process is repeated with f1 and the results accessed using 'c'.

The last element in a domonad statement is the return value expression. 
This expression can make use of any variables defined previously in the domonad statement 
and is used to generate a monadic value that is returned from the domonad statement. 

There's an important thing to see here. 
The result of a domonad statement is a monadic value, 
which makes the function returned by m-comp a monadic function. 
And that function can be further composed with other monadic functions to build yet more monadic functions. 
This is the first hint at the power contained in monads. 
We'll see that developed further a little later on.

domonad表达式返回一个monadic值，所以 m-comp 是一个 monadic 函数。
它可以和其它monadic函数继续组合，产生更多 monadic 函数。

====
Comprehension
列表推导式

（comprehension，n.理解，理解力；包含的能力；[逻辑学]内涵）

An important thing to see in the previous section 
is that the expressions being assigned to variables generate monadic values. 
So what if those expressions where literal monadic values?

The statement

(domonad sequence-m
         [letters ['a 'b 'c]
          numbers [1 2 3]]
         [letters numbers])

produces the output

([a 1] [a 2] [a 3] [b 1] [b 2] [b 3] [c 1] [c 2] [c 3])

No monadic functions are used, but each element of the 'letters' vector gets paired with each element of the 'numbers' vector. 
Now, take a look at another Clojure statement, the list comprehension:

(for
   [letters ['a 'b 'c]
    numbers [1 2 3]]
   [letters numbers])

which produces the output

([a 1] [a 2] [a 3] [b 1] [b 2] [b 3] [c 1] [c 2] [c 3])

This shows another aspect of monads, namely that list comprehension 
is a special case of a domonad statement 
when the sequence-m monad is used. 
Or to put it another way, a domonad statement is a general case of a list comprehension 
and can also be referred as a monad comprehension. 
That will have some interesting implications later.

“列表推导式”只是sequence-m的一个应用特例。

====
But why?
为什么使用monad？

All of this might be fascinating, but why go to the trouble of using a monad to structure code? 
One of the foundational concepts in computer science is to break a problem down into smaller problems, 
solve the smaller problems and then combine those solutions to solve the bigger problem. 

Using monads, you can keep breaking problems down into smaller and smaller pieces 
until the individual pieces can be solved with monadic functions. 
Then you can combine those monadic functions using monadic combinators, 
of which the domonad statement is one, to solve the bigger problem. 
But you've not just solved your bigger problem, 
you've also created a bunch of smaller pieces that can be combined in other ways to solve similar problems 
without having to write new code. 
Sort of like Lego blocks can be used to build bigger and bigger structures. 
The power of your collection of monadic functions does not grow linearly as you add each new function. 
It grows at some exponential value because each new monadic function can be combined with all the other monadic functions. 
We'll see a concrete example of this in a short while.
将大问题不断分解成小问题，直到小问题很容易解决。
在组合小问题的解答，从而解决大问题。
但好处不只是解决这个大问题，通过小问题答案的其它组合，还能解决其它相似的大问题。

（hxzon：2014.11.17，已理解）

========
More Power

The sequence-m monad is a good example to use as an introduction to monads. 
It is easy to see how a sequence can contain values of other types. 
There are some other simple monads 
that pack a lot of power in deceptively simple trappings and we'll come back to those later. 
Right now, though, we're going to take a look at one of the high octane monads. 
Buckle up.

（high-octane，adj.强烈的；极新颖的；高辛烷值的；高能量的）

One of the most powerful concepts in functional programming is that functions are first class values. 
That is, you can do things with functions just like you can do things with integers. 
You can assign functions to variables, pass them as parameters to other functions and return them from functions. 
You can also use them as monadic values.
函数是一等公民，所以函数也可以作为monadic值。

Huh?

Functions can themselves be monadic values, which is distinct from them being monadic functions. 
That is, a monad can be defined where monadic functions return functions as monadic values. 
To really grasp this concept, a clear distinction must be maintained 
between functions that are monadic values and functions that are monadic functions.

====
（具体例子：状态monad）

Let's look at a concrete example, the state-m monad. 
The monadic values of the state-m monad are functions that take a value, the state, as a parameter 
and produce a list that contains a return value and a new state value. 
状态monad的monadic值是一个函数，
这个函数的输入是一个状态值，
这个函数的输出是一个列表，列表包含返回值，和一个新的状态值。
The state value can be any kind; a struct map, a string, an integer, etc. 

The monadic functions of the state-m monad are functions that take a value and return a monadic value. 
(A function that takes a state value and generates a return value and a new state value).
状态monad的monadic函数，输入一个值，输出一个monadic值。

This is a function that is a monadic value under the state-m monad.
作为monadic值的函数：

(defn some-fn [state]
     ; do something
     ; and something else
     [return-value new-state])

Notice that the function itself is the monadic value, not the state value.

So let's define some functions like this where the state is an integer and each function simply increments it, 
in addition to returning a constant value.
这个例子中，我们用一个数字表示状态，每个函数都递增这个数字。
定义以下三个作为monadic值的函数：

(defn g1 [state-int]
      [:g1 (inc state-int)])

(defn g2 [state-int]
      [:g2 (inc state-int)])

(defn g3 [state-int]
      [:g3 (inc state-int)])

Now, without defining any monadic functions for this monad, 
let's compose them using a domonad statement and assign the result of the domonad statement to a name. 
Remember that g1, g2 and g3 are monadic values and so are used directly in the domonad expressions 
instead of being called to produce return values.

(def gs (domonad state-m
                 [a g1
                  b g2
                  c g3]
                 [a b c]))

So what is the value of 'gs'? 
Well, we know that domonad returns a monadic value and that for the state-m monad, 
monadic values are functions that accept a state value. 
So 'gs' must be a function that takes one parameter which is a state.

But what does it return? 
Monadic values of the state-m monad produce a list with a return value and a new state, 
so that's what 'gs' has to return. 
Its return value is determined by the expression '[a b c]' where the variables are assigned the return values of g1, g2 and g3, respectively. 
And what is the value of new state returned by 'gs'? 
It may not be obvious, but it's the state value produced by g3.

So,

(gs 5)

produces

([:g1 :g2 :g3] 8)

==
Another interesting thing about the state-m monad is the existence of special functions. 
For instance, a function like:
另一个有趣的地方，是在特殊形式里使用 state-m 。

(defn fetch-state []
      (fn [state]
          [state state]))

returns a function that can be used to get the value of the state at any point in the domonad statement.

(def gs1
     (domonad state-m
              [a g1
               x (fetch-state)          ;hxzon：在中途获取状态值
               b g2]
              [a x b]))

(gs1 3)

produces

([:g1 4 :g2] 5)

The variable 'x' is a snapshot of the state at that point in the execution of the domonad statement.

The complement of fetch-state is naturally set-state.

(defn set-state [new-state]
      (fn [old-state]
          [old-state new-state]))

So, a domonad statement like:

(def gs2
     (domonad state-m
              [a g1
               x (set-state 50)        ;hxzon：在中途修改状态值
               b g2]
              [a x b]))

(gs2 3)

produces

([:g1 4 :g2] 51)

Notice that fetch-state and set-state are not monadic values. 
Rather, they are functions that return monadic values for the state-m monad, 
which are functions that accept a state and return a return value and a new state. 

注意，fetch-state 和 set-state 都不是monadic值。

However, set-state is a monadic function because it accepts a parameter, which is the new state value, 
and returns a function that sets the state to that value when called.

但是，set-state 是 monadic函数。

In reality, fetch-state and set-state are defined differently, 
but the above is a convenient way of thinking about them.

Looking at the internals of the state-m monad, we see it defined like this

(defn m-result [v]
      (fn [s]
          (list v s)))

(defn m-bind [mv f]
      (fn [s]
          (let [[v ss] (mv s)]
               ((f v) ss))))

The m-result function takes a value and returns a function that takes a state and wraps the value and the state in a list. 
Nothing too tricky as long as you remember that it returns a function which is the monadic value.

The m-bind function is a little more complicated. 
First, notice that it takes two arguments, as normal. 
The first argument is a monadic value, which is a function. 
The second argument is a monadic function. 
Now here's the tricky part. 
The parameter the monadic function operates on is not a monadic value. 
Rather, it's the value that is returned by the monadic value when that function is applied to the state.

So m-bind returns a function, that is a monadic value, which accepts a state value. 
The monadic value, which is m-bind's first argument, 
is applied to that state value, yielding a new value and a new state. 
(The 'let' statement uses destructuring bind to break that returned list into its component parts.) 
Then the monadic function is applied to the new value to produce yet another function, which is a monadic value. 
This last function is then applied to the updated state to produce the final value and state.

That all gets very confusing. 
Trying some examples at the REPL will go a long ways toward enlightenment. 
Remember that, for the state-m monad, 
monadic values are functions that accept a state value and return a list with a value and a new state. 
Monadic functions accept a value and return a monadic value (which is a function ...).

Taking a step back for a moment, realize that the state value can be anything. 
It could be a struct map with values associated with keywords. 
Then functions that are monadic values could update those values 
and have the power of global mutable state yet keep the safety of side-effect-free programming. 

Another interesting option is that the state can be a string which can be consumed by the functions. 
Or an integer that is incremented or decremented.

Also, the state-m monad can be used at multiple levels of abstraction in a single app. 
For instance, think of an old school Pac-Man game. 
On one level, the state can be the current maze 
and the monadic values can be functions that update the position of the characters, 
check for collisions, generate video frames or play sounds. 
Those functions can be composed using m-bind so that the state of that level is threaded through them, 
resulting in a single function that takes a current maze state and produces the next maze state.

This function could be used by a higher level where the state value is a list of starting maze states, 
one for each level in the game. 
A monadic value at this level would be a function that allows the player to play a single maze. 
As each maze is cleared, that function is called again with a list of remaining mazes to play.

（hxzon：2014.11.17）

