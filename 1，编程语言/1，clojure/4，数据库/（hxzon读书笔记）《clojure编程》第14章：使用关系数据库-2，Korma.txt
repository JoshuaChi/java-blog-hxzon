（hxzon读书笔记）《clojure编程》第14章：使用关系数据库-2，Korma

by hxzon
========
1，Korma，使用关系数据库的一门领域专用语言。

http://sqlkorma.com

添加依赖：[korma "0.3.0"

(require '[clojure.java.jdbc :as jdbc])

(def db-spec {:classname "org.sqlite.JDBC"
              :subprotocol "sqlite"
              :subname "test.db"})

;; 先使用 clojure.jdbc 创建数据库并插入数据
(defn setup
  []
  (jdbc/with-connection db-spec
    (jdbc/create-table :country
      [:id "integer primary key"]
      [:country "varchar"])
    (jdbc/create-table :author
      [:id "integer primary key"]
      [:country_id "integer constraint fk_country_id 
references country (id)"]
      [:first_name "varchar"]
      [:last_name "varchar"])
    (jdbc/insert-records :country
      {:id 1 :country "USA"}
      {:id 2 :country "Canada"}
      {:id 3 :country "France"})
    (jdbc/insert-records :author
      {:first_name "Chas" :last_name "Emerick" :country_id 1}
      {:first_name "Christophe" :last_name "Grand" :country_id 3}
      {:first_name "Brian" :last_name "Carper" :country_id 2}
      {:first_name "Mark" :last_name "Twain" :country_id 1})))

(setup)
;= ({:id 1, :country_id 1, :first_name "Chas", :last_name "Emerick"}
;= {:id 2, :country_id 3, :first_name "Christophe", :last_name "Grand"}
;= {:id 3, :country_id 2, :first_name "Brian", :last_name "Carper"}
;= {:id 4, :country_id 1, :first_name "Mark", :last_name "Twain"})

========
2，

(use '[korma db core])

defdb定义一个Korma能用的连接。
最近被求值的defdb形式被设为“默认”连接。

(defdb korma-db db-spec)

可以使用Korma的get-connection函数来获得它所设立的连接池里的一个 连接。
(get-connection korma-db)

====
2.1，定义实体，即告诉Korma数据库表的各种属性的规则说明，包括表之间的关系。

(declare author)

(defentity country
  (pk :id)
  (has-many author))

(defentity author
  (pk :id)
  (table :author)
  (belongs-to country))

====
2.2，查询

(select author
  (with country)
  (where {:first_name "Chas"}))
;= [{:id 1, :country_id 1, :first_name "Chas",:last_name "Emerick", :id_2 1, :country "USA"}]
;; hxzon：平铺，最后两个键值对是 country 的字段。

这里with表示包含一个关系，所以结果包含country键值对。

(select author
  (with country)
  (where (like :first_name "Ch%"))
  (order :last_name :asc)
  (limit 1)
  (offset 1))
;= [{:id 2, :country_id 3, :first_name "Christophe",:last_name "Grand", :id_2 3, :country "France"}]

(select author
  (fields :first_name :last_name)
  (where (or (like :last_name "C%")
           (= :first_name "Mark"))))
;= [{:first_name "Brian", :last_name "Carper"}
;= {:first_name "Mark", :last_name "Twain"}]

可以用sql-only函数查看Korma所生成的原始sql语句。

(println (sql-only (select author
                     (with country)
                     (where (like :first_name "Ch%"))
                     (order :last_name :asc)
                     (limit 1)
                     (offset 1))))
;= ; SELECT "author".* FROM "author" LEFT JOIN "country"
;= ; ON "country"."id" = "author"."country_id"
;= ; WHERE "author"."first_name" LIKE ?
;= ; ORDER BY "author"."last_name" ASC LIMIT 1 OFFSET 1

========
3，增量的构建查询（hxzon重要）

为何不厌其烦的使用dsl？
因为sql是字符串，没有结构。
Korma把查询表示为简单的clojure映射，你可以对映射做操作，可以增量的构建查询。


(def query (-> (select* author)
             (fields :last_name :first_name)
             (limit 5)))
;= #'user/query

查看query映射：

{:group [],

 :from        ;; hxzon：即 :from author
 [{:table "author",
   :name "author",
   :pk :id,
   :db nil,
   :transforms (),
   :prepares (),
   :fields [],
   :rel        ;; hxzon：与本实体有关联的其它实体
   {"country"
    #<Delay@54f690e4:
    {:table "country",
     :alias nil,
     :rel-type :belongs-to,        ;; hxzon：author 与 country 的关联关系，多对一
     :pk {:korma.sql.utils/generated "\"country\".\"id\""},
     :fk
     {:korma.sql.utils/generated "\"author\".\"country_id\""}}>}}],

 :joins [],
 :where [],

 :ent        ;; hxzon：即 :ent author
 {:table "author",
  :name "author",
  :pk :id,
  :db nil,
  :transforms (),
  :prepares (),
  :fields [],
  :rel
  {"country"
   #<Delay@54f690e4:
   {:table "country",
    :alias nil,
    :rel-type :belongs-to,
    :pk {:korma.sql.utils/generated "\"country\".\"id\""},
    :fk {:korma.sql.utils/generated "\"author\".\"country_id\""}}>}},

 :limit 5,
 :type :select,        ;; hxzon：语句类型
 :alias nil,
 :options nil,
 :fields (:last_name :first_name),        ;; hxzon：要查询的字段
 :results :results,
 :table "author",
 :order [],
 :modifiers [],
 :db nil,
 :aliases #{}}

==
ruby on rails的ActiveRecord最新版本，也已经转而使用一个相似的方法，
对查询对象用方法调用来形成sql查询。

employees = Person.where(:type => "employee")
# ... later ...
managers = employees.where(:role => "manager").order(:last_name)
managers.all.each do |e|
...
end

上面例子中，employees，managers都是查询对象。

==
(def employees (where (select* employees) {:type "employee"}))
;; hxzon：即 (-> (select* employees) (where {:type "employee"}))

;; ... later ...
(let [managers (-> employees
                 (where {:role "manager"})
                 (order :last_name))]
  (doseq [e (exec managers)]
    ; ... process results ...
    ))

====
“按需查询”

上面创建的查询都是“按需查询”的。
直到korma的select函数显示的执行查询，数据才会从数据库里获取。

(def humans (-> (select* humans)
              (order :date_of_birth)))

(let [kings-of-germany (-> humans        ;; hxzon：在这里进行第一次增量构建
                         (where {:country "Germany" :profession "King"}))]
  (doseq [start (range 0 100 10)
          k (select kings-of-germany
              (offset start)        ;; hxzon：在这里进行第二次增量构建
              (limit 10))]
    ;...
    ))

