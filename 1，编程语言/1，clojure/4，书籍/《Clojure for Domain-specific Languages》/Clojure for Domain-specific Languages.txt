Clojure for Domain-specific Languages
https://www.packtpub.com/application-development/clojure-domain-specific-languages

Copyright © 2013 Packt Publishing

All rights reserved. No part of this book may be reproduced, stored in a retrieval system, 
or transmitted in any form or by any means, without the prior written permission of the publisher, 
except in the case of brief quotations embedded in critical articles or reviews.

Every effort has been made in the preparation of this book to ensure the accuracy of the information presented. 
However, the information contained in this book is sold without warranty, either express or implied. 
Neither the author, nor Packt Publishing, and its dealers and distributors 
will be held liable for any damages caused or alleged to be caused directly or indirectly by this book.

Packt Publishing has endeavored to provide trademark information about all of the companies 
and products mentioned in this book by the appropriate use of capitals. 
However, Packt Publishing cannot guarantee the accuracy of this information.

First published: December 2013

Production Reference: 1111213

Published by Packt Publishing Ltd.

Livery Place

35 Livery Street

Birmingham B3 2PB, UK..

ISBN 978-1-78216-650-4

www.packtpub.com

Cover Image by Sheetal Aute (<sheetala@packtpub.com>)

====
About the Author

Ryan D. Kelker is a Clojure enthusiast and works as a freelance—he is willing to take on any project that sounds interesting. 
He started exploring computers and the Internet at a very early age and he eventually ended up building both machines and software. 
Starting with MS DOS, batch files, and QBasic, he eventually floated towards Arch Linux and the Clojure language.

He has four certifications from both CompTIA and Cisco, and has decided not to pursue any additional certifications. 
These days, he spend most of his time reading about software development, cyber security, 
and news surrounding up-and-coming computer languages. 
While away from the computer, he is usually reading a book or going out to eat with the people he loves the most.

I would like to thank Packt publishing for giving me the opportunity to write something great, 
and Chatsubolabs.com for giving me my first Clojure job. 
I would also like to thank Tom Marble, Edward Raison, and Kevin Raison for teaching me countless lessons.

====
Preface

Clojure for Domain-specific Languages is an example-oriented guide to building custom languages. 
Many of the core components of Clojure are covered to help you better understand your options when making a domain-specific language. 
By the end of this book, you should be able to make an internal DSL.

What this book covers

Chapter 1, An Overview of Domain-specific Languages with Clojure, 
will help you learn specifically what a domain-specific language (DSL) is and why you may use one. 
This will include a comparison of many existing DSLs, both in Clojure and other languages.

Chapter 2, Design Concepts with Clojure, 
will go over some basic concepts that apply to software development in any programming language. 
Each section will explain what the concept is and why the concept should be applied to your projects. 
As with all sources of information, choose what works for you.

Chapter 3, Clojure Editing and Project Creation, 
will help you get started with the Emacs text editor and the Lein project utility. 
Because entire books can be written on either of the software discussed in this chapter, 
each section will only go over the basics to help you get started.

Chapter 4, Features, Functions, and Macros, briefly goes over some of Clojure's key components. 
More specifically, Clojure namespaces, Java classes, immutability, metadata, lazy sequences, 
collection destructuring, functions, relationships, and macros.

Chapter 5, Collections and Sequencing, 
specifically focuses on Clojure's collection data structures and ways to construct, use, and manipulate them. 
Each section will focus on a certain data structure, and the end of the chapter will focus more on operations that can be used on sequences.

Chapter 6, Assignment and Concurrency, 
starts off by getting more hands-on with variables and how to manipulate them. 
The variable section explains the most common variable definition methods and functions for handling Clojure variables. 
It's also okay to skip sections if you feel that you already know the material well enough.

Chapter 7, Flow Control, Error Handling, and Math, 
starts off by explaining and displaying examples of common flow control methods, 
then it moves on to object comparison and casting. 
We will also be covering error handling and, finally, 
we will move on to the Arithmetic section that contains a lot of surprises for those who aren't familiar with Clojure. 
After reading all of the sections, remember to try some of the examples in a REPL session while reviewing the chapter.

Chapter 8, Methods for Abstraction, 
starts off with an explanation of the classes we need for the multimethod polymorphism tutorial. 
By the end of this chapter, you should be familiar with making classes, polymorphic functions, and your own data types.

Chapter 9, An Example Twitter DSL, 
is focused on building a Twitter DSL but it starts off by covering some of the key concepts of building layers of Clojure code on top of Java libraries. 
Some concepts you may already be familiar with, 
but you're encouraged to read the initial part of this chapter to better understand the concepts presented in this chapter.

Chapter 10, Unit Testing, 
will briefly cover the clojure.test, expectations, midje, and speclj unit testing frameworks. 
Each framework will be used to make tests for the Twitter mini-DSL created in the last chapter.

Chapter 11, Clojure DSLs inside Java, 
will help you learn about generating Java classes and making them available in your Java project. 
The first half of this chapter will cover how to build a Clojure class that can be called from both Java and Clojure. 
The second part will cover the importing and use of Clojure source files from within Java.

====
What you need for this book

You will need the following software for this book:

Clojure: Clojure 1.5.x

Leiningen: Leiningen 2.x (Optional, but heavily used in the book. You can still use the examples with the project manager of your choice.)

Emacs: Emacs 24.x (Optional, but required for Chapter 3, Clojure Editing and Project Creation.)

Who this book is for

If you've already developed a few Clojure applications 
and wish to expand your knowledge on Clojure or domain-specific languages in general, this book is for you. 
If you're an absolute Clojure beginner, you may only find the detailed examples of the core Clojure components of value. 
If you've developed DSLs in other languages, this Lisp- and Java-based book might surprise you with the power of Clojure.

