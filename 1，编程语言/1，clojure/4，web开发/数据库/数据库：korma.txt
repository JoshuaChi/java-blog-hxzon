数据库：korma

注释by hxzon
http://sqlkorma.com/docs
https://github.com/korma/Korma
====
目录：

start
db
entities
select
set

==
update
insert
delete
misc

========
Getting started

依赖：

;; First you'll need to add Korma as a dependency in your lein/cake project:
[korma "0.3.0"]

;; You'll also need the JDBC driver for your database. These are easy to find if 
;; you search for "my-db jdbc driver maven".

;; Example for postgres:
[org.postgresql/postgresql "9.2-1002-jdbc4"]

;; Example for h2:
[com.h2database/h2 "1.3.170"]

;; Example for sqlite:
[org.xerial/sqlite-jdbc "3.7.15-M1"]

====
db
数据库描述：

(use 'korma.db)
(require '[clojure.string :as str])

(def db {:classname   "org.h2.Driver"
         :subprotocol "h2"
         :subname     "resources/db/korma.db"})
;; this creates a connection map

(def db (h2 {:db "resources/db/korma.db"}))
;; this creates the same connection map as before, but
;; using the helper (h2 ...).

(def db (h2 {:db "resources/db/korma.db"
             :user "sa"
             :password ""
             :naming {:keys str/lower-case
                      ;; set map keys to lower
                      :fields str/upper-case}}))
                      ;; but field names are upper
;; you can pass additional options

;; Helpers for common databases:
;; 常用的数据库：

(def pg (postgres ..))
(def ms (mssql ..))
(def msac (msaccess ..))
(def orc (oracle ..))
(def mys (mysql ..))
(def sqll (sqlite3 ..))
(def h2-db (h2 ..))

==
数据库连接

;; Pass the connection map to the defdb macro:
(defdb korma-db db)

;; Or without predefining a connection map:
(defdb prod (postgres {:db "korma"
                       :user "korma"
                       :password "kormapass"
                       ;; optional keys
                       :host "myhost"
                       :port "4567"
                       :delimiters ""}))
                       ;; remove delimiters 

To define a connection to a database you use the (defdb) macro, which takes a map of database parameters. 
Those familiar with clojure.java.jdbc will notice this is the same connection map you would use there. 
To speed things up a bit, Korma provides a set of convenience functions for common database specs.

(defdb) creates a connection pool for your db spec (using the wonderful c3p0 library) 
to make sure resources are used efficiently. 
It also sets the last created pool as the default for all queries. 
As such, connection management is essentially taken care of for you.

(defdb a spec)创建了一个连接池。

========
entities
定义实体

(use 'korma.core)
(require '[clojure.string :as str])

(declare users email address state account posts)

(defentity users
  ;; Basic configuration
  (pk :id) ;; by default "id". This line is unnecessary.  主键，用于关联
           ;; it's used for relationships joins.
  (table :users) ;; by default the name of the symbol.  数据库表名
                 ;; The line above is also unecessary.
  (database db) ;; if none is specified the last defdb  数据库
                ;; will be used. Also unnecessary.
  (entity-fields :first :last) ;; default fields for selects  默认读取的字段

  ;; Mutations

  (prepare (fn [{last :last :as v}]
             (if last
               (assoc v :last (str/upper-case last)) v)))
  ;; apply a function before storing in the db  保存到数据库之前，对数据做修正
  ;; in this case the function changes the "last" field
  ;; to upper case.

  (transform (fn [{first :first :as v}]
               (if first
                 (assoc v :first (str/capitalize first)) v)))
  ;; apply a function to all select results  从数据库读取后，对数据做修正
  ;; in this case the function changes the "first" field
  ;; to capitalized.

  ;; Relationships
  (has-one address)
      ;; assumes users.id = address.users_id     一对一

  (has-many email)
      ;; assumes users.id = email.users_id    一对多，使用“1+n”次查询
      ;; but gets the results in a second query
      ;; for each element

  (belongs-to account)
      ;; assumes users.account_id = account.id    多对一

  (many-to-many posts :users_posts))
      ;; assumes a table users_posts with columns users_id    多对多，通过中间表，使用“1+n”次查询
      ;; and posts_id
      ;; like has-many, also gets the results in a second
      ;; query for each element

====
;; Subselects can be used as entities too!
;; 子查询也能作为实体

(defentity subselect-example
  (table (subselect users
            (where {:active true}))
         :activeUsers))

====
(defentity email
  (belongs-to users))

(defentity address
  (pk :my_pk) ;; sets the primary key to "my_pk"
  (belongs-to users)
  (belongs-to state {:fk :id_state}))        ;; 外键
      ;; you can optionally specify the foreign key
      ;; assumes state.id = address.id_state

(defentity state
  (table :state_st) ;; sets the table to "state_st"
  (has-many address))

(defentity account
  (has-one users))

(defentity posts
  (many-to-many users :users_posts))

==
Let's suppose that we have some tables in a database. 
We have a users table with some user data. 
The user has many emails. 
It also has one address.
It belongs to an account. 
It has a many to many relationship with posts. Email, address, account, posts are all different tables. 
We also have a table with states that has a relationship with address. 
And one last table users_posts to store the many to many relationship.

Entities map one to one with tables and are the initial building block for all your queries. 
You can specify a number of properties associated with them, 
such as the table name, an alias for the table, the primary key and so on. 

每个实体对应到一张表。

You can also set functions to be run before a record goes to the database as the result of an insert/update, 
or functions to be mapped over the results of a select. 
This allows you to apply common mutations to your data without having to think about it at every step.

实体在插入数据库前，或从数据库读出前，可以做修正。

Lastly, entities let you specify the relationships to be used when you do select queries. 
With these relationships defined, 
you can then simply use the (with) function in your select query to join the entities and return the results.
Entities offer a great deal of flexibility. 

使用with函数，来加载关联对象。

The second example shown here demonstrates how you can even use subselects as entities, 
enabling you to join on these seamlessly within your normal queries.
第二个示例，展示了将子查询作为实体。

You need to create entities for each table that participate in a relationship. 
Remember that when the primary key is not "id", 
the table name is not the name of the entity defined or the foreign key is not in the format "tablename_id" 
you have to define them in the entity.

主键，表名，外键的默认命名。

========
select queries
查询

(select users
 (with address))
;; SELECT address.street, address.city, address.zip FROM users LEFT JOIN address ON users.id = address.users_id


(select users
  (with address) ;; include other entities based on    根据关联关系，载入关联的实体
                 ;; their relationship
  (with posts) ;; include a many-to-many relationship    多对多的关联
               ;; you can use (with) for any relationship
               ;; defined in the entity
  (fields [:first :firstname] :last :address.zip)
      ;; you can alias a field using a vector of [field alias]    获取哪些字段，设置别名。关联对象的字段，使用前缀。

  (modifier "DISTINCT") ;; you can add a modifier    修饰器，例如“去重”

  (aggregate (count :*) :cnt :status)
      ;; You specify alias and optionally a field to group by        聚合运算，可以指定聚合结果的别名，和可选的用于分组的字段名
      ;; available aggregates:        可以使用的聚合运算：
      ;; sum, first, last, min, max, avg, stdev, count

  (where {:first "john"
          :last [like "doe"]
          :date_joined [<= (sqlfn now)]})
      ;; You can use an abritrary sql function by calling        使用 sql 函数
      ;; (sqlfn fn-name & params)

  (join email (= :email.users_id :id))
      ;; You can do joins manually        手工关联
  (where {:email.id [in (subselect email
                          (fields :id)
                          (where {:sent true}))]})
      ;; When necessary, you can use subselects in your        子查询
      ;; queries just like you would a normal select
  (order :id :ASC)
  (group :status)
  (having {:cnt [> 3]})
      ;; You can use having clauses with the same syntax used
      ;; by where clauses.

  (limit 3)
  (offset 3))

====
;;You can also compose select queries over time:
;; 组合查询语句

(def base (-> (select* users)
              (fields :first :last)
              (order :created)))

(-> base
    (with :email)
    (where (> :visits 20))
    (select))

Select queries are the most interesting of the query types and have a number of tools to help make them simple. 
As discussed in the entities section, you can use the (with) function to include a relation. 
If you do so, you'll also want to specify the exact fields to be returned in the query using the (fields) function, 
which takes a variable number of keywords representing the field names you want. 

The (modifier) function add a modifier to the beginning of a query. 

Likewise, you can use the (aggregate) function to call one of SQL's aggregators by specifying the function, 
an alias, and optionally a field to group by. 

One thing to note in all of this is that fields are always keywords and any without a table prefix 
are assumed to be for the current entity unless they're aliased.

====
We'll go more in depth about (where) and (having) clauses below, 
but as you can see, you have access to all the other parts of a select that you'd expect: 
(subselect), (join), (group), (order), (limit), and (offset). 

Subselects work just like a select clause does, but they can be embedded anywhere in your query. 
子查询和查询子句相似，但是可以嵌入查询语句中的任何地方。

Joins allow you to manually control how related tables a brought together by taking a standard where predicate. 

join允许你用where来控制实体间的关联关系。

Group and order clauses will be evaluated in the order they're added to the query. 

The default ordering direction is ASC.

====
where子句

;; Let's look at where clauses with a little more depth:
;; And everything that you can do with (where), you can
;; also do with (having)
;; To use (having) you need a (group) clause of course.

任何where子句能做的，having子句也能做。

(-> (select* users)
    (where {:first "john"
            :last "doe"})
    (as-sql)) ;; we use (as-sql) to see the string of SQL       用as-sql来得到产生的sql语句
              ;; that will be run. To run this you can        用 exec 或 select 来执行查询
              ;; replace (as-sql) by (exec) or (select)

;; Is the same as:
(-> (select* users)
    (where (and (= :first "john")
                (= :last "doe")))
    (as-sql))

;; Multiple where's are joined with AND, so this
;; is also the same:
;; 可以有多个where子句，它们是 and 的关系。

(-> (select* users)
    (where {:first "john"})
    (where {:last "doe"})
    (as-sql))
;; => "SELECT "USERS".* FROM "USERS" WHERE
;;     ("USERS"."FIRST" = ? AND "USERS"."LAST" = ?)"

;; You can use other predicates for map values too
(-> (select* users)
    (where (or {:age [> 5]}
               {:last [like "doe"]}))
    (as-sql))

;; Is the same as:
(-> (select* users)
    (where (or (> :age 5)
               (like :last "doe")))
    (as-sql))
;; => "SELECT "USERS".* FROM "USERS" WHERE
;;     ("USERS"."AGE" > ? OR "USERS"."LAST" LIKE ?)"

hxzon：SELECT "users"."first", "users"."last" FROM "users" WHERE (("users"."age" > ?) OR ("users"."last" LIKE ?))

;; Available predicates:
;; 可以使用以下谓词：

[=, like, and, or, >, <, >=, <=, in, not-in, not, not=, between]

==
(where) and (having) clauses are sort of their own mini-DSL. 
Anywhere you would provide a clause, 
you can use a map where each key in the map represents a field and each value is its value. 

Just like with the fields function, keys specified without a table prefix will be prefixed for the current entity. 
Also, a field's value can be a vector specifying a different comparison function to be used. 
Each clause that results from a map will be AND'd together.

You can also call the (where) and (having) predicates like any normal function, 
allowing you to compose your predicate clauses as if they were standard Clojure code. 

Fields in Korma are always specified as keywords and will be prefixed appropriately.
The examples here use the (where) clause, but it's the same for the (having) clause.

(select users
 (fields :first)
 (with email        ;; hxzon重要：指定关联对象的where条件，和字段
   (fields :email) ;; the context is now email.*
   (where {:email [like "%_test%"]})))

(select users
  (fields :first)
  (where {:last [like "doe"]})
  (with address
    (with state (fields :state)) ;; you can nest withs        ;; hxzon重要：嵌套关联。
    (fields :city :zip :address1 :address2)))

hxzon：
SELECT "users"."first", "users"."last", "users"."first", 
"address"."city", "address"."zip", "address"."address1", "address"."address2" 
FROM ("users" LEFT JOIN "address" ON "address"."users_id" = "users"."id") 
LEFT JOIN "state_st" ON "state_st"."id" = "address"."id_state" 
WHERE ("users"."last" LIKE ?)


With clauses act almost like selects, 
in that they can actually be further refined using all the standard functions you would use in a select. 
This allows for a great deal of flexibility when describing your relations.

with子句和select子句很相似。

========
set operations
集操作

;; Using set operations

;; 并集，去除重复
(union 
  (queries (subselect users
             (where {:id 7}))
           (subselect users
             (where {:id 1}))
           (subselect users
             (where {:id 1})))
  (order :first))
;; union operations remove duplicates

;; You can compose set operations:
(def base (-> (union*)
              (queries (subselect users
                         (where {:id 7})))))
(-> base
    (queries (subselect users
               (where {:id 1})))
    (queries (subselect users
               (where {:id 1})))
    (exec))
;; Same result as above

;; 并集，不去除重复
(union-all
  (queries (subselect users
             (where {:id 7}))
           (subselect users
             (where {:id 1}))
           (subselect users
             (where {:id 1})))
  (order :first))
;; union-all do not remove duplicates.
;; You can compose union-all with (union-all*)

;; 交集
(intersect
  (queries (subselect users
             (where {:id [in [1 7]]}))
           (subselect users
             (where {:id 1}))
           (subselect users
             (where {:id 1})))
  (order :first))
;; intersect only keeps what is in all queries.
;; You can compose intersect with (intersect*)

Set operations include union, union-all and intersect operations. 
You can use the (queries) function to add groups of queries to the operation.
You can't use (select) inside (queries), you have to use the (subselect) macro.

可以使用 (queries) 来增加子查询。
不能在 (queries) 中使用 (select) ，必须使用 (subselect) 。

