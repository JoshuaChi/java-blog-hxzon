（hxzon读书笔记）《clojure编程》第6章：数据类型和协议

by hxzon
====
摘要：
1，动态表达力问题：让已有类型实现新接口。
2，协议：defprotocol 。
3，定义新类型：defrecord 和 deftype 。
4，defrecord，记录类型。
5，deftype，普通类型。

6，实现协议。
内联实现（defrecord和deftype，reify）。
重用实现（extend），示例：重用实现，混入。

7，协议自省（extenders，extends? ，satisfies? ）。
8，协议函数分派的边界场景。

========
1，动态表达力问题

编程中，某些对象不是你能控制的，需要使用一个适配器或者代理。
如果使用的语言足够动态，允许猴子补丁，我们就可以在运行时让它实现你的接口。
这里，我们问题的根源被命名为“表达力问题”：

表达力问题是对于一个旧问题的新名字。
我们的目标是根据情况定义数据类型，也就是说，我们可以根据情况往数据类型里面添加新函数，
而不用重新编译现有代码，而且保持了静态类型安全性（比如说不用进行类型转换）。
——Philip Wadler, http://www.daimi.au.dk/~madst/tool/papers/expression.txt

在业界有一些争论：动态语言里面的表达力问题还是不是Philip Wadler所指出的那个问题。
我们把这个问题叫做“动态表达力问题”。

动态表达力问题是一个旧问题的新名字。
我们的目标是让一个新的类型来实现已有的接口；
让一个已有的类型实现一个新的接口，而不用重新编译现有代码。

这个问题的前半部分，任何面向对象的语言都提供了这个能力。
这个问题的后半部分，很少有语言尝试解决。

========
2，协议

clojure里面接口的对应物我们成为“协议”，而“接口”这个词特指java接口。

一个协议由一个或多个方法组成，每个方法可以有多个方法体。
所有方法都至少有一个参数，这个参数相当于java里面的this。

协议里面的每个方法的第一个参数是特殊的，根据这个参数来决定使用这个协议的哪个实现。
因此协议提供的是基于单个参数类型的函数分派，这是一种很受限的多态分派方式，但这种方式是被虚拟机优化过的。

(defprotocol ProtocolXX
	"doc..."
	(methodXX [this arg1 arg2] "doc...")
	(methodYY [x] [x arg] "doc..."))

协议的命名使用驼峰风格，因为它们最终会被编译成jvm的接口和类。
从用户的角度看，协议的方法就是函数。
但是设计协议时应该是面向协议的“实现者”，而不是面向“最终使用者”的。

虽然协议的方法是函数，但是不能对协议方法的参数使用解构，
也不能使用剩余参数，因为jvm接口不支持剩余参数。

对一个协议进行扩展有如下方法：
-1，extend-protocol
-2，extend-type
-3，extend
-4，内联实现

不需要实现协议定义的所有方法，如果调用到那些没有实现的方法，会抛出异常。

====
extend-protocol把一个协议扩展到多个类型，
extend-type把多个协议扩展到一个类型。

(extend-type TypeAA
	ProtocolXX
	(methodXX1 [this x] (...))
	ProtocolYY
	(methodYY1 [this x] (...))
	(methodYY2 [this x] (...)))

(extend-protocol ProtocolAA
	TypeXX
	(methodAA1 [this x] (...))
	TypeYY
	(methodAA1 [this x] (...))
	(methodAA2 [this x] (...)))

可以把一个协议扩展到nil，使得不必再担心NullPointerException。

因为这些实现函数是命名空间限定的，所以一个协议的方法不会跟另外一个协议的方法相冲突。

==
示例：矩阵协议。

(defprotocol Matrix
    "Protocol for working with 2d datastructures."
    (lookup [matrix i j])
    (update [matrix i j value])
    (rows [matrix])
    (cols [matrix])
    (dims [matrix]))

;让向量实现矩阵协议。
(extend-protocol Matrix
    clojure.lang.IPersistentVector
    (lookup [vov i j]
        (get-in vov [i j]))
    (update [vov i j value]
        (assoc-in vov [i j] value))
    (rows [vov]
        (seq vov))
    (cols [vov]
        (apply map vector vov))
    (dims [vov]
        [(count vov) (count (first vov))]))

;扩展到nil。
(extend-protocol Matrix
    nil
    (lookup [x i j])
    (update [x i j value])
    (rows [x] [])
    (cols [x] [])
    (dims [x] [0 0]))
    (lookup nil 5 5)
;= nil

(dims nil)
;= [0 0]

;让java数组实现矩阵协议。
(extend-protocol Matrix
    (Class/forName "[[D") 
    (lookup [matrix i j]
        (aget matrix i j))
    (update [matrix i j value] 
        (let [clone (aclone matrix)]
            (aset clone i
                (doto (aclone (aget clone i))
                    (aset j value)))
            clone))
    (rows [matrix]
        (map vec matrix))
    (cols [matrix]
        (apply map vector matrix))
    (dims [matrix]
        (let [rs (count matrix)]
            (if (zero? rs)
                [0 0]
                [rs (count (aget matrix 0))]))))

(def matrix (make-array Double/TYPE 2 3))
;= #'user/matrix

(rows matrix)
;= ([0.0 0.0 0.0]
;= [0.0 0.0 0.0])

(rows (update matrix 1 1 3.4))
;= ([0.0 0.0 0.0]
;= [0.0 3.4 0.0])

(lookup (update matrix 1 1 3.4) 1 1)
;= 3.4

(cols (update matrix 1 1 3.4))
;= ([0.0 0.0]
;= [0.0 3.4]
;= [0.0 0.0])

(dims matrix)
;= [2 3]


========
3，实现协议

让一个类型实现一个协议有两种方法：
-1，内联实现，在用deftype或defrecord定义类型时，直接实现协议。
-2，使用extend，extend-type，extend-protocol函数，把一个类型的实现注册到协议上。

一个细微区别是如何访问字段的值。
当在类型之外访问类型字段时，需要用关键字或者java互操作方法来访问。
内联实现时，因为这些字段名在词法范围内，可以直接引用字段名字。

==
;内联实现
(defrecord Point [x y]
    Matrix
    (lookup [pt i j]
        (when (zero? j)
            (case i
                  0 x
                  1 y)))
    (update [pt i j value]
        (if (zero? j)
            (condp = i
                0 (Point. value y)  ;if (= i 0) (Point. value y)
                1 (Point. x value))
            pt))
    (rows [pt] [[x] [y]])
    (cols [pt] [[x y]])
    (dims [pt] [2 1]))

==
;非内联实现
(defrecord Point [x y])

(extend-protocol Matrix
    Point
    (lookup [pt i j]
        (when   (zero? j)
                (case i
                      0 (:x pt)
                      1 (:y pt))))
    (update [pt i j value]
        (if (zero? j)
            (condp = i
                0 (Point. value (:y pt))
                1 (Point. (:x pt) value))
            pt))
    (rows [pt]
        [[(:x pt)] [(:y pt)]])
    (cols [pt]
        [[(:x pt) (:y pt)]])
    (dims [pt] [2 1]))

====
3.1，内联实现

3.1.1，
优点：
内联实现的性能会好些，
内联实现时，能直接访问类型的字段；
内联实现时调用协议的方法跟java里面调用一个接口方法一样快。

内联方式实现一个协议的方法，会产生一个实现了协议方法的java类。
每个对于协议函数的调用，首先会做一个针对对应接口的测试，
而这个测试可以使用最快的办法：一个普通的方法调用，这是jvm能识别且高度优化的。

问题：
如果两个协议有同样签名的方法，那么这两个方法就会冲突。
没办法以内联方式为这两个方法提供实现。
也不能为任何跟Object方法冲突的协议方法提供实现。
也不能跟defrecord会自动提供的方法（java.util.Map,java.io.Serializable,clojure.lang.IPersistentMap的方法）冲突。

而用extend-type等方法，则没有这个问题，因为这个注册行为不会影响类型本身的创建，类本身没有发生变化。

(defprotocol ClashWhenInlined
    (size [x]))
;= ClashWhenInlined

(defrecord R []
    ClashWhenInlined
    (size [x]))    ;这个方法跟java.util.Map的size方法冲突。
;= #<CompilerException java.lang.ClassFormatError:
;= Duplicate method name&signature in class file user/R, compiling:(NO_SOURCE_PATH:1)>


(defrecord R [])
;= user.R

(extend-type R 
    ClashWhenInlined
    (size [x]))
;= nil

==
使用内联实现时，实现代码是直接写入类文件里面，所以无法在运行时改变。

内联实现是静态的，所以应该在性能优化时才考虑这种方式。

====
3.1.2，
要实现java接口，只能用内联方式。
Object的方法也可作为接口来实现，除此以外，任何其他类（抽象类或非抽象类），都不能内联继承。
跟实现协议一样，不需要实现接口的所有方法。调用未实现的方法会自动抛出异常。
内联实现无法获得所定义类型的引用。

(deftype MyType [a b c]
    java.lang.Runnable
    (run [this] ...)
    Object
    (equals [this that] ...)
    (hashCode [this] ...)
    Protocol1
    (method1 [this ...] ...)
    Protocol2
    (method2 [this ...] ...)
    (method3 [this ...] ...))

(deftype Point [x y]
    Matrix
    (lookup [pt i j]
        (when (zero? j)
            (case   i
                    0 x
                    1 y)))
    (update [pt i j value]
        (if (zero? j)
            (case   i
                    0 (Point. value y)
                    1 (Point. x value))
            pt))
    (rows [pt]
        [[x] [y]])
    (cols [pt]
        [[x y]])
    (dims [pt]
        [2 1])
    Object
    (equals [this other]
        (and (instance? (class this) other)   ;内联实现无法获得所定义类型的引用。
             (= x (.x other)) (= y (.y other))))
    (hashCode [this]
        (-> x hash (hash-combine y))))

====
3.1.3，用reify定义匿名类型

跟deftype和defrecord不同，reify不是一个顶级形式，它不会定义出一个有名的类型，
它直接求值出一个匿名类型的实例，相当于java中的匿名内部类。

reify不定义任何字段。

(reify
    Protocol-or-Interface-or-Object
    (method1 [this x]
        (implementation))
    Another-Protocol-or-Interface
    (method2 [this x y]
        (implementation))
    (method3 [this x]
        (implementation)))

由reify所创建的类实例创建了一个闭包，方法的实现体可以直接访问当前词法范围内的任何本地绑定。

(defn listener
    "Creates an AWT/Swing `ActionListener` that delegates to the given function."
    [f]
    (reify
        java.awt.event.ActionListener
        (actionPerformed [this e]
            (f e))))

reify与proxy的使用场景有重合。
但是，
-1，reify更简单。它的方法实现直接写入所定义的匿名类型中（跟deftype和defrecord一样），所以不支持方法实现的动态更新。
-2，reify更受限。它只能实现协议，java接口和Object的方法，不能继承一个具体类（包括抽象类）。
-3，因为reify方法直接写入类文件，所以调用这些方法没有额外开销。

====
3.2，重用实现

类型只能实现协议或接口，没办法继承另一个具体类型，从而继承它的实现。
使用extend函数可以解决这个问题。（extend-type和extend-protocol是基于extend之上的宏。）

(defrecord Point [x y])

(extend Point
    Matrix
    {:lookup (fn [pt i j]
                (when (zero? j)
                    (case i
                        0 (:x pt)
                        1 (:y pt))))
     :update (fn [pt i j value]
                (if (zero? j)
                    (condp = i
                        0 (Point. value (:y pt))
                        1 (Point. (:x pt) value))
                    pt))
     :rows (fn [pt]
                [[(:x pt)] [(:y pt)]])
     :cols (fn [pt]
                [[(:x pt) (:y pt)]])
     :dims (fn [pt] [2 1])})

extend的第3个参数是一个map，键名是方法名，值是方法实现。
通过对这个map操作，可以实现“继承”“traits”和“混入”。

==
示例，为一些方法提供默认实现。

(def abstract-matrix-impl
    {:cols (fn [pt]
                (let [[h w] (dims pt)]
                    (map
                        (fn [x] (map #(lookup pt x y) (range 0 w)))
                        (range 0 h))))
     :rows (fn [pt]
                (apply map vector (cols pt)))})

(extend Point
    Matrix
    (assoc abstract-matrix-impl             ;在abstract-matrix-impl里添加新方法实现。
        :lookup (fn [pt i j]
                    (when (zero? j)
                        (case i
                            0 (:x pt)
                            1 (:y pt))))
        :update (fn [pt i j value]
                    (if (zero? j)
                        (condp = i
                            0 (Point. value (:y pt))
                            1 (Point. (:x pt) value))
                        pt))
        :dims (fn [pt] [2 1])))

==
示例，混入。

(defprotocol Measurable
    "A protocol for retrieving the dimensions of widgets."
    (width [measurable] "Returns the width in px.")
    (height [measurable] "Returns the height in px."))

(defrecord Button [text])

(extend-type Button
    Measurable
    (width [btn]
        (* 8 (-> btn :text count)))
    (height [btn] 8))

(def bordered
    {:width #(* 2 (:border-width %))
     :height #(* 2 (:border-height %))})

Measurable
;= {:impls
;=  {user.Button
;=      {:height #<user$eval2056$fn__2057 user$eval2056$fn__2057@112f8578>,
;=  :width #<user$eval2056$fn__2059 user$eval2056$fn__2059@74b90ff7>}},
;=  :on-interface user.Measurable,
;=  :on user.Measurable,
;=  :doc "A protocol for retrieving the 2D dimensions of widgets.",
;=  :sigs
;=  {   :height
;=      {   :doc "Returns the height in px.",
;=          :arglists ([measurable]),
;=          :name height},
;=      :width
;=      {   :doc "Returns the width in px.",
;=          :arglists ([measurable]),
;=          :name width}},
;=  :var #'user/Measurable,
;=  :method-map {:width :width, :height :height},
;=  :method-builders
;=  {   #'user/height #<user$eval2012$fn__2013 user$eval2012$fn__2013@27aa7aac>,
;=      #'user/width #<user$eval2012$fn__2024 user$eval2012$fn__2024@4848268a>}}


;获得Button类对于Measurable协议的实现map。
(get-in Measurable [:impls Button])
;= {:height #<user$eval1251$fn__1252 user$eval1251$fn__1252@744589eb>,
;= :width #<user$eval1251$fn__1254 user$eval1251$fn__1254@40735f45>}

==
(defn combine
    "Takes two functions f and g and returns a fn that takes a variable number
    of args, applies them to f and g and then returns the result of
    (op rf rg) where rf and rg are the results of the calls to f and g."

    [op f g]
    (fn [& args]
        (op (apply f args) (apply g args))))

(defrecord BorderedButton [text border-width border-height])

;？
(extend BorderedButton
    Measurable
    (merge-with (partial combine +)
        (get-in Measurable [:impls Button])
        bordered))

(let [btn (Button. "Hello World")]
     [(width btn) (height btn)])
;= [88 8]

(let [bbtn (BorderedButton. "Hello World" 6 4)]
     [(width bbtn) (height bbtn)])
;= [100 16]

==
如果使用内联实现了一个协议，就不能再用上述方法进行重用，而只能利用代理或宏。

========
4，协议自省

--
extenders，返回实现了某个协议的所有类。

(extenders Measurable)
;= (user.BorderedButton user.Button)

--
extends? ，判断一个类型是否扩展了某个协议。

(extends? Measurable Button)
;= true

--
satisfies? ，相当于java中的instance? ，测试某个实例是否扩展了某个协议。

(satisfies? Measurable (Button. "hello"))
;= true

(satisfies? Measurable :other-value)
;= false

使用内联实现的类型，satisfies? 和 instance? 是一样的。

========
5，协议函数分派的边界场景

因为协议的方法产生的是命名空间限定的函数，所以两个协议的函数永远不会相互冲突。

-1，如果一个类型对于一个协议有两个不同的实现，后一个实现将覆盖前一个实现。

-2，如果扩展协议到类继承链上的两个类，始终选择继承层级较低的那个实现。

(defprotocol P
    (a [x]))
;= P

(extend-protocol P
    java.util.Collection
    (a [x] :collection!)
    java.util.List
    (a [x] :list!))
;= nil

(a [])
;= :list!

-3，如果扩展一个协议的两种类型本身没有任何继承关系，将随机选择一个实现。

(defprotocol P
    (a [x]))

(extend-protocol P
    java.util.Map
    (a [x] :map!)
    java.io.Serializable
    (a [x] :serializable!))

(a {})
;= :serializable! ;但这个结果不是固定的，重启后，结果也可能为:map! 。

