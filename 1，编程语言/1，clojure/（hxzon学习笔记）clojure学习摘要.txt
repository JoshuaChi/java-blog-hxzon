（hxzon学习笔记）clojure学习摘要

====
1，定义函数

(fn [p1 p2] s1 s2)

(defn xxx [^long p1 ^String p2] s1 s2)

注意，只有long和double两种类型。

==
fn的第一个参数是一个可选的函数名字，使得可以在函数体中引用函数自己。

(def strange-adder (fn  adder-self-reference
                        ([x] (adder-self-reference x 1))
                        ([x y] (+ x y))))
;= #'user/strange-adder

==
hxzon注意：
fn 的名字，在 fn 体内会遮盖外部的同名 var 。

(def a 1)
((fn a [] (prn a)))
;; #<xxx$eval1512$a__1513 org.hxzon.clj.xxx$eval1512$a__1513@e4d95b>

==
定义本地变量，(let [x1 v1 x2 v2] ...)
可在绑定列表中反复计算。

(let [x1 v1
		_ (doSomething)
		x1 v2])

要使用可修改的本地变量，可自定义一个值容器，然后修改该容器的值。
或者使用 with-local-vars 。

==
中途return，使用内部私有函数，(let [fn1 ...]) 。

if(a) doA return
if(b) doB return
if(c) doC return
doD

(cond a doA
		b doB
		c doC
		:else doD)

==
循环：

          (loop [ sb "" cmds (keys @adm-cmds)]
            (if(empty? cmds)
              (.writeAndFlush ctx (str sb "\r\n"))
              (recur (str sb (first cmds) "  ") (rest cmds))))


====
2，宏

宏在读取器展开，它的返回值就是展开的结果。
宏返回的值是“clojure代码”，这些生成的代码插入到自己所在位置。

==
宏本身执行一次，它的返回值作为代码，又执行一次。

(def a 0)

(defmacro ma []
  (def a (inc a))
  `(prn a))

(ma);; print 1
(ma);; print 2
(ma);; print 3
(prn a);; print 3

==
不定参数：

(defmacro defComp [& np]
  (let [name (first np)
        parent (first (next np))
        parent (if (nil? parent) Comp parent) ]
    `(do (def ~name (kco ~parent)) 
  (dosync (alter ~name assoc :name '~name)))))

==
不同参数个数重载：

(defmacro defComp
  ([name] `(defComp ~name Comp))
  ([name parent]
  `(do (def ~name (kco ~parent))
     (dosync (alter ~name assoc :name '~name)))))

==
等价写法：

(defmacro defCompFn [name method & body]
  ;`(dosync (alter ~name assoc (keyword ~method) (fn ~@body))))
  (list 'dosync (list 'alter name 'assoc (list 'keyword method ) (cons 'fn body ))))

==
(defmacro kfn [name method & body]
  (let [bs (if (vector? (first body))  (list body)  body)
        bs 
        (for [ [a & b] bs]    ;向量解构
          (cons (into ['this] a) b))]    ;添加隐式参数“this”
    `(dosync (alter ~name assoc (keyword ~method) (fn ~@bs) ))  ))

(defmacro kfns [name & methods]
  (let [ms 
        (for [ [methodName & methodBody] methods]
          `(defCompFn ~name ~methodName ~@methodBody))]
    `(do ~@ms)))

;相当于给宏重命名：

(defmacro defCompFn [name method & body]
  `(kfn ~name ~method ~@body))

(defmacro defCompFns [name & methods]
  `(kfns ~name ~@methods))

==
~'，波浪号和单引号是一种常见的搭配，如下。
~'session，外层已经阻止求值，为什么不直接使用 session ？
因为直接使用session，会加上当前的命名空间，见下。
let绑定是不允许有名字空间的。

'~xxx ，对xxx求值，再引述。

(defmacro def-adm-cmd [^String name & body]
  `(add-adm-cmd 
     (try
       (proxy [org.hxzon.rpggame.core.impl.AbstractAdmCmdImpl] [~name] ~@body)
       (catch Exception ~'e (log-error ~'e))    ;先引述，必须反引号加入当前命名空间前缀，再求值，得到符号本身。
       )))

==
引述（单引号'）：返回参数的不求值形式。

语法引述（反引号`）：跟引述很像，但语法引述把无命名空间限定的符号求值成当前命名空间的符号。
符号的默认空间化对于产生正确的代码非常关键。
它使我们不会因为疏忽而重定义一个已经定义过的值。这被称为“宏卫生”。
另，语法引述里面允许“反引述”。

反引述（波浪号~）。在语法引述里面，表示求值。

编接反引述（波浪地址号~@）。在语法引述里面，表示求值成一个列表，再嵌入外层。

====
3，常用

(import 'io.netty.buffer.ByteBuf)

(def cmd-fns (ref {}))

(defmacro def-cmd [cmd & body]
	`(dosync (alter cmd-fns assoc ~cmd (fn [ ~'byteBuf  ~'ctx] ~@body))))

(defn remove-client [^Channel channel]
	(dosync (alter dissoc clientChannels channel)))

给宏生成的代码添加类型提示（通过引入本地绑定）：

(defmacro def-cmd [cmd & body]
  (let [byteBuf (with-meta 'byteBuf { :tag ByteBuf } ) 
          ctx (with-meta 'ctx { :tag ChannelHandlerContext }) ]
    `(dosync (alter cmd-fns assoc ~cmd (fn [ ~byteBuf  ~ctx] ~@body)))))

====
4，(with-out-str & body)
将“打印输出”绑定到一个StringWriter，返回这个字符串。

====
5，在需要do的地方，漏写do，会抛出空指针异常。

6，转成java数组
(into-array CharSequence ["a" "b" "c"])

java方法中使用不定形参时，在clojure中不能传入单个实参，必须转成数组，且类型匹配。

====
7，可以定义含有点号的var，但是不能直接读取，会被当成class，必须用@#'访问。

(def a.b 1)
;; #'org.hxzon.clj.xzwebc/a.b
a.b
;; java.lang.ClassNotFoundException: a.b, compiling:(null:0:0)
#'a.b
;; #'org.hxzon.clj.xzwebc/a.b
@#'a.b
;; 1

========
8，

==
var

binding，动态绑定
set! ，设置动态var的线程本地值。
alter-var-root ，修改根值。
with-redefs

==
agent

send（固定大小的线程池），
send-off（不固定大小的线程池，适宜阻塞型操作）。
await，await-for。
set-error-handler! （设置错误处理器），
set-error-mode! （设置错误处理模式，挂掉或忽略）。

hxzon：因为串行执行，所以每个action独占agent。action只在事务成功时，才执行（只执行一次）。

==
atom

swap! 自动不断重试。
compare-and-set! 手工比较来更新。
reset! 强行更新。

==
ref

(alter ref f & fparams)：alter的语义是，当事务提交时，ref的全局值必须跟这个事务内“第1次调用alter时”的值一样，
否则整个事务使用最新的ref全局值重试。

(commute ref f & fparams)：事务内，commute执行一次。
然后事务“提交”时，所有commute又执行一次（它不会检查ref是否已被别的事务修改），
这一次的执行值作为 ref 的全局值。

(ref-set ref val)，和alter语义相同，通常用来重新初始化 ref 。

(ensure ref)，相当于“空写”，用来避免write skew（写偏序），
即用来避免一个事务读到旧值（该值已被别的事务修改提交）。

读线程也可能重试。
ref 保存了一个值的历史列表。
事务内，读取一个ref的值时，会去查找离事务开始前最近的一个时间点的值，
如果这个时间点的值已被冲走，则“只读事务”会重试。

(dosync & exprs)，开启事务

========
9，assoc 仅适用于 clojure.lang.Associative ，不是所有的 map 实例都能使用。
同样，不是所有的 map 实例都能作为函数使用。

(def a (java.util.HashMap.))
(assoc a :h 1)
;; java.lang.ClassCastException: java.util.HashMap cannot be cast to clojure.lang.Associative

可通过以下方式，即先转换：

(assoc (merge {} a) :h 1)

(assoc nil :a 1)
;; {:a 1}

========
10，
(def a 1)
(def b {:a (var a)})

(= (var a) (:a b))
;; true

(def a 2)

(= (var a) (:a b))
;; true

========
11，(resolve sym) 查找var

(resolve 'a)
(var a)



