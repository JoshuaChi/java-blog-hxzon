（hxzon读书笔记）clojure源码品读

by hxzon
====
1，基本概念

Var
根值，线程绑定值。

(var a)，特殊形式，获得a所对应的Var 。
见 clojure.lang.LispReader.EvalReader，clojure.lang.LispReader.VarReader 。
见 clojure.lang.Compiler.TheVarExpr 。

====
符号的处理
Expr clojure.lang.Compiler.analyzeSymbol(Symbol sym)
Object clojure.lang.Compiler.resolve(Symbol sym)
Object clojure.lang.Compiler.resolveIn(Namespace n, Symbol sym, boolean allowPrivate)

无空间限定：
可能是本地绑定
导入到本空间的类的短名-》恢复成类的全限定名
导入到本空间的var-》恢复成var的符号
导入到本空间的“命名空间的别名”-》恢复成原来的命名空间名

有空间限定：
类的成员（前面的空间限定是类的全限定名，符号本身是成员名）
该空间下的var（如果空间名是别名，恢复成原来的空间名）



==
Namespace
命名空间，存放Symbol到Var的映射。

Symbol

Keyword

IFn

====
2，LispReader
读取器（读者宏）

注意，LispReader生成各种form：
ListReader，处理圆括号，生成列表。
VectorReader，处理方括号，生成向量。
MapReader，处理花括号，生成映射。
MetaReader，处理元数据和它的下一个形式。
WrappingReader，处理语法糖形式，例如@，' 等，生成序列(deref xxx) (quote xxx) 等。
FnReader，处理函数字面量，生成序列(fn xxx)。
VarReader，处理语法糖#' ，生成序列(var xxx)
StringReader，处理双引号，生成字符串。
还有集，正则表达式等reader。

除了上述各种专门的reader，普通token由以下read方法读出：

LispReader.read(PushbackReader r, boolean eofIsError, Object eofValue, boolean isRecursive)
LispReader.interpretToken(String s)
LispReader.matchSymbol(String s)

然后生成数字，特殊字面量（nil，true，false，分别得到null，RT.T，RT.F），关键字，符号。

除了 #= ，LispReader不会得到一个var，它只生成符号。
符号识别成var，是在 Compiler 处理的。

====
3，Compiler
特殊形式的定义，字节码生成。

Expr Compiler.analyze(C context, Object form, String name)
Expr Compiler.analyzeSymbol(Symbol sym)  ：解析符号，识别成Var或类名，否则抛出异常。
Compiler.VarExpr ：var（符号）求值（解引用），得到它的线程绑定值，或根值。

Compiler.LetExpr

Compiler.InvokeExpr ：求值成函数，并调用该函数。

Compiler.DefExpr  ：(def sym "doc string" initExpr)

====
4，RT
各种操作方法（序列操作，映射表操作，数组操作，数据类型转换等）的实现。

====
5，core.clj

核心宏，核心函数定义。


==================
https://github.com/xumingming/clojure
徐明明的源码阅读，及修改。

==
https://github.com/xumingming/clj-false
FALSE implemented in Clojure

==
https://github.com/xumingming/clojure-clojure
Clojure’s abstractions written in Clojure.
My goal is to replace much of Clojure’s Java code with Clojure code–much but not all. 
This isn’t Clojure-in-Clojure. 
I do not expect to replace the Clojure compiler, nor do I expect to implement Var, IFn, the STM, 
and many other bits of Java code.
用clojure重写部分java代码。

==
https://github.com/xumingming/clojure-in-clojure
An experimental re-implementation of Clojure on Clojure.
Why?
At the moment this project is mostly an excuse to write a non-trivial amount of Clojure 
and to gain a better understanding of the current Clojure implementation.
How?
The current approach is to attempt a fairly direct translation of the Java implementation of Clojure, 
in order to make it easier to spot omissions or mistakes. 
Once everything works (and backed by extensive tests) the code can be refactored to more idiomatic Clojure.

==
https://github.com/xumingming/clojure-reader
A re-implementation of the Clojure reader in Clojure.

