（hxzon读书笔记）clojure源码品读2

by hxzon
====
真正的特殊形式：
def，loop*，recur，if，case*，let*，letfn*，
do，fn*，quote，var，import*，.，set!，
deftype*，reify*，
try，throw，catch，finally，
monitor-enter，monitor-exit，
new，&

对于点号开头或点号结尾的符号，都是特殊处理的。

========
特殊形式：点
HostExpr

(. x fieldname-sym) or
(. x 0-ary-method)
(. x methodname-sym args+)
(. x (methodname-sym args?))

无法通过实例访问静态成员，一旦x不是类名，则只会查找实例成员。
(. x xxx)优先视为方法，找不到方法时，才视为字段。

========
(letfns* [var (fn [args] body) ...] body...)

不能被求值。

(defmacro letfn 
  "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+) ;; 重载

  Takes a vector of function specs and a body, and generates a set of
  bindings of functions to their names. All of the names are available
  in all of the definitions of the functions, as well as the body."
  {:added "1.0", :forms '[(letfn [fnspecs*] exprs*)],
   :special-form true, :url nil}
  [fnspecs & body] 
  `(letfn* ~(vec (interleave (map first fnspecs) 
                             (map #(cons `fn %) fnspecs)))
           ~@body))

(letfn [(f1 [p1 p2] f1body) (f2 [p1 p2] f2body)] body)
=> (letfn* [f1 (fn f1 [p1 p2] f1body) , f2 (fn f2 [p1 p2] f2body)] body)

letfn中的函数，可以互相引用。

(letfn [(odd? [n]
          (if (zero? n)
            false
            (even? (dec n))))
        (even? [n]
          (or (zero? n)
              (odd? (dec n))))]
  (odd? 11))
;= true


========
(case* expr shift mask default map<minhash, [test then]> table-type test-type skip-check?)

(defn- case-map
  "Transforms a sequence of test constants and a corresponding sequence of then
  expressions into a sorted map to be consumed by case*. The form of the map
  entries are {(case-f test) [(test-f test) then]}."
  [case-f test-f tests thens]
  (into1 (sorted-map)
    (zipmap (map case-f tests)
            (map vector
              (map test-f tests)
              thens))))

(defmacro case 
  "Takes an expression, and a set of clauses.

  Each clause can take the form of either:

  test-constant result-expr

  (test-constant1 ... test-constantN)  result-expr

  The test-constants are not evaluated. They must be compile-time
  literals, and need not be quoted.  If the expression is equal to a
  test-constant, the corresponding result-expr is returned. A single
  default expression can follow the clauses, and its value will be
  returned if no clause matches. If no default expression is provided
  and no clause matches, an IllegalArgumentException is thrown.

  Unlike cond and condp, case does a constant-time dispatch, the
  clauses are not considered sequentially.  All manner of constant
  expressions are acceptable in case, including numbers, strings,
  symbols, keywords, and (Clojure) composites thereof. Note that since
  lists are used to group multiple constants that map to the same
  expression, a vector can be used to match a list if needed. The
  test-constants need not be all of the same type."
  {:added "1.2"}

  [e & clauses]
  (let [ge (with-meta (gensym) {:tag Object})
        default (if (odd? (count clauses)) 
                  (last clauses)
                  `(throw (IllegalArgumentException. (str "No matching clause: " ~ge))))]
    (if (> 2 (count clauses))
      `(let [~ge ~e] ~default)
      (let [pairs (partition 2 clauses)
            assoc-test (fn assoc-test [m test expr]
                         (if (contains? m test)
                           (throw (IllegalArgumentException. (str "Duplicate case test constant: " test)))
                           (assoc m test expr)))
            pairs (reduce1
                       (fn [m [test expr]]
                         (if (seq? test)
                           (reduce1 #(assoc-test %1 %2 expr) m test)
                           (assoc-test m test expr)))
                       {} pairs)
            tests (keys pairs)
            thens (vals pairs)
            mode (cond
                   (every? #(and (integer? %) (<= Integer/MIN_VALUE % Integer/MAX_VALUE)) tests)
                   :ints
                   (every? keyword? tests)
                   :identity
                   :else :hashes)]
        (condp = mode
          :ints
          (let [[shift mask imap switch-type] (prep-ints tests thens)]
            `(let [~ge ~e] (case* ~ge ~shift ~mask ~default ~imap ~switch-type :int)))
          :hashes
          (let [[shift mask imap switch-type skip-check] (prep-hashes ge default tests thens)]
            `(let [~ge ~e] (case* ~ge ~shift ~mask ~default ~imap ~switch-type :hash-equiv ~skip-check)))
          :identity
          (let [[shift mask imap switch-type skip-check] (prep-hashes ge default tests thens)]
            `(let [~ge ~e] (case* ~ge ~shift ~mask ~default ~imap ~switch-type :hash-identity ~skip-check))))))))

========
LispReader.EvalReader

支持类名，构造函数调用，静态方法调用，var调用，和特殊形式(var xxx) 。

==
示例：

(def a (fn [x] (+ 2 x)))

;; 序列视为调用
;; 调用var
#=(a 3)
;= 5

;; 调用java静态方法
#=(java.lang.System/getProperties)


;; 符号视为类名，返回类
#=java.lang.Object
;= java.lang.Object

;; 特殊形式只支持var
#=(def b 2)
;= java.lang.RuntimeException: Can't resolve def

;; 必须带命名空间
#=(var a)
;= java.lang.NullPointerException

#=(var org.hxzon.clj.rpggame/a)
;= #'org.hxzon.clj.rpggame/a


========
(a 5)

经过LispReader.ListReader解析，得到一个列表(a 3)

然后送入
Object clojure.lang.Compiler.load(Reader rdr, String sourcePath, String sourceName)
求值。

在
Object clojure.lang.Compiler.eval(Object form, boolean freshLoader)
中，被转成一个匿名无参函数，即：

(fn* [] (a 3))

它会生成FnExpr，求值得到一个函数，再调用这个函数，得到值 5 。

对比下 #= 的读取期求值：EvalReader 直接返回 5 。

========
特殊形式quote

(quote x)
;= x

(symbol? (quote x))
;= true

'(+ x x)
;= (+ x x)

(list? '(+ x x))
;= true

(list '+ 'x 'x)
;= (+ x x)

''x
;= (quote x)

'@x
;= (clojure.core/deref x)

'#(+ % %)
;= (fn* [p1__3162792#] (+ p1__3162792# p1__3162792#))

'`(a b ~c)
;= (seq (concat (list (quote user/a))
;= (list (quote user/b))
;= (list c))) 




