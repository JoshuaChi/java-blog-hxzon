（hxzon学习笔记）clojure-流程控制

补充by hxzon
======

clojure-基本语法-流程控制
http://dead-knight.iteye.com/blog/1828668
http://dead-knight.iteye.com/blog/1829618

hxzon摘要：

1，标准流程控制
if，if-not，if-let，
when，when-not，when-let，
cond，condp，cond-> ，cond->> ，
case，do，
loop..recur。
while（循环）。

if-some
when-first
when-some
as->

==
2，异常处理
try..catch..finally，throw。
assert。

3，基于函数的流程控制
repeatedly（重复执行函数），iterate（返回延迟序列）。

4，基于序列的流程控制。
dotimes，doseq，for。

5，or，and，not。

============
一、标准的流程控制 

====
1，if
(if test then)
(if test then else)

if条件中除了false和nil，其他都为true： 

user=> (if true "true")  
"true"  

user=> (if 0 "true")  
"true"  

user=> (if "" "true")  
"true"  

user=> (if nil "true")  
nil  

user=> (if false "true")  
nil  

====
1.1，if-not

user=> (if-not (zero? 0) "no" "yes")  
"yes"  
user=> (if (not (zero? 0)) "no" "yes")  
"yes"  

====
1.2，if-let
(if-let [x test] then else)

即 (let [x test] (if x then else)) 的缩写。

user=> (defn if-let-test [arg] (if-let [x arg] "true" "false"))
#'user/if-let-test  

user=> (if-let-test 1)  
"true"  
user=> (if-let-test nil)  
"false"  
user=> (if-let-test false)  
"false"  

==
if-let

macro
Usage: (if-let bindings then)
       (if-let bindings then else & oldform)
bindings => binding-form test

If test is true, evaluates then with binding-form bound to the value of test, if not, yields else
（hxzon：绑定之后，最多只能有两个形式。oldform没用，只是用来检查参数个数。）

user=> (defn sum-all-even-number [all-number]
           (if-let [all-even-number (filter even? all-number)]
               (reduce + all-even-number)
               0))
#'user/sum-all-even-number

（hxzon：这里test表达式为(filter even? all-number)，找出偶数，如果含有偶数，整体为真，则绑定到all-even-number。）

user=> (sum-all-even-number [1 2 3 4 5 6 7 8 9])
20  ; 2 + 4 + 6 + 8

user=> (sum-all-even-number [1 3 5 7 9])
0


========
2，when

when没有else子句，如果when后面第一个参数为true，则执行条件后的所有语句，否则返回nil。 

user=> (when false (println "is true") "return true")  
nil  

user=> (when true (println "is true") "return true")  
is true  
"return true"  

user=> (def has-value (when true (println "hello world") "returned value"))  
hello world  
#'user/has-value  

user=> has-value  
"returned value"  

====
2.1，when-not

user=> (when-not  false (println "is true") "return true")  
is true  
"return true"  

user=> (when-not true (println "is true") "return true")  
nil  

====
2.2，when-let
(when-let [x test] body)

即 (let [x test] (when x body)) 的缩写。

user=> (when-let [a true] (println "true") "return true")  
true  
"return true"  

user=> (when-let [a false] (println "true"))  
nil  

user=> (when-let [a nil] (println "true"))  
nil  


========
3，cond

(cond test1 expr1 test2 expr2 :else expr-else)

即 
if test1 return expr1
else if test2 return expr2
else return expr-else

user=> (defn f [n] (cond (< n 0) "<0" (< n 10) "<10" :else ">=10"))  
#'user/f  

user=> (f -2)  
"<0"  

user=> (f 2)  
"<10"  

user=> (f 10)  
">=10"  

====
3.1，condp
macro
Usage: (condp pred expr & clauses)

Takes a binary predicate, an expression, and a set of clauses.
pred是一个两元谓词。

Each clause can take the form of either:

test-expr result-expr
test-expr :>> result-fn （hxzon：原文为 result-expr :>> result-fn ）

hxzon：

第一种形式
(condp pred expr test1 result1 test2 result2)
即
if (pred test1 expr) return result1
else if(pred test2 expr) return result2

第二种形式
(condp pred expr 
  test1 :>> fn1
  test2 :>> fn2)
即
let a= (pred test1 expr)
if a return (fn1 a)
else let a =(pred test2 expr)
if a return (fn2 a)


Note :>> is an ordinary keyword.
（ordinary，普通。）
每个子句或者含有测试表达式和结果表达式两部分，
或者含有 test-expr  :>> result-fn 三部分
（这里，:>> 只是一个普通关键字，因为clojure只能基于参数个数重载）。

For each clause, (pred test-expr expr) is evaluated. 
pred以expr表达式和每个子句的测试表达式求值。
If it returns logical true, the clause is a match. 
如果谓词返回真，这个子句匹配。
If a binary clause matches, the result-expr is returned, 
如果子句是两部分，返回子句的result-expr的值。

if a ternary clause matches, its result-fn,
which must be a unary function, is called with the result of the predicate as its argument, 
the result of that call being the return value of condp. 
如果子句是三部分，
子句的result-fn部分必须是一元函数，将谓词表达式的值作为它的参数，返回result-fn的值。

A single default expression can follow the clauses,
and its value will be returned if no clause matches. 
在最后，可以有一个没有测试表达式的子句，作为默认值。
If no default expression is provided and no clause matches, 
an IllegalArgumentException is thrown.
如果没有子句匹配，也没有提供默认值，将抛出异常。

(defrecord Point [x y]
    Matrix
    (lookup [pt i j]
        (when (zero? j)
            (case i
                  0 x
                  1 y)))
    (update [pt i j value]
        (if (zero? j)
            (condp = i
                0 (Point. value y)
                1 (Point. x value))
            pt))
    (rows [pt] [[x] [y]])
    (cols [pt] [[x y]])
    (dims [pt] [2 1]))

(condp some [1 2 3 4]
         #{0 6 7} :>> inc
         #{4 5 9} :>> dec			; 4 在 [1 2 3 4]中，返回4，再(dec 4) 得到 3
         #{1 2 3} :>> #(+ % 3))
;= 3

(some #{0 6 7}  [1 2 3 4] )
;= nil
(some #{4 5 9} [1 2 3 4])
;= 4

====
3.2，cond->
macro
Usage: (cond-> expr & clauses)

hxzon：(cond-> init test1 body1 test2 body2 test3 body3 ...)
即
tmp = init
if test1 
tmp = body1(tmp)
if test2
tmp = body2(tmp)

Takes an expression and a set of test/form pairs. 
Threads expr (via ->) through each form for which the corresponding test expression is true. 
一个初始表达式和一系列子句，每个子句含测试表达式和执行体。
顺序测试每个子句的test，如果为真，将上一次为真的form的值放入本子句的form的第2个位置。

Note that, unlike cond branching, 
cond-> threading does not short circuit after the first true test expression.

和cond不一样，cond->不是短路的。

user=> (cond-> 1
               true inc			;true为逻辑真，(inc 1)得到2。
               false (* 42) 		;false为逻辑假，不执行。
               (= 2 2) (* 3)) 		;(= 2 2)为逻辑真，(* 2 3)得到6。
6

====
3.3，cond->>
macro
Usage: (cond->> expr & clauses)

Takes an expression and a set of test/form pairs. 
Threads expr (via ->>) through each form for which the corresponding test expression is true.
和cond-> 一样，但是放入位置为最后。

Note that, unlike cond branching, 
cond->> threading does not short circuit after the first true test expression.
和cond不一样，cond->>不是短路的。

========
4，case
case可以简单理解为java中switch的case，如下 

user=> (let [mystr "hello"];首先绑定mystr的值为hello  
          (case mystr    
            "" 0   
            "hello" (count mystr)));case用于匹配mystr的值  
5       

user=> (let [mystr "no match"]   
          (case mystr    
                "" 0   
                "hello" (count mystr)   
                "default")) ;最后一个表达式只有匹配不成功时才执行  
"default"  

==
case可以用列表一次匹配多个值： 

user=> (defn f [x] (case x  
       (5 10) "*5"  
       (3 6 9) "*3"  
       "others"))  
#'user/f  

user=> (f 5)  
"*5"  

user=> (f 10)  
"*5"  

user=> (f 6)  
"*3"  

user=> (f 1)  
"others"  

========
5，do
do执行多条语句，返回最后一条语句值 

user=> (def v (do (println 123) (println 321) -1))  
123  
321  
#'user/v  

user=> v  
-1  

========
6，loop、recur

如果递归的层次太深的话，那么可能会产生内存不足的情况。
所以一些编程语言利用 “tail call optimization” (TCO)的技术来解决这个问题。
在Clojure里面避免这个问题的一个办法是使用loop 和recur。 

;定义递归语句完成10+9+……1=55  
user=> (loop [sum 0 cnt 10] (if (= cnt 0) sum (recur (+ cnt sum) (dec cnt))))  
55  

--
(def factorial
  (fn [n]
    (loop [cnt n acc 1]
       (if (zero? cnt)
            acc
          (recur (dec cnt) (* acc cnt))))))

（hxzon：
loop建立了一个递归点。
初始时，用n和1初始化cnt和acc。
执行到recur时，cnt和acc重新绑定为（dec cnt）和（* acc cnt），
再次回到loop处开始执行。
）

--
loop/recur 组合把一个看似递归的调用变成一个迭代，迭代不需要占用栈空间。 
loop special form 跟let special form 类似的地方是它们都会建立一个本地binding，但是同时它也建立一个递归点，
而这个递归点就是recur的参数里面的那个函数。

loop给这些binding一个初始值。
对recur 的调用使得程序的控制权返回给loop， 并且给那些本地binding赋了新的值。
给recur传递的参数一定要和loop所创建的binding的个数一样。
同样recur只能出现在loop这个special form的最后一行。

--
recur
special form
Usage: (recur exprs*)

Evaluates the exprs in order, then, in parallel, rebinds the bindings of the recursion point to the values of the exprs.
Execution then jumps back to the recursion point, a loop or fn method.
loop 和 fn 都能建立递归点。

Please see http://clojure.org/special_forms#recur

--
loop
special form
Usage: (loop [bindings*] exprs*)

Evaluates the exprs in a lexical context in 
which the symbols in the binding-forms are bound to their respective init-exprs or parts therein. 
Acts as a recur target.

========
7，while
macro
Usage: (while test & body)

Repeatedly executes body while test expression is true. 
Presumes some side-effect will cause test to become false/nil. 
Returns nil.
当test表达式为true时不断执行body，确保test能变为false或nil。
返回nil。

========
========
更多

========
if-some

macro
Usage: (if-some bindings then)
       (if-some bindings then else & oldform)
bindings => binding-form test

If test is not nil, evaluates then with binding-form bound to the
value of test, if not, yields else


========
when-first

macro
Usage: (when-first [x xs] & body)

Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once

(when-first [[a b] (nil 1)] (+ a b))
;; java.lang.IllegalArgumentException: Can't call nil

(when-first [[a b] nil] (+ a b))
;; nil

(when-first [a 1] (+ a 1))
;; java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long



========
when-some

macro
Usage: (when-some bindings & body)
bindings => binding-form test

When test is not nil, evaluates body with binding-form bound to the
value of test

(when-some [[a b] [1 2]] (+ a b))
;; 3

(when-some [[a b] nil] (+ a b))
;; nil

========
as->

macro
Usage: (as-> expr name & forms)

Binds name to expr, evaluates the first form in the lexical context
of that binding, then binds name to that result, repeating for each
successive form, returning the result of the last form.

expr作为name的初始值，计算第一个形式，
作为name的新值，再计算下一个形式，依此类推。
返回最后一个形式的值。

(as-> 1 a (inc a) (+ 2 a))
;; 4

