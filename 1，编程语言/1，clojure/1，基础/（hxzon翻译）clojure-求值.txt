（hxzon翻译）clojure-求值

by hxzon
http://clojure.org/evaluation
=========
Evaluation

Evaluation can occur in many contexts:
求值可发生在以下场景：
Interactively, in the REPL
repl的交互时
On a sequence of forms read from a stream, via load / load-file / load-reader / load-string
加载文件和字符流时
Programmatically, via eval
eval调用

Clojure programs are composed of expressions. 
Every form not handled specially by a special form or macro is considered by the compiler to be an expression, which is evaluated to yield a value. 
There are no declarations or statements, although sometimes expressions may be evaluated for their side-effects and their values ignored.
所有的形式都是表达式，没有声明，没有语句。
In all cases, evaluation is the same - a single object is considered by the compiler, evaluated, and its result returned. 
If an expression needs to be compiled, it will be. 
There is no separate compilation step, nor any need to worry that a function you have defined is being interpreted. 
Clojure has no interpreter.
没有解释器。

====
Strings, numbers, characters, true, false, nil and keywords evaluate to themselves.
字符串，数字，字符，true，false，nil，关键字，求值成它们自身。

A Symbol is resolved:
符号被识别成：
If it is namespace-qualified, the value is the value of the binding of the global var named by the symbol. 
It is an error if there is no global var named by the symbol, or if the reference is to a non-public var in a different namespace.
如果它是命名空间限定的（使用斜杠），求值成以它为名的全局var的绑定值。

If it is package-qualified, the value is the Java class named by the symbol. 
It is an error if there is no Class named by the symbol.
如果包限定的（使用点号），求值成java类。

Else, it is not qualified and the first of the following applies:
如果它未限定：

If it names a special form it is considered a special form, and must be utilized accordingly.
如果是特殊操作符，特殊处理。

A lookup is done in the current namespace to see if there is a mapping from the symbol to a class. 
If so, the symbol is considered to name a Java class object. 
Note that class names normally denote class objects, but are treated specially in certain special forms, e.g. '.' and new.
查看是否已作为类的短名，导入到当前空间。
注意，点和new操作符会对类名特殊处理。

If in a local scope (i.e. in a function definition), a lookup is done to see if it names a local binding (e.g. a function argument or let-bound name). 
If so, the value is the value of the local binding.
查看是否是本地绑定，如果是本地绑定，求值成本地绑定值。

A lookup is done in the current namespace to see if there is a mapping from the symbol to a var. 
If so, the value is the value of the binding of the var referred-to by the symbol.
It is an error.
在当前命名空间里查找以它为名的var，求值成该var的绑定值。

==
If a Symbol has metadata, it may be used by the compiler, but will not be part of the resulting value.
如果符号有元数据，可能被编译器使用，但元数据不是值的一部分。

====
Vectors, Sets and Maps yield vectors and (hash) sets and maps whose contents are the evaluated values of the objects they contain. 
The same is true of metadata maps. 
If the vector or map has metadata, the evaluated metadata map will become the metadata of the resulting value.
向量，集，映射求值成向量，集，映射。

user=> (def x 1)
user=> (def y 2)
user=> ^{:x x} [x y 3]
^{:x 1} [1 2 3]

An empty list () evaluates to an empty list.
空列表求值成空列表。

Non-empty Lists are considered calls to either special forms, macros, or functions. 
A call has the form (operator operands*).
非空列表视为调用。

Special forms are primitives built-in to Clojure that perform core operations. 
If the operator of a call is a symbol that resolves to the name of a special form, the call is to that special form. 
Each form discussed individually under Special Forms.

Macros are functions that manipulate forms, allowing for syntactic abstraction. 
If the operator of a call is a symbol that names a global var that is a macro function, 
that macro function is called and is passed the unevaluated operand forms. 
The return value of the macro is then evaluated in its place.
宏是特殊函数，操作“形式”本身。
宏的返回值随后求值。

If the operator is not a special form or macro, the call is considered a function call. 
Both the operator and the operands (if any) are evaluated, from left to right. 
The result of the evaluation of the operator is then cast to IFn (the interface representing Clojure functions), 
and invoke() is called on it, passing the evaluated arguments. 
The return value of invoke() is the value of the call expression. 
If the function call form has metadata, it may be used by the compiler, but will not be part of the resulting value.

Note that special forms and macros might have other-than-normal evaluation of their arguments, 
as described in their entries under Special Forms.

Any object other than those discussed above will evaluate to itself.
除了上述已提到的，所有其他对象，求值成它们自身。

====

(load classpath-resource ...)
(load-file filename)
(load-reader reader)
(load-string string)

The above describes the evaluation of a single form. 
The various load forms will sequentially read and evaluate the set of forms contained in the source. 
Such sets of forms usually have side effects, often on the global environment, defining functions etc. 
The loading functions occur in a temporary context, in which *ns* has a fresh binding.
加载函数在一个临时的上下文执行，*ns*有一个全新的临时绑定。 
That means that, should any form have an effect on that var (e.g. `in-namespace), 
the effect will unwind at the completion of the load. 
load et al return the value produced by the last expression.
load返回最后一个表达式的值。

====
(eval form)

Evaluates the form data structure (not text!) and returns the result.
求值一个“形式”（不是文本！），并返回它的值。

(eval (list + 1 2 3))
-> 6

