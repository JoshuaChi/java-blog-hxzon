（hxzon学习笔记）clojure-var，动态绑定

by hxzon
《clojure编程》第4章：多线程和并发-Vars

----------
hxzon摘要：

1，动态作用域（^:dynamic）。
定义var时，可将其标记为动态的。
接下来就可以使用 binding，在本线程上给这个var设置一个新值，（不影响其它线程）。
注：let则是一个完全不同的“标识”，只是名字刚好相同，所以遮住了同名的全局“标识”。

binding可以用于实现类似AOP编程这样的效果（重定义函数）。

2，
set! ，设置动态var的本线程绑定值，可利用这点，使得下层函数给上层函数传递值。

(set! *response-code* response-code)

3，动态绑定传播。（需认真理解。）

========
1，动态作用域

一个var的作用域在定义它的形式之内。

(let [a 1
	b 2]
	(println (+ a b)) 
	(let [b 3
		+ -]
		(println (+ a b)))) 
;= 3
;= -2

内层定义了两个绑定，它们“遮盖”了外层的绑定。
（hxzon：
相当于其它语言的本地局部变量，但它们不是变量。
所有的本地绑定都是不可变的。内层可以“遮盖”外层的值，但是无法改变一个let绑定的值。
另，loop和recur满足你在每个循环都对本地值进行改变的需求。
）

==
每个var有一个根绑定，是使用def及其变种定义var的时候赋予的值，
同时也是一般情况下对它解引用得到的值。

但如果把一个var定义成动态的（加上:dynamic元数据），
就可以利用binding在当前线程上覆盖这个根绑定的值（不影响其它线程）。

(def ^:dynamic *max-value* 255)
;= #'user/*max-value*

(defn valid-value?
	[v]
	(<= v *max-value*))
;= #'user/valid-value?

(binding [*max-value* 500]
	(valid-value? 299))
;= true

(binding [*max-value* 500]
	(println (valid-value? 299))
	(doto (Thread. #(println "in other thread:" (valid-value? 299)))
		.start
		.join))
;= true
;= in other thread: false

注：对于那些你期望通过binding来对根绑定进行覆盖的动态var，一般在命名时以星号开头和结尾。

--
(def ^:dynamic *var* :root)
;= #'user/*var*

(defn get-*var* [] *var*)
;= #'user/get-*var*

(binding [*var* :a]
    (binding [*var* :b]
        (binding [*var* :c]
            (get-*var*))))
;= :c

====
2，动态作用域被广泛使用在各种类库及clojure本身的实现里，
用来提供一种修改api默认配置的方法，本质上其实是给函数提供了一个隐式的参数。

反过来，也可以通过动态作用域，让下层函数给上层函数返回一些东西。

set! ，修改本线程的绑定值。

（hxzon：使用binding，上层给下层传递值，
使用set!，下层给上层传递值。）

示例：下层给上层返回一些值：

(def ^:dynamic *response-code* nil)

(defn http-get
  [url-string]
  (let [conn (-> url-string java.net.URL. .openConnection)
        response-code (.getResponseCode conn)]
    (when (thread-bound? #'*response-code*)
      (set! *response-code* response-code))     ;; 注意！set! ，替换动态var在本线程的绑定值。
;; 因此通过binding建立这个绑定的——不管这个调用者是在调用栈的上一层还是上50层的函数，都可以拿到这个“返回值”。
;; 这种方式，简单的如本例，用来返回一些附加的值，复杂的，可以实现非本地的返回机制。
    (when (not= 404 response-code) (-> conn .getInputStream slurp))))

(http-get "http://google.com")
;= "<!doctype html><html><head>..."

*response-code*
;= nil

(binding [*response-code* nil]
  (let [content (http-get "http://google.com/bad-url")]
    (println "Response code was:" *response-code*)
    ; ... do something with `content` if it is not nil ...
    ))
;= Response code was: 404
;= nil

====
3，绑定传播（hxzon注意）

动态作用域会通过clojure原生的并发形式进行传播。
clojure的动态var绑定可以在线程之间进行传播，这种机制叫做“绑定传播”
——当使用agent（通过send和send-off），future以及pmap和它的变种的时候。

(binding [*max-value* 500]
	(println (valid-value? 299))
	@(future (valid-value? 299)))
; true
;= true

虽然valid-value?是在另外一个独立的线程上被调用的，但是future把这个动态作用域传播到了这个线程上面。

--
(def ^:dynamic *num* 1)

(binding [*num* 2] (future (println *num*)))
;; prints "2", not "1"

==
不过要注意，虽然pmap是支持绑定传播的，但是一般的惰性序列是不支持的。

(binding [*max-value* 500]
	(map valid-value? [299]))
;= (false)

一种解决方法是，手动将这个动态作用域“传播”到惰性序列中“计算实际用到这个动态var的”地方。

(map #(binding [*max-value* 500]
		(valid-value? %))
	[299])
;= (true)

========
with-bindings
macro
Usage: (with-bindings binding-map & body)

Takes a map of Var/value pairs. Installs for the given Vars the associated
values as thread-local bindings. The executes body. Pops the installed
bindings after body was evaluated. Returns the value of body.

将绑定添加到本地线程。
执行完，弹出这些绑定。
hxzon：与binding的区别在于，binding中的绑定列表是符号，
而with-bindings中的绑定已经是var。

(def ^:dynamic *a* nil)
(defn af [] *a*)

(with-bindings {(var *a*) 1} (af))
;; 1

====
with-bindings*

function
Usage: (with-bindings* binding-map f & args)

Takes a map of Var/value pairs. Installs for the given Vars the associated
values as thread-local bindings. Then calls f with the supplied arguments.
Pops the installed bindings after f returned. 
Returns whatever f returns.

将绑定添加到本地线程。
执行完 f ，弹出这些绑定。

====
bound-fn*
(bound-fn* f)

返回一个新函数，它捕获了当前线程的绑定。


====
bound-fn

====
binding-conveyor-fn

====
(get-thread-bindings)

Get a map with the Var/value pairs which is currently in effect for the
current thread.

