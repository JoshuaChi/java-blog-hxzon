（hxzon学习笔记）clojure-关键字，符号及相关函数

by hxzon
《clojure编程》第1章：进入clojure仙境-关键字

====
hxzon学习笔记：

keyword，symbol，name，intern，namespace，keyword?，symbol? 

========
1，关键字

关键字求值成它们自身。
关键字经常作为访问器来获取它们对应的值。

关键字是一个内部字符串；
两个同样的关键字指向同一个对象；
通常被用来作为map的key。 

语法上，关键字始终以冒号开头。
如果关键字包含斜杠，表示这个关键字是命名空间限定的。
如果关键字以两个冒号开头，表示是当前命名空间的关键字。
如果关键字以两个冒号开头，同时又包含斜杠，表示是某个特定命名空间里的关键字。
这个设计与xml里的命名空间实体的用法和动机是一样的。

命名空间限定的关键字，在多重方法以及isa?体系里面有很多的使用。

关键字中的点号没有特别意义，只是名字的一部分。

hxzon：
(= :x ::x) false，一个无命名空间，一个当前命名空间
(= :clojure.core/y ::clojure.core/y) true

====
1.1，创建关键字，keyword函数。 

user=> (keyword 'foo)  
:foo  

user=> (keyword "foo")  
:foo  

user=> (keyword "user" "foo")  
:user/foo  

user=> (keyword "abc def")  
:abc def  	（hxzon：含有空格如何理解？）

user=> (keyword "abcdef")  
:abcdef  

user=> (keyword "/abc/def/ghi")  
:/abc/def/ghi  

========
2，符号

Symbol是用来给东西命名的。
这些名字是被限制在名字空间里面的，要么是指定的名字空间，要么是当前的名字空间。 

====
2.1，创建符号，symbol函数。 

user=> (symbol 'foo)  
foo  

user=> (symbol "foo")  
foo  

user=> (symbol "clojure.core" "foo")  
clojure.core/foo  

user=> (symbol "abc def")  
abc def  

user=> (symbol "abcdef")  
abcdef  

=========
3，关键字和符号相关函数。

====
3.1，name： 

name函数接受一个参数，如果该参数为字符串，则直接返回该参数。
如果不是字符串，则返回名称值。

user=> (name :foo)  
"foo"  

user=> (name 'x)  
"x"  

user=> (name "x")  
"x"  

====
3.2，intern: 

intern函数有两个实现：(intern ns name)、(intern ns name val)。 
根据命名空间ns中查找是否存在符号name，不存在，则创建；
最后一个参数val作为值与符号进行绑定。

user=> (intern 'user 'x)  
#'user/x  

user=> x  
#<Unbound Unbound: #'user/x>  

user=> (intern 'user 'x "1")  
#'user/x  

user=> x  
"1"  

====
3.3，namespace： 

namespace函数根据给定的符号、或者关键字返回所在的命名空间名称，如果当前没有，则返回nil。

user=> (symbol 'xx)  
xx  

user=> (namespace 'user/xxx)  
"user"  

user=> (namespace 'xxx)  
nil  

user=> (def x :val)  
#'user/x  

user=> (namespace 'x)  
nil  

user=> (namespace 'user/x)  
"user"  

====
3.4，keyword?、symbol?用于检查指定的参数是否为关键字、或者是符号，是则返回true，否则返回false。 

user=> (symbol? 'x)  
true  

user=> (symbol? "x")  
false  

user=> (keyword? 'x)  
false  

user=> (keyword? :x)  
true  

user=> (keyword? "x")  
false  

参考资料：
clojure-基本语法-符号及关键字
http://dead-knight.iteye.com/blog/1830465

========
hxzon：

find-keyword
function
Usage: (find-keyword name)
       (find-keyword ns name)

Returns a Keyword with the given namespace and name if one already
exists.  This function will not intern a new keyword. If the keyword
has not already been interned, it will return nil.  Do not use :
in the keyword strings, it will be added automatically.

====
find-ns
function
Usage: (find-ns sym)

Returns the namespace named by the symbol or nil if it doesn't exist.

====
find-var
function
Usage: (find-var sym)

Returns the global var named by the namespace-qualified symbol, or
nil if no var with that name.

====
ns-resolve
function
Usage: (ns-resolve ns sym)
       (ns-resolve ns env sym)

Returns the var or Class to which a symbol will be resolved in the
namespace (unless found in the environment), else nil.  Note that
if the symbol is fully qualified, the var/Class to which it resolves
need not be present in the namespace.
在指定的命名空间中，查找该符号所对应的var或类。
注意，如果该符号是命名空间限定的，则它不必指定的命名空间。

====
resolve
function
Usage: (resolve sym)
       (resolve env sym)

same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)

