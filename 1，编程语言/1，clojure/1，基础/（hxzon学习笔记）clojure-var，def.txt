（hxzon学习笔记）clojure-var，def

by hxzon
《clojure编程》第4章：多线程和并发-Vars

var，def

----------
hxzon摘要：

1，定义var（def），私有var（^:private），私有函数（defn-），常量（^:const）。
（hxzon：var是一个存储位置，不同的存储位置可以同名，它们会相互遮蔽。）

2，动态绑定，另见。

--
3，前置声明：declare（定义var时先不给它赋值）。

4，defonce（只赋值一次）。

--
5，
varA捕获当时的值。
#'varA捕获此时的值。

(defn a [x] (+ 5 x))
;= #'user/a

(def b1 (partial a 5))    ;; 作为值，是当时的值
;= #'user/b1

(def b2 (partial #'a 5))
;= #'user/b2

(defn c1 [x]
  (a x))    ;; 作为函数调用，总是最新定义

(defn c2 [x]
    (#'a x))    ;; 与 c1 相同

(b1)
;= 10

(b2)
;= 10

(c1 5)
;= 10

(c2 5)
;= 10

(defn a [x] (+ 10 x))
;= #'user/a

(b1)
;= 10

(b2)
;= 15

(c1 5)
;= 15

(c2 5)
;= 15

hxzon补充理解：

(def b1 (partial a 5)) 求值时是 (partialFn aFn 5)，
b1 绑定到一个匿名函数，它捕获了aFn

(def b2 (partial #'a 5)) 求值时是 (partialFn aVar 5)，
aVar也是函数，(aVar xx)等价于((deref aVar) xx)，
b2 绑定到一个匿名函数，它捕获了aVar，通过(deref aVar)就总是得到最新的值

======
根绑定：变量的初始值称为根绑定。
当你使用def和defn定义一个对象时，对象就存贮在变量中。
--
绑定：函数调用时，传入参数值绑定到参数名称，函数参数绑定有一个词法作用域：仅在函数体范围内可见。
特殊形式let可以创建一组词法绑定：
(let [bingdings*] exprs*)

其中bingdings在exprs中有效，let返回exprs最后一个表达式的值。
--
Interning：命名空间维护了每个Var对象的全局符号映射。
使用def定义变量时，如果没有在当前的命名空间找到该符号，就创建一个，否则使用现有的。
创建或者寻找的过程被称作interning。
（hxzon：intern的意思是扣留、羁押，这里指放入常量池。）

========
1，clojure中有4种引用类型可以用来表示标识：var，ref，agent，atom。

2，var跟其它引用类型的不同在于，var的状态不是在时间尺度上维护的，
它提供的是一个命名空间内全局的实体，可以在每个线程上把这个实体绑定到不同的值。

clojure中，用var来表示稳定的标识。
(def sarah {:name "Sarah" :age 25 :wears-glasses? false})
我们可以说，Sarah是由var sarah来标识的。

clojure对一个符号进行求值，其实就是在当前命名空间寻找名字是这个符号的那个var，
并对它解引用获取它的值。

var是一种可修改的内存地址，从而可以保存任何值。
在var被定义的命名空间里，var和一个符号相关联，
通过符号来使用这个var，得到这个var的值。

====
3，定义var：使用def或者它的引申物。

user=> (def x "just a value, nothing else." 10086)
#'user/x

user=> (doc x)
-------------------------
user/x
  just a value, nothing else.
  nil

====
4，私有var

通过给var添加一个:private的元数据。

一个私有var有以下特性：
-1，在其它命名空间里面只能通过全限定名称对其进行访问。
-2，要访问它的值只能通过解引用。

（hxzon：即只能 @#'xx/yy 而不能 xx/yy ）

(def ^:private everything 42)
;= #'user/everything

(ns other-namespace)
;= nil

(refer 'user)
;= nil

everything
;= #<CompilerException java.lang.RuntimeException:
;= Unable to resolve symbol: everything in this context, compiling:(NO_SOURCE_PATH:0)>

@#'user/everything
;= 42

--
user=> (def ^{:private true} v 123)
#'user/v

user=> (meta #'v)
{:ns #<Namespace user>, :name v, :private true, :line 36, :file "NO_SOURCE_PATH"}

==
5，私有函数
通过defn-来定义，和defn完全一样，只是会自动加上一个:private元数据。

6，文档字符串也只是var上的元数据而已。

====
7，常量
给var加上一个:const元数据，但它不只是一个简单标记，它在运行时会有一些实质影响：
任何对于常量var的引用都不是在运行时求值的（普通var则是），
这些引用在编译期会被全部替换成这个常量所对应的值。（hxzon注意）

(def ^:const max-value 255)
;= #'user/max-value

(defn valid-value?
	[v]
	(<= v max-value))
;= #'user/valid-value?

(def max-value 500)
;= #'user/max-value
这里重新定义了var，但不会影响valid-value? 。

(valid-value? 299)
;= false

========
8，修改根值

var不是变量。
def定义的都是顶级var，是全局可访问的。

var从本质上来说，是被设计用来保存一些值，然后直到程序或者repl结束的时候都不再改变。
如果你想要一种可以改变的东西，可以尝试clojure提供的其它的引用类型。

====
alter-var-root

但是，在某些情况下，如果确实需要对一个var的根绑定进行修改，可以使用alter-var-root函数，
它以这个var本身以及一个将要作用在var身上的函数作为参数。

(def x 0)
;= #'user/x

(alter-var-root #'x inc)
;= 1

如果这个var是一个函数，那就可以利用这种机制来实现面向切面的编程。

====
with-redefs

我们也可以使用with-redefs来暂时修改一些var的根绑定，
它会在程序控制流离开它的作用域时，把var的根绑定恢复到之前的状态。
这个对于测试非常有用，
可以让我们对一些函数或者函数所依赖的一些跟环境有关的变量进行mock。

(with-redefs bindings & body)
binding => var-symbol temp-value-expr

Temporarily redefines Vars while executing the body.  The
temp-value-exprs will be evaluated and each resulting value will
replace in parallel the root value of its Var.  After the body is
executed, the root values of all the Vars will be set back to their
old values.  These temporary changes will be visible in all threads.
Useful for mocking out functions during testing.

这种临时替换，其他线程也可见。

====
with-redefs-fn

function
Usage: (with-redefs-fn binding-map func)

Temporarily redefines Vars during a call to func.  Each val of
binding-map will replace the root value of its key which must be
a Var.  After func is called with no args, the root values of all
the Vars will be set back to their old values.  These temporary
changes will be visible in all threads.  Useful for mocking out
functions during testing.


====
with-local-vars
macro
Usage: (with-local-vars name-vals-vec & body)
varbinding=> symbol init-expr

Executes the exprs in a context in which the symbols are bound to
vars with per-thread bindings to the init-exprs.  The symbols refer
to the var objects themselves, and must be accessed with var-get and
var-set

hxzon：用于实现本地变量（可修改）。
符号绑定到var对象本身。

(with-local-vars [a 1]
    (when true (var-set a 2))
    (var-get a))
;; 2

========
9，提前声明：declare

如果定义一个var时不给它赋值，则称这个var是“未绑定”的，
如果你对它进行解引用，它会返回一个“占位符”对象。

(def j)
;= #'user/j
j
;= #<Unbound Unbound: #'user/j>

在你需要先使用var，后续代码再给它赋值的情况下，这个特性很有用。

例如要实现某种类型的算法，它的实现需要交替递归。
或者，你只是想把主要的、公共的api放在源文件的最前面，但这些api需要引用别的帮助函数（这些函数你想放在后面）。

不过，更好的方式是使用declare宏，用它可以明确告诉读者，你是在定义一个未绑定的var，
而且它允许你在一个表达式里面一次定义多个未绑定的var。

(declare complex-helper-fn other-helper-fn) 

(defn public-api-function
	[arg1 arg2]
	...)

(other-helper-fn arg1 arg2 (complex-helper-fn arg1 arg2)) 

(defn- complex-helper-fn 
	[arg1 arg2]
	...)

(defn- other-helper-fn
	[arg1 arg2 arg3]
	...)

========
10，defonce

defonce 是 def 的一个变种：当且仅当给定符号还没有绑定时，它才为这个符号设置绑定：

user=> (defonce s "a string")
#'user/s

user=> s
"a string"

user=> (defonce s "another string")     ; 设置无效
nil

user=> s
"a string"

