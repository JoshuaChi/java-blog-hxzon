（hxzon学习笔记）clojure-定义函数

by hxzon
《clojure编程》第1章：进入clojure仙境-定义函数（fn），函数字面量

-----
hxzon学习笔记：

fn，letfn（局部函数），defn，defn-（私有函数） 。

=======
一、创建函数：

====
1，fn

fn是一个特殊形式，用来创建一个函数。

fn接受let样式的绑定数组，let解构在这里同样适用。

函数可以有多个参数列表
（即函数可以根据参数个数不同进行重载）。
定义多参数列表的函数时，
每套“参数-函数体”都要放在一个单独的括号内。

user=> (fn [] "hello")  
#<user$eval375$fn__376 user$eval375$fn__376@eabd2f>  

user=> ((fn [] "hello"))  
"hello"

user=> ((fn [x] x) "hello") ; 带参数  
"hello"

fn的第一个参数是一个可选的函数名字，
使得可以在函数体中引用函数自己。

(def strange-adder (fn  adder-self-reference
                        ([x] (adder-self-reference x 1))
                        ([x y] (+ x y))))
;= #'user/strange-adder

(strange-adder 10)
;= 11

(strange-adder 10 50)
;= 60

====
2，letfn

用letfn来解决函数定义互相引用的问题。

具名函数使得可以很简单的创建自递归的函数。

一种更极端的情况是，定义两个互相引用的函数。
这可以使用letfn来解决。


(letfn [(odd? [n]
          (if (zero? n)
            false
            (even? (dec n))))
        (even? [n]
          (or (zero? n)
              (odd? (dec n))))]
  (odd? 11))
;= true

注：原书为
(letfn [ (odd? [n]
                (even? (dec n)))
         (even? [n]
            (or (zero? n)
                (odd? (dec n))))] 
       (odd? 11))
;= true
有误。
----
http://clojuredocs.org/clojure_core/clojure.core/letfn

(letfn fnspecs & body)
fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)

Takes a vector of function specs and a body, 
and generates a set of bindings of functions to their names. 
All of the names are available in all of the definitions of the functions, as well as the body.
绑定中的名字，在整个形式中都可用。

user=> (letfn [(twice [x]
                 (* x 2))
               (six-times [y]
                 (* (twice y) 3))]
         (println "Twice 15 =" (twice 15))
         (println "Six times 15 =" (six-times 15)))
Twice 15 = 30
Six times 15 = 90
nil

外部不可见。
;; Unable to resolve symbol: twice in this context
user=> (twice 4)
; Evaluation aborted.

;; Unable to resolve symbol: six-times in this context
user=> (six-times 100)
; Evaluation aborted.

====
3，defn

defn是一个封装了def和fn的宏。

defn 宏用来定义一个函数。
它的参数包括一个函数名字，一个可选的注释字符串，参数列表，然后一个方法体。
而函数的返回值则是方法体里面最后一个表达式的值。
所有的函数都会返回一个值， 只是有的返回的值是nil。

(defn strange-adder
    ([x] (strange-adder x 1))
    ([x y] (+ x y))))

等价于：

(def strange-adder (fn strange-adder
    ([x] (strange-adder x 1))
    ([x y] (+ x y))))

==
user=> (defn f4 "f4 function" [] (println "f4 function"))
#'user/f4  

user=> (f4)  
f4 function  
nil  

user=> (doc f4);通过doc查看函数注释信息  
-------------------------  
user/f4  
([])  
  f4 function  
nil  

--
user=> (defn exp [a f1 b f2 c] (f2 (f1 a b) c));函数作为参数  
#'user/exp  

user=> (exp 5 - 2 + 3)  
6  

--
user=> (defn f [a] (fn [b] (- a b)));函数作为返回值  
#'user/f  

user=> ((f 7) 4)  
3  

====
4，defn-

defn-与defn功能一致，都是用于定义函数的，
但是defn-定义的函数作用域是私有的，而defn定义的函数是公有的。

user=> (ns test1)
nil  

test1=> (defn- foo [] "world");定义私有函数foo，返回字符串world  
#'test1/foo  

test1=> (defn bar [] (str "hello " (foo)));定义公有函数bar，并调用私有函数foo  
#'test1/bar  

test1=> (foo)
"world"  

test1=> (bar)
"hello world"  

test1=> (ns test2);切换到test2命名空间中  
nil  

test2=> (test1/bar)
"hello world"  

test2=> (test1/foo)
;; 调用test1命名空间的foo函数，出现异常，提示test1的foo函数不是公开的
CompilerException java.lang.IllegalStateException: var: #'test1/foo is not public, compiling:(NO_SOURCE_PATH:1)  

要访问私有函数，只能  @#'xx/yy  。

====
5，解构函数参数

见 《（hxzon学习笔记）clojure-函数参数解构》

====
6，前置条件和后置条件

fn提供对函数参数和函数返回值进行检查的前置和后置条件。
这在单元测试以及确保参数正确性方面非常有用。

========
7，函数字面量

简短的函数可以使用#()，即函数字面量，省去了fn，以及参数列表。
%和%1表示第1个参数，%2，%n ..
表示第2、n..个参数；最大的n表示参数个数。

使用 %& 可以定义不定参数， 并且通过 %& 来引用那些剩余的参数。

函数字面量不能嵌套。
函数字面量嵌套会很难读懂，也没法区分参数是属于内层还是外层函数。

函数字面量没有隐式地使用do。

#(do (println (str %1 \^ %2))
     (Math/pow %1 %2))

user=> (#(/ % 3) 4);结果为3/4  
4/3  

user=> (#(/ %2 %1) 3 4);结果为3/4  
4/3  

user=> (#(apply / %&) 3 5 7);结果为3/5/7  
3/35  


========
8，函数相关的函数

====
8.1，fn?

fn?用于检查给定的参数是否为函数，是返回true，否则返回false。

user=> (fn? #("test"))
true  

user=> (fn? +)  
true  

user=> (fn? 1)  
false  

====
8.2，apply

apply的第一参数是一个函数f，剩余的参数，将作为f的参数。
注意，apply的最后一个参数是集合，它将解开传给f。

user=> (apply + [1 2 3 4])
10

====
8.3，comp 

((comp f1 f2 .. fn) arg1 arg2 .. argn)  

就是对参数“从右到左”组合执行所有函数，即： 

(f1 (f2 (.. (fn arg1 arg2 .. argn))))  

举例如下： 

user=> (defn f [x y] (- (* x y)));使用defn定义函数方式  
#user/f  

user=> (f 2 4)
-8  

user=> (def fc (comp - *));使用comp定义组合函数方式  
#user/fc  

user=> (fc 2 4)
-8

====
8.4，partial

((partial  f  arg1 arg2 .. argn)  arga argb .. argz)  

即： 
(f  arg1 arg2 .. argn  arga argb .. argz) 

注意：偏函数的第一个参数是一个函数，后面至少有1个其他参数 。

partial函数称为“偏函数”或者“部分完整函数”，
因为它是不完整的。 

user=> (defn f [n] (* n 10));正常函数
#'user/f

user=> (f 2)
20

user=> (def fp (partial * 10));偏函数
#'user/fp

user=> (fp 2)
20  

====
8.5，constantly 

constantly函数接受一个参数x，并返回一个变参函数，
该变参函数始终返回这个x值。 

user=> (def consf (constantly "a"))
#'user/consf

user=> (consf 1 2 3)
"a"

user=> (consf "a")
"a"

user=> (consf [1 2 3])
"a"

========
9，其它

eval

eval解析表达式数据结构（不是字符串），并返回结果。 

user=> (eval (str "(println 1)"));str函数返回字符串  
"(println 1)"  

user=> (read-string "(println 1)");而read-string函数用于从字符串中读取对象  
(println 1)  

user=>  (eval (read-string "(println 1)"))  
1  

