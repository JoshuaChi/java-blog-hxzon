（内联函数）INLINE FUNCTIONS IN CLOJURE

07 July 2014
http://www.bytopia.org/2014/07/07/inline-functions-in-clojure/

注释by hxzon
========

EDIT: In the comment section Alex Miller advised against using inline functions for now 
as they are subject to change in the future version of Clojure.
先阶段建议避免使用，因为clojure接下来的版本可能会有变化。

Clojure's inline functions is one of the rarely discovered features. 
Unlike any other concept that you can introduce via macros 
they are important enough to be treated specially by the compiler. 
But still many Clojure users have never heard about inlines let alone used them.

In this post I investigate what is an inline function, 
how is it different from macros and when either should be used.

NB: This post is a rewrite of this Gorilla session (you should definitely check Gorilla REPL out, it's awesome).

====
Introduction to inlines

Let's see what Clojure says about inline functions.

=> (doc definline)

-------------------------
clojure.core/definline
([name & decl])
Macro
  Experimental - like defmacro, except defines a named function whose
  body is the expansion, calls to which may be expanded inline as if
  it were a macro. Cannot be used with variadic (&) args.

OK, that is a start. Inline function is like a macro, but it is a function. 
We can try both out on a simple example — a debugging function that takes any value 
(or a symbol, or a form) and returns it as well as printing the result.

(defmacro debug-macro [x]
  `(do
     (println '~x "=" ~x)
     ~x))

=> (debug-macro (+ 1 2))

stdout: Value of (+ 1 2) : 3
3

And with inlines:

(definline debug-fn [x]
  `(do
     (println '~x "=" ~x)
     ~x))

=> (debug-fn (+ 1 2))

stdout: Value of (+ 1 2) : 3
3

So far we see no differences between macros and inlines. 
Both take arguments by name rather than by value, and return arbitrary form that is then executed.

内联函数和宏看起来很相像，都是参数不求值。

====
Going deeper

Macros are expanded as soon as they are spotted by the compiler, 
and they can arbitrarily modify the enclosed forms. 
When you pass some function calls to the macro you have no gurantee that they will be executed. 
Let's take this example:
给宏传一个函数调用，这个函数调用是不求值的，例如：

(defn bar [x y]
  (* x y))

=> (bar 4 6)
24

(defmacro foo [arg]
  `(+ ~@(rest arg)))

=> (foo (bar 4 6))
10

In the example function bar multiplies two numbers, 
and macro foo returns a form that sums all but first elements in the list you pass to it. 
Hence, in the second test bar is never executed as foo just takes second and third element from the list and adds them.

But what if we try to do the same with an inline?

(definline foo-fn [arg]
  `(+ ~@(rest arg)))

IllegalArgumentException Don't know how to create ISeq from:
clojure.lang.Symbol clojure.lang.RT.seqFrom (RT.java:505)

Oops! Let's try another way:

(defn foo-fn
  {:inline (fn [arg] `(+ ~@(rest arg)))}
  [arg]
  :whatever)

=> (foo-fn (bar 4 6))
10

And it works! 
What we did is we created a function with :inline metadata. 
It doesn't matter what the function itself returns because when it is called directly, 
the inline version is used. 
In this case, we achieved the same behavior as with macros.

当这个函数被直接调用时，它是调用 :inline 元数据里面的函数。（hxzon注意）

====
So, what's the point?

It appears that the only significant difference between macros and inline functions 
is that the latter do not support variadic arguments. 
Then why would you need the language to have both? 
To find out the answers we can check how Clojure itself uses inline functions by taking a look at one of them:

(defn pos?
  "Returns true if num is greater than zero, else false"
  {:inline (fn [x] `(. clojure.lang.Numbers (isPos ~x)))
   :added "1.0"}
  [x] (. clojure.lang.Numbers (isPos x)))

This function has both the function body and the inline part, but why? 
You'll understand immediately if you see the bytecode generated for this code:
查看一下以下两种调用方式（直接的和间接的），产生的字节码是不同的。

(pos? 6)

(map pos? [1 -3 8])

Below is the relevant part of the decompiled class:

Numbers.isPos(6L) ? Boolean.TRUE : Boolean.FALSE;
((IFn)const__5.getRawRoot()).invoke(const__3.getRawRoot(), const__9);
...
const__3 = (Var)RT.var("clojure.core", "pos?");
const__5 = (Var)RT.var("clojure.core", "map");
const__9 = (AFn)RT.vector(new Object[] {
            Long.valueOf(1L), Long.valueOf(-3L), Long.valueOf(8L) });

Now it is clear. 
When direct call occurs, the compiler inlines the call, 
but if the function is passed as an argument and later used, function is evaluated normally.

Conclusion

From what we've seen today, inline functions and macros are very much similar. 
This doesn't mean that you should start using inlines in place of macros. 
Actually it is a bad idea to write an inline function that changes the computation flow like a macro 
(because noone expects such thing from a function). 
But if you feel that you can increase your performance with some compile-time precomputation/unrolling 
and you don't want to sacrifice the ability to pass the function around as a first-class object 
— then inline functions can be an excellent tool for that.

为了性能优化。

========
网友评论：

Alex Miller
July 08 2014, 02:25

Anything related to inline functions is likely to change in the next or future Clojure release. 
I would recommend against using them or relying on their behavior.

==
Clojurian
July 08 2014, 06:32

@alex that is interesting info. Is there a JIRA or discussion on the dev mailing list?

==
Alex Yakushev
July 08 2014, 06:46

Thanks for the heads-up, Alex. 
Inlines stayed in Clojure for long enough so I thought they are quite stable, despite saying "Experimental" in the docs.

==
Alex Miller
July 08 2014, 07:03

Some problems are discussed in CLJ-1227.

Also we have a replacement listed on the planning page for the next release. 
http://dev.clojure.org/display/design/Release.Next+Planning

========
========
Inlined code
http://dev.clojure.org/display/design/Inlined+code

Added by Alex Miller, last edited by Alex Miller on Jan 22, 2014 Go to start of metadata

Problem

For performance, it is sometimes useful to provide inlined code 
transformations that can be performed during compilation and expanded at the point of use. 

Examples:

1) Optimization for constants. 
Given a square function, it would be useful to have the compiler perform the square operation 
at compile time and inline the result in the case where it's called with a constant. 

  (square 3)  could be evaluated and replaced with 9 in the compiled code.

  (map square xs)  would still need to be compiled as a function invocation.

2) Inlining calls to internal Java functions.

3) Optimization for particular arities.

Constraints

The following constraints should be considered:

If inlining is not possible, a fallback function should be available instead.
Inlined functions should be usable as higher-order functions.

Proposal
Compiler macros (from Common Lisp) are the proposed solution to this issue.

Alternatives

The existing implementation in Clojure is definline, which has issues in being used as a higher-order function.

References
Compiler macros
http://www.pentaside.org/paper/compilermacro-lemmens/compiler-macros-for-publication.txt

