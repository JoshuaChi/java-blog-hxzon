（hxzon学习笔记）元数据
by hxzon

另见《（hxzon学习笔记）clojure-与java一起工作-类型提示（续）》

========
引用类型除了可以解引用，还可以添加元数据。
但是跟普通值不同，不能使用with-meta或者vary-meta，
对引用类型必须使用alter-meta! ，它会直接修改引用类型的元数据（而不是返回一个新的引用类型）。（hxzon：注意）
atom，ref，agent都接受一个额外的:meta关键字参数，用来设置元数据。

(meta obj)

(with-meta obj map)

(vary-meta obj assoc :xx xx)

alter-meta!

========
type元数据，见《（hxzon读书笔记）《clojure编程》第7章：多重方法》

========
对元数据的处理

重要源码：clojure.lang.LispReader.MetaReader
把元数据字面量附着到随后的对象上（注意，ListReader读出来的对象可能是符号，向量，引用类型，数字等）。

DefExpr.Parser.parse
从sym取出元数据mm，取出arglists，放到Var上。
以mm为基础，添加文档字符串，添加编译器信息，去除要忽略的元数据，
将mm解析成Expr，求值该Expr后作为Var的元数据。

==
hxzon：帮助理解

(def ^{:y 1} y (with-meta 'yy {:tag String :yy 2}))
(prn (meta y))
;{:yy 2, :tag java.lang.String}
;注意body中的x，是替换成它的值，即xx，而不是它的Var。对比下边：
(prn (meta (var y)))
{:y 1, :ns #<Namespace clojure.core>, :name y, :file "NO_SOURCE_FILE", :column 1, :line 1}

(let [^{:x 1} x (with-meta 'xx {:tag String :xx 2})] (prn (meta x)))
;{:xx 2, :tag java.lang.String}
（初始值是一个seq，调用analyzeSeq，InvokeExpr.parse。）

(let [^{:x 1} x (with-meta 'xx {:tag String :xx 2})] (prn (meta (var x))))
;失败，因为x只是本地绑定，不能用var。

==
(let [x ^String 'xx] (prn (meta x)))
;nil

(let [x ^{:tag String :xx 1} 'xx] (prn (meta x)))
;nil

(let [x ^{:tag String :xx 1} 'xx] (prn (symbol? x)))
;true
(let [x ^{:tag String :xx 1} 'xx] (prn (name x)))  
;"xx"

上面两个例子，解析成form时，
元数据是附着到'xx形式上，它是一个序列（由quote和xx这两个符号组成）。
随后该序列求值成符号x，它不带有元数据。

