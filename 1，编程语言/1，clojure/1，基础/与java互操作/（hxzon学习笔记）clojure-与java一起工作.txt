（hxzon学习笔记）clojure-与java一起工作

by hxzon
============
《clojure编程》第9章：java及jvm互操作-The JVM Is Clojure’s Foundation

clojure以jvm为基础：

字符串就是java String。
nil就是java的null。
数字就是java的数字。
正则表达式是java.util.regex.Pattern的实例。

映射实现了java.util.Map接口，
向量、序列、列表实现了java.util.List接口，
集实现了java.util.Set接口。

函数都实现了java.lang.Runnable和java.util.concurrent.Callable接口。
函数就是java方法。
函数编译成类里的方法。

defrecord和 deftype编译成java类里的字段。

defprotocol生成java接口。

========
========
对java的支持实际只有点和new两种，其它都是语法糖。

====
1，生成类实例。

通过new：
(def rnd (new java.util.Random))

也可直接写出类名加点号：
(Random.)

====
2，调用类或实例的方法和属性。

(. class-or-instance member-symbol & args)
(. class-or-instance (member-symbol & args))

(. rnd nextInt) 还可成 (.nextInt rnd) 。

(. Math PI) 静态域还可写成 Math/PI 。

静态方法可写成 (System/currentTimeMillis) 。

（hxzon：无法通过实例，调用静态方法，会提示找不到方法。）

==
多次连续调用的缩写形式
(.. class-or-instance form & forms)。

(.getLocation (.getCodeSource (.getProtectionDomain (.getClass '(1 2)))))
可以缩写为
(.. '(1 2) getClass getProtectionDomain getCodeSource getLocation)

==
在同一对象上调用多个方法(doto class-or-inst & member-access-forms)。

(doto (System/getProperties)
   (.setProperty "name" "Stuart")
   (.setProperty "favoriteColor" "blue"))

====
3，通过import显示引入类，这样就不需要类全名。

(import [& import-lists])

(import '(java.security MessageDigest))

====
4，instance? 类似Java的instanceof，检测一个对象是否是某个类的实例。

(instance? Integer 10)
;= true

====
5，memfn 创建匿名函数包装Java方法，使其在Clojure中能像Clojure函数那样使用。

user=> (map (memfn toUpperCase) ["a" "short" "message"])
("A" "SHORT" "MESSAGE")

还可以写成如下形式：
user=> (map #(.toUpperCase %) ["a" "short" "message"])
("A" "SHORT" "MESSAGE")

====
6，bean包装JavaBean将其转换为不可变的Clojure映射：
(bean java-bean)

====
7，format包装了Java的format方法，格式化字符串：

(format fmt-string & args)，如

user=> (format "%s ran %d miles today" "Stu" 8)
"Stu ran 8 miles today"

说明：占位符详细参考Java相关文档。

========
8，处理异常

https://github.com/scgilardi/slingshot 异常处理

异常处理的目的:
(1) 包装检查异常；
(2) 使用finally块清理非内存资源如文件或网络句柄；
(3) 响应问题：忽略异常，重新操作，转换异常为非异常结果。

(try expr* catch-clause* finally-clause?)
; catch-clause -> (catch classname name expr*)
; finally-clause -> (finally expr*)

在Clojure中，检查异常不是必须的，如果不处理则直接忽略异常。

==
响应异常

最常见的情况是在catch块中响应异常。

示例：验证类是否可以找到。

(defn class-available? [class-name]
   (try
      (Class/forName class-name) true
      (catch ClassNotFoundException _ false)))

如果类找不到，则抛出ClassNotFoundException异常，返回false。

==
抛出异常

(throw (IllegalStateException. "I don't know what to do!"))

====
9，资源清理

如果需要释放的资源有close方法，则可以使用with-open宏：
(with-open [name init-form] & body)

Clojure内部，with-open创建一个try块，将init-form的结果赋给name，
然后运行body，最后在finally块中释放绑定到name的资源。

(defn spit [f content]
  (with-open [#^PrintWriter w (writer f)]
    (.print w content)))

(spit "hello.out" "hello, world")

--
(require '[clojure.java.io :as io])

(defn append-to
  [f text]
  (with-open [w (io/writer f :append true)]
    (doto w (.write text) .flush)))

--
(defn copy-files
  [from to]
  (with-open [in (FileInputStream. from)
              out (FileOutputStream. to)]
    (loop [buf (make-array Byte/TYPE 1024)]
      (let [len (.read in buf)]
        (when (pos? len)
          (.write out buf 0 len)
          (recur buf))))))

