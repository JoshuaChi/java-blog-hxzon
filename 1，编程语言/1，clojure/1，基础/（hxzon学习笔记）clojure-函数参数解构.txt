（hxzon学习笔记）clojure-函数参数解构

by hxzon
《clojure编程》第1章：进入clojure仙境-定义函数（fn），函数字面量

========
defn使用let来做函数参数的绑定。

====
1，可变参函数

使用&表示“剩余参数”。
“剩余参数”列表可以像其它序列一样进行解构。

(defn concat-rest
    [x & rest]  ;不定参数
    (apply str (butlast rest)))
;= #'user/concat-rest

(concat-rest 0 1 2 3 4)
;= "123"

;; hxzon：有用的示例：定义了一个函数，可接受0或1个参数
(defn make-user
    [& [user-id]]   ;解构“剩余参数”
    {:user-id (or user-id
        (str (java.util.UUID/randomUUID)))})
;= #'user/make-user

(make-user)
;= {:user-id "ef165515-6d6f-49d6-bd32-25eeb024d0b4"}

(make-user "Bobby")
;= {:user-id "Bobby"}

====
2，关键字参数

有些参数不是必选的，有些参数可能有默认值，
有时希望使用者可以不必按照某个特定顺序来传参。
关键字参数跟在固定位置参数后面。

(defn make-user
    [username & {:keys [email join-date] 
                 :or {join-date (java.util.Date.)}}]    ;给join-date定义了默认值。
    {:username username
     :join-date join-date
     :email email
     ;; 2.592e9 -> one month in ms
     :exp-date (java.util.Date. (long (+ 2.592e9 (.getTime join-date))))})
;= #'user/make-user

(make-user "Bobby") 
;= {:username "Bobby", :join-date #<Date Mon Jan 09 16:56:16 EST 2012>,
;= :email nil, :exp-date #<Date Wed Feb 08 16:56:16 EST 2012>}

(make-user "Bobby" 
    :join-date (java.util.Date. 111 0 1)
    :email "bobby@example.com")     ;多余的参数被当做map解构。
;= {:username "Bobby", :join-date #<Date Sun Jan 01 00:00:00 EST 2011>,
;= :email "bobby@example.com", :exp-date #<Date Tue Jan 31 00:00:00 EST 2011>}

注：因为关键字参数是利用let的map解构的特性来实现的，
所以关键字的参数名字理论上可以用任何类型的值（比如数字，字符串，甚至集合）。
下面的示例，使用一个向量做关键字。
不建议这么使用。

(defn foo
    [& {k ["m" 9]}]
    (inc k))
;= #'user/foo

(foo ["m" 9] 19)
;= 20

