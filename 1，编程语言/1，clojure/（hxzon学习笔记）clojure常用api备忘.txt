（hxzon学习笔记）clojure常用api备忘

by hxzon
========
1，(update-in map ks f & fps)

f 的第一个参数是原来的值。

;; hxzon版，增加一个默认值
(defn update-in [m ks vd f & fps]
  (if ks
     (assoc m k (apply update-in (get m k) ks vd f fps))
     (assoc m k (apply f (get m k vd) fps)))
  )

====
2，(replace s-map coll)

替换


====
3，(merge-with f map1 map2 ...) 

合并map，用 f 对 key相同的value做处理。 

==
3.1，merge

====
4，(filter pred coll)

过滤，返回 (pred item) 为真的序列。

==
4.1，filterv
返回 (pred item) 为真的向量。

====
(remove pred coll)

移除 (pred item) 为真的元素。

====
6，(contains? #{"a" "b" "v"} "a")

元素是否存在。
注意，不支持惰性序列。


====
5，(partition n coll)
(partition n step coll)
(partition n step pad coll)

将coll中的元素，每n个为一组。


====
6，(map-indexed f coll)

返回一个惰性序列，序列里的元素，是函数 f 的求值结果，
函数 f 应该接受两个参数：一个索引值，一个是 coll 的元素值。

user=> (map-indexed (fn [idx item] [idx item]) "foobar")
([0 \f] [1 \o] [2 \o] [3 \b] [4 \a] [5 \r])

user=> (map-indexed vector "foobar")    ; 另一种更简单的解法
([0 \f] [1 \o] [2 \o] [3 \b] [4 \a] [5 \r])

====
7，(flatten x)


====
8，向量转map

(reduce
    (fn [m v]    ;; m 是累积值，v 是当前迭代参数
        (assoc m v (* v v)))
    {}  ;初始是个空集合
    [1 2 3 4])
;= {4 16, 3 9, 2 4, 1 1}

(reduce
    #(assoc % %2 (* %2 %2))
    {}
    [1 2 3 4])
;= {4 16, 3 9, 2 4, 1 1}

(reduce-kv
    (fn [m k v]    ;; m 是累积值，v 是当前迭代参数
        (assoc m k [v (* v v)] ) )
    []  ;初始是个空集合
    [1 2 3 4])
;= [[1 1] [2 4] [3 9] [4 16]]

不支持序列。

