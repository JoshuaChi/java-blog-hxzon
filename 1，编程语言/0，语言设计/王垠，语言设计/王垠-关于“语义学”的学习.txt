王垠-关于“语义学”的学习
2012/07/25 12:50
作者：王垠 | 来自：寂静之声

很多人问我如何在学会基本的程序语言技能之后进入“语义学”的学习。其实我不知道该不该把这个东西叫做“语义学”，因为它显然没有“物理学”或者“生物学”那么多内容。所以下文我就叫它“语义”(semantics) 好了，省去一个吓人的“学”字。

一个程序的“语义”总是由另外一个程序决定的，这另一个程序叫做“解释器”(interpreter)。解释器接受一个“程序”，输出一个“值”。这个“值”可以具有非常广泛的含义。它可能是一个整数，一个字符串，也有可能是别的一些东西。你可能想象不到，其实在你的身边已经存在各种各样的解释器，只不过好些你还没有意识到。写 Python 程序，需要 Python 解释器，它的输入是 Python 代码，输出是一个普通的值，比如 42。CPU 其实也是一个解释器，它的输入是机器代码，输出是一些电子信号。人脑也是一个解释器，它的输入是文字，输出是在看到这些文字之后，由神经元之间复杂的生物化学反应所产生的“概念”。如果你了解类型推导系统 (type inference)，你会发现类型推导的过程也是一个解释器，它的输入是一个程序，输出是一个“类型”。类型也是一种“值”，不过它是一种抽象的值。比如，42 对应的类型是 int，我们说 42 被抽象为 int。

所以学习“语义”，基本上就是学习各种解释器。我不想在这里写完一整本书，所以现在只是推荐一些入门读物。专门讲解语义的书，其实好的非常少。通常学程序语言的人往往看一些经典的书籍，比如 Benjamin Pierce 的《Types And Programming Languages》 (TAPL) 或者 Robert Harper 的 《Practical Foundations for Programming Languages》(PFPL)。但是我并不推荐这两本书。原因是它们都太专注于“类型”和“逻辑”，而不是语义（解释器）本身。类型和逻辑其实只是语义里的一小部分，而其它重要的内容，这两本书往往忽略掉或者一笔带过。一条条的“推导规则”(inference rules)，“判定”(judgment) 之类吓人的术语，往往让人看不清这些概念最深层的本质。其实这两本书的内容我都了如指掌，可是我根本没有读过它们。在接受了很少的指点之后，我通过自己思考和实践，“重新发明”出了它们里面所有的内容，甚至超越了它们。当我回过头再来看它们的时候，发现其中好些花哨的类型其实是故弄玄虚，其实不能实用。

所以我推荐另外一本很薄的书：《 Programming Languages and Lambda Calculi》。作者是 Matthias Felleisen 和 Matthew Flatt。这么书好在什么地方呢？它是从非常简单的布尔表达式（而不是 lambda calculus）开始讲解什么是递归定义，什么是解释器，什么是 Church-Rosser，什么是上下文(evaluation context)。在让你理解了语义的本质，有了足够的信心之后，才告诉你更多的东西。其实这本书的后半部分也有类型的内容（刚发现的，我只看过前半部分  ）。这本书曾经是免费放在网上的，可是现在它被作者们以《Semantics Engineering with PLT Redex》取代了，而且不免费了！我不喜欢这个新的版本，也不喜欢 PLT Redex。我现在把我看过的版本放在这里供大家下载。我不知道作者们是否会发现，不过暂时就这样吧，等他们要求我把链接去掉的时候再说。

