王垠-工具的奴隶
2012/08/08 03:00
作者：王垠 | 来自：寂静之声
http://blog.sina.com.cn/s/blog_5d90e82f01018x95.html


再过一个月，就是我和计算机科学的“15周年”了。回想这 15 年来我都学到些什么，我真的非常吃惊。因为我学会的所有东西，竟然可以被浓缩到短短的一段话里面。可是当我真的把它告诉别人的时候，却发现没有办法让他们接受。这真是一种奇怪的感觉。很多人都说他们喜欢“简单”，可是真的遇到简单的想法，他们却表现出极度的不理解。

一直以来我都在拼搏和抗争，因为我总是有一种被欺骗的感觉。这种欺骗来自于我所使用的工具和理论，我曾经的偶像们，以及这个行业的各种显赫人物。当我看得越是深入，就越是感觉到一种无形的力量，它试图遮掩这些事物里面的无比简单的原理。当我透过层层的迷雾看透它们的时候，却为了自己的利益，不知不觉成为了这种力量的一部分。本来是自己独立做出来的东西，根本没有参考任何资料，却总喜欢拿一些看似“高深”的术语出来“撑门面”。本来几句话就可以说清楚的东西，却喜欢故弄玄虚，把一些大拿的名字抬出来。其实自己并不把权威当回事，但是因为人们只听权威的，所以不得不抬出一些来。为了打击某些人自以为是的气势，却让自己显得傲慢。回过头来，真是有一种莫名其妙的感觉。

我曾经提到，在两个星期的时间内，我超越了某些领域 20 年来的所有研究成果。这一点都不假，可是我并不是在显摆。相反，我知道这些事情是多么的微不足道。这些领域所研究的东西，恐怕本来就只需要两个星期来完成。不怕得罪人，举个实际点的例子吧。我在 Google 做的 Python 静态分析系统（PySonar），轻而易举的超越了当今最“先进”的 control-flow analysis，CFA2。CFA2 号称是第一个实现了“unbounded call/return matching”，可是这个问题在我的系统里面却是根本不存在的。我不知不觉的“解决”了这个问题，甚至在完成了这个项目两年以后我都不知道这个问题的存在，而我的系统却可以达到跟 CFA2 同样的效果甚至更好。当我回头去看 Olin Shivers 写于 1988 年的论文，才发现原来这问题是他自己“造”出来的。也许不是故意的，也许只是认识不够深刻，也许只是巧合，但是沿着他的思路 20 多年来的一系列论文，全都在解决一个其实不必存在的问题，而且搞得无比复杂。超越了他们，我有什么值得骄傲的吗？我没有，我甚至不愿意为此发表论文，因为我知道，世界上有其他人其实早就知道这个事实，只不过他们没有说出来而已。

我的解决方案很简单。如果你已经学会怎样写一个解释器，我现在就可以用几句话告诉你这个 PySonar 系统是怎么做出来的：

 1. 写一个递归的 Python 解释器，使它符合 Python 的语义。
 2. 当遇到分支语句（比如 if）时，把分支的“条件”传递到相应的分支里。
 3. 对这个解释器进行“抽象”，用类型来代替值。这样我们得到一个“抽象解释器”(abstract interpreter)。这就是所谓的“类型推导”系统 (type inference)。
 4. 进行“循环检测”，当发现解释器执行回到同一个“调用”并且使用同样类型的参数，我们知道它会返回跟上一次同样的结果，所以不执行这个调用。这样就避免了进入死循环。
 5. 使用一个外部符号表，记录“抽象解释”过程中遇到的各种符号和它们的类型，或者类型错误。
 6. 当所有符号的类型趋于恒定时，也就是达到“不动点”(fixed point)时，停止。

这就是 20 年的研究，我只花了一个周末想出来。另外我还可以告诉你，这样一个抽象解释器，可以达到 Hoare Logic 的所有功能。实际上 Hoare Logic 只不过是把程序转换了一个形式而已，把程序变成了等价的逻辑公式。但是用来推导这些逻辑公式的结果所需要的“逻辑推理”系统，却跟一个上述的“程序分析”系统是等价的。所以这个系统实际上还涵盖了 Hoare Logic。我不但知道 Hoare Logic 如何工作，我还知道如何“重新发明”它，以及任何类似的程序逻辑。所以现在当有同学在我面前炫耀他们懂得这些“program logic”，比如 Separation Logic 的时候，我都暗自在笑：所有这些“程序逻辑”，不过是某种“程序分析”换了一个形式，然后被搞得更复杂了而已。可是当有人打着这些“逻辑”的旗号发出论文，得到“专家”们的赏识，还以为我对此什么都不懂的时候，我真是有一种说不出来的味道。

说实话，这个“Hoare Logic”其实不是 C.A.R. Hoare 发明的。他只是复述了 Robert Floyd 的结论而已，而 Hoare 自己都指出，自己的贡献不过是“指出这个逻辑可能的应用方向”。而他们的结果比起 R.M. Burstall 的，真的没有什么新意。所以我其实打心眼里并不把 Hoare 当回事，但是很搞笑的是，为了打击一些“伪程序语言专家”，我却把他的名字抬出来做对比。因为相比之下他确实懂得多一些，而且因为人们只认识“图灵奖”，所以我只好拿他们出来增加说服力喽。

逻辑是一种工具，而这些人不过是它的奴隶。这就是为什么这篇博文的题目叫做“工具的奴隶”。逻辑这种“高端”的工具尚且如此，低端一些的世界，这种现象恐怕就更加严重。我不得不说，在这方面我对很多人起到过重大的误导作用。我提倡的“完全用 Linux 工作”，其实就是在把人沦为一些低级工具的奴隶。人们往往以知道某些工具的特点甚至毛病而自豪，而不知道如何发明和改造这些工具。当遇到不了解这些工具的人，他们往往有一种“高手”的优越感。看，我会这个编辑器，我会这个命令行，我会 TeX，我会这种程序语言，我会这个操作系统，我会写 GPU 程序，我会 Hadoop，我会云计算，…… 

真正理解这些东西内部原理的人，最后却不说话了。

