王垠-谁是真正的程序语言研究者
2012/06/13 19:35
作者：王垠 | 来自：寂静之声

========
一直以来，程序语言的研究都是一个非常偏僻，却非常重要的行业。由于它令人却步的难度，很少有人说得清楚什么人是真正的“高手”。这是一个很简单的道理，当一个人仰望星空的时候，他不会知道哪颗星更加伟大。通常人们都会以为最亮的星星是最大的，可其实有些看起来灰暗的小星星，虽然它们的尺寸和能量都超过那最亮的恒星万亿倍，但是由于它们离地球太远，基本不会被人注意到。研究程序语言的科学家们，很多就是这样的巨星，而且这样的巨星满天都是！

可是巨星一般都不说话，因为它们不需要对人说话。所以以至于人们看着天空，以为它们只是被卡在深蓝色琥珀中的萤火虫。我经常发现自己对于程序语言的言论不能被人理解，就是这个原因。比如当我提到 Python 的缺点使得它不适合作为入门语言，就有人拿 Linus Torvalds，Guido van Rossum 甚至 Eric Raymond 的话来反驳我。说他们都喜欢 Python，甚至某人要把 Python 作为他子女的第一门程序语言。对于这种道听途说盲从的人，我真是没有办法跟他们辩论。因为他们从未见过更加厉害的程序员，所以我没法告诉他们，其实他们心目中的某些“偶像”，在我心里只不过是半壶水响叮当的传教士。而真正卓越的程序语言专家和研究者，他们其实一个也不认识。举个例子，有谁认识 C.A.R. Hoare 和 Robin Milner？几乎每个程序员都知道 Donald Knuth 和 Dennis Richie，却很少有人知道 Hoare 和 Milner 的名字。而其实 Hoare 和 Milner 对于程序的本质性的理解，比起 Knuth 和 Richie 还要深入不知道多少。我不想在这样的问题上跟人费口舌，因为这在我的同行们看来，已经是不争的事实。Hoare 和 Milner 这样的人，才是程序语言的巨星。

巨星的存在，不是用来秀给地球上的人看的。巨星用它的光和热照亮整个星系，给它们提供能量。这就是为什么程序语言方向的强弱，经常不取决于学校的名气和排名，而几乎都是取决于少数的个人。比如，曾经 Cornell 有着一颗巨星：Greg Morrisett。当时的 Cornell 是程序语言研究最强的一个地方，培养了一批最好的研究者，产生了一批像 Typed Assembly Language 这样的突破性成果。可是后来由于各种原因，这些人陆续离开了。后来的 Cornell 程序语言学生，没落到发表像“给 Java 的模式匹配 (patter matching)”这样的论文。这样的论文发表出来，非但不能抬高自己，反而会让真正的程序语言研究者看不起。因为我们看的不是文章的篇数，而是内容的深度。模式匹配在程序语言研究者看来，难度是可以忽略不计的，比如我就可以在几分钟之内实现模式匹配。而且很多函数式语言（比如 ML，Haskell）都有这个功能，把别的语言早已有的功能“移植”到另一个语言，这根本就不叫做研究，因为它没有任何新的内容。相反的一个例子就是哈佛，哈佛的计算机系曾经不咋的，可是后来由于 Greg Morrisett 成为他们的院长而实力大增，开始吸引优秀的程序语言研究者。我发现，每个学校的程序语言专业的起起落落，几乎都是取决于那少数一两个人。至于 MIT，Stanford 和 Berkeley？让你吃惊的是，我看过这么多世界上最好的论文之后发现，它们似乎从来没有拥有过最好的程序语言专家。可是跟它们相当名气的 CMU，却汇聚了一批最好的研究者，包括 Robert Harper，Frank Pfenning，等等。很多很好的程序语言研究者不在美国，他们分布在英国，法国，丹麦，瑞典，意大利，甚至波兰。当然由于他们的自由移动，你无法预测一个学校未来的兴衰，也许不久的将来 MIT, Stanford 和 Berkeley 就会变成世界上最强的也说不定。我想说的其实是，这一切都取决于那少数的个人。

由于不喜欢 Cornell 的学校气氛，我离开了 Cornell，但是我并不后悔，因为我找到了这一生中给予我最大帮助的人。可是回过头来，我却发现，我其实错过了 Cornell 的一颗超级巨星，他的名字叫 Robert Constable。他是如此的“厚德载物”，以至于我在 Cornell 的时候，居然没有听说过他的名字。因为我当时对程序语言粗浅的认识，让我完全不能明白他的伟大。以至于当我跟他谈话之后，我仍然决定了离开！可他却是多个最重要的研究者的学术祖先，包括在这个领域最受瞩目的 CMU 的教授 Robert Harper，哈佛的 Greg Morrisett，和 UPenn 的 Benjamin Pierce，…… 看过他的 Naive Computational Type Theory 之后我发现，Robert Constable 对类型理论的理解，恐怕这个世界上也少有几个人能比。

后来我才发现，Robert Constable 原来是 Stephen Kleene 的学生，而 Stephen Kleene 是 Alonzo Church 的学生。Alonzo Church 有另一个学生，他非常的出名，几乎无人不知无人不晓，他的名字叫图灵（Alan Turing）。名师出高徒，这确实是不可不信的。每个人都知道图灵，可是有多少人知道 Stephen Kleene 的伟大？其实每个程序员几乎每天都使用他的成果。正则表达式里的 * 号（比如 "ls *.c"）其实叫做 "Kleene star"，因为是 Kleene 发明了这个东西。然而用正则表达式的时候，你远远看不到，其实这里面包含了计算机科学最深刻的道理。Kleene 还有其它非常重要的成果，它们是如此的超前于时代，以至于直到今天人们还没能完全理解它们的威力。举一个例子就是 Kleene 的“SMN定理”，由这个定理衍生出来的一种方法叫 Partial Evaluation，它几乎涵盖了编译器内部所有所谓的“优化”。世界上最先进的 Scheme 编译器 Chez Scheme，内部就实现了这样一个这样的优化，它能一步到位的完成别的编译器需要多步的优化，生成的代码却比这多个步骤累加起来的效果还要更加高效。

有时候我在感叹，这个世界是怎么了。人们都说“长江后浪推前浪”，事实却不是这样的。前几天我看了一篇 Kleene 在 1945 年写的论文，几乎涵盖了现在某个领域最新，最热门，最尖端的思想。为什么我们总是忘记历史，没法超越“古人”？人们都喜欢听能说会道的人瞎掰，却连这些有真知的计算机科学家的名字都没听说过。

鉴于国内的程序员对这个行业的不了解，我这里给出一个真正的程序语言研究者名单，让大家有所了解。当然由于他们人数众多，我不可能全都列举出来，这里的列表基本上出自我看过的最好的论文。所以同行们如果发现漏掉了什么重要人物，请不要认为我瞧不起他们。

这个列表是：C.A.R. Hoare, Robin Milner, Dana Scott, Robert Constable, Gordon Plotkin, Robert Harper, John Reynolds, Alan Mycroft, Benjamin Pierce, Greg Morrisett, Luca Cardeli, John McCarthy, Patrick Cousot,Olivier Danvy, Yoshihiko Futamura, Neil D. Jones, Peter Landin, Dale Miller, Philip Wadler, Simon Peyton Jones, Daniel Friedman, Amr Sabry, R. Kent Dybvig, ...


另外有一些人算是半个程序语言专家，他们更加接近于逻辑学家或者哲学家，但是由于他们的贡献对程序语言的巨大作用，也一并列在这里。他们有的人也是机器定理证明领域的最厉害的人物：

Alonzo Church, Stephen Kleene, Alan Turing, Per Martin-Löf, Thierry Coquand, Henk Barendregt, Jean-Yves Girard, W.A Howard, Frank Pfenning, Eugenio Moggi, Robert Boyer, R.M. Burstall, J Strother Moore, ...

他们之间有很有趣的师承关系，你可以到 Mathematics Genealogy Project 查“学术家谱图”。我经常通过这个家谱图发现具有类似思想的人，然后通过论文或者 email 向他们学习。我甚至发现一些很有趣的八卦。比如 C.A.R. Hoare，他的家谱图显示他有博士学位，却没有显示他导师的名字。后来才通过他的图灵奖页面发现，他曾经在被誉为20世纪最伟大的三个数学家之一的 Kolmogorov 的手下读过研究生。至于为什么他好像没有从 Kolmogorov 那里拿博士学位，这就等大家八卦了 :-) 另外值得一提的是，目前世界上最先进的类型理论 Martin-Löf 类型理论的创造者 Per Martin-Löf，也是 Kolmogorov 的学生。这个类型理论如此的强大，它可以被用来构造整个现代数学！

