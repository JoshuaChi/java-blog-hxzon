Chapter 5，Control Operations（续2）
http://www.scheme.com/tspl4/control.html#./control:h0

Chapter 5. Control Operations

Section 5.1. Procedure Application
Section 5.2. Sequencing
Section 5.3. Conditionals
Section 5.4. Recursion and Iteration  递归和迭代

Section 5.5. Mapping and Folding  映射和规约
Section 5.6. Continuations  续延

Section 5.7. Delayed Evaluation  延迟求值
Section 5.8. Multiple Values  多值
Section 5.9. Eval

========
Section 5.7. Delayed Evaluation

The syntactic form delay and the procedure force may be used in combination to implement lazy evaluation. An expression subject to lazy evaluation is not evaluated until its value is required and, once evaluated, is never reevaluated.

syntax: (delay expr) 
returns: a promise 
procedure: (force promise) 
returns: result of forcing promise 
libraries: (rnrs r5rs)

The first time a promise created by delay is forced (with force), it evaluates expr, "remembering" the resulting value. Thereafter, each time the promise is forced, it returns the remembered value instead of reevaluating expr.

delay and force are typically used only in the absence of side effects, e.g., assignments, so that the order of evaluation is unimportant.

The benefit of using delay and force is that some amount of computation might be avoided altogether if it is delayed until absolutely required. Delayed evaluation may be used to construct conceptually infinite lists, or streams. The example below shows how a stream abstraction may be built with delay and force. A stream is a promise that, when forced, returns a pair whose cdr is a stream.

(define stream-car
  (lambda (s)
    (car (force s)))) 

(define stream-cdr
  (lambda (s)
    (cdr (force s)))) 

(define counters
  (let next ([n 1])
    (delay (cons n (next (+ n 1)))))) 

(stream-car counters) <graphic> 1 

(stream-car (stream-cdr counters)) <graphic> 2 

(define stream-add
  (lambda (s1 s2)
    (delay (cons
             (+ (stream-car s1) (stream-car s2))
             (stream-add (stream-cdr s1) (stream-cdr s2)))))) 

(define even-counters
  (stream-add counters counters)) 

(stream-car even-counters) <graphic> 2 

(stream-car (stream-cdr even-counters)) <graphic> 4

delay may be defined by

(define-syntax delay
  (syntax-rules ()
    [(_ expr) (make-promise (lambda () expr))]))

where make-promise might be defined as follows.

(define make-promise
  (lambda (p)
    (let ([val #f] [set? #f])
      (lambda ()
        (unless set?
          (let ([x (p)])
            (unless set?
              (set! val x)
              (set! set? #t))))
        val))))

With this definition of delay, force simply invokes the promise to force evaluation or to retrieve the saved value.

(define force
  (lambda (promise)
    (promise)))

The second test of the variable set? in make-promise is necessary in the event that, as a result of applying p, the promise is recursively forced. Since a promise must always return the same value, the result of the first application of p to complete is returned.

Whether delay and force handle multiple return values is unspecified; the implementation given above does not, but the following version does, with the help of call-with-values and apply.

(define make-promise
  (lambda (p)
    (let ([vals #f] [set? #f])
      (lambda ()
        (unless set?
          (call-with-values p
            (lambda x
              (unless set?
                (set! vals x)
                (set! set? #t)))))
        (apply values vals))))) 

(define p (delay (values 1 2 3)))
(force p) <graphic> 1
           2
           3
(call-with-values (lambda () (force p)) +) <graphic> 6

Neither implementation is quite right, since force must raise an exception with condition type &assertion if its argument is not a promise. Since distinguishing procedures created by make-promise from other procedures is impossible, force cannot do so reliably. The following reimplementation of make-promise and force represents promises as records of the type promise to allow force to make the required check.

(define-record-type promise
  (fields (immutable p) (mutable vals) (mutable set?))
  (protocol (lambda (new) (lambda (p) (new p #f #f))))) 

(define force
  (lambda (promise)
    (unless (promise? promise)
      (assertion-violation 'promise "invalid argument" promise))
    (unless (promise-set? promise)
      (call-with-values (promise-p promise)
        (lambda x
          (unless (promise-set? promise)
            (promise-vals-set! promise x)
            (promise-set?-set! promise #t)))))
    (apply values (promise-vals promise))))

====
Section 5.8. Multiple Values

While all Scheme primitives and most user-defined procedures return exactly one value, some programming problems are best solved by returning zero values, more than one value, or even a variable number of values. For example, a procedure that partitions a list of values into two sublists needs to return two values. While it is possible for the producer of multiple values to package them into a data structure and for the consumer to extract them, it is often cleaner to use the built-in multiple-values interface. This interface consists of two procedures: values and call-with-values. The former produces multiple values and the latter links procedures that produce multiple-value values with procedures that consume them.

procedure: (values obj ...) 
returns: obj ... 
libraries: (rnrs base), (rnrs)

The procedure values accepts any number of arguments and simply passes (returns) the arguments to its continuation.

(values) <graphic>

(values 1) <graphic> 1 

(values 1 2 3) <graphic> 1
                2
                3 

(define head&tail
  (lambda (ls)
    (values (car ls) (cdr ls)))) 

(head&tail '(a b c)) <graphic> a
                      (b c)

procedure: (call-with-values producer consumer) 
returns: see below 
libraries: (rnrs base), (rnrs)

producer and consumer must be procedures. call-with-values applies consumer to the values returned by invoking producer without arguments.

(call-with-values
  (lambda () (values 'bond 'james))
  (lambda (x y) (cons y x))) <graphic> (james . bond) 

(call-with-values values list) <graphic> '()

In the second example, values itself serves as the producer. It receives no arguments and thus returns no values. list is thus applied to no arguments and so returns the empty list.

The procedure dxdy defined below computes the change in x and y coordinates for a pair of points whose coordinates are represented by (x . y) pairs.

(define dxdy
  (lambda (p1 p2)
    (values (- (car p2) (car p1))
            (- (cdr p2) (cdr p1))))) 

(dxdy '(0 . 0) '(0 . 5)) <graphic> 0
                          5

dxdy can be used to compute the length and slope of a segment represented by two endpoints.

(define segment-length
  (lambda (p1 p2)
    (call-with-values
      (lambda () (dxdy p1 p2))
      (lambda (dx dy) (sqrt (+ (* dx dx) (* dy dy))))))) 

(define segment-slope
  (lambda (p1 p2)
    (call-with-values
      (lambda () (dxdy p1 p2))
      (lambda (dx dy) (/ dy dx))))) 

(segment-length '(1 . 4) '(4 . 8)) <graphic> 5
(segment-slope '(1 . 4) '(4 . 8)) <graphic> 4/3

We can of course combine these to form one procedure that returns two values.

(define describe-segment
  (lambda (p1 p2)
    (call-with-values
      (lambda () (dxdy p1 p2))
      (lambda (dx dy)
        (values
          (sqrt (+ (* dx dx) (* dy dy)))
          (/ dy dx)))))) 

(describe-segment '(1 . 4) '(4 . 8)) <graphic> 5
                                     <graphic> 4/3

The example below employs multiple values to divide a list nondestructively into two sublists of alternating elements.

(define split
  (lambda (ls)
    (if (or (null? ls) (null? (cdr ls)))
        (values ls '())
        (call-with-values
          (lambda () (split (cddr ls)))
          (lambda (odds evens)
            (values (cons (car ls) odds)
                    (cons (cadr ls) evens))))))) 

(split '(a b c d e f)) <graphic> (a c e)
                        (b d f)

At each level of recursion, the procedure split returns two values: a list of the odd-numbered elements from the argument list and a list of the even-numbered elements.

The continuation of a call to values need not be one established by a call to call-with-values, nor must only values be used to return to a continuation established by call-with-values. In particular, (values e) and e are equivalent expressions. For example:

(+ (values 2) 4) <graphic> 6 

(if (values #t) 1 2) <graphic> 1 

(call-with-values
  (lambda () 4)
  (lambda (x) x)) <graphic> 4

Similarly, values may be used to pass any number of values to a continuation that ignores the values, as in the following.

(begin (values 1 2 3) 4) <graphic> 4

Because a continuation may accept zero or more than one value, continuations obtained via call/cc may accept zero or more than one argument.

(call-with-values
  (lambda ()
    (call/cc (lambda (k) (k 2 3))))
  (lambda (x y) (list x y))) <graphic> (2 3)

The behavior is unspecified when a continuation expecting exactly one value receives zero values or more than one value. For example, the behavior of each of the following expressions is unspecified. Some implementations raise an exception, while others silently suppress additional values or supply defaults for missing values.

(if (values 1 2) 'x 'y) 

(+ (values) 5)

Programs that wish to force extra values to be ignored in particular contexts can do so easily by calling call-with-values explicitly. A syntactic form, which we might call first, can be defined to abstract the discarding of more than one value when only one is desired.

(define-syntax first
  (syntax-rules ()
    [(_ expr)
     (call-with-values
       (lambda () expr)
       (lambda (x . y) x))])) 

(if (first (values #t #f)) 'a 'b) <graphic> a

Since implementations are required to raise an exception with condition type &assertion if a procedure does not accept the number of arguments passed to it, each of the following raises an exception.

(call-with-values
  (lambda () (values 2 3 4))
  (lambda (x y) x)) 

(call-with-values
  (lambda () (call/cc (lambda (k) (k 0))))
  (lambda (x y) x))

Since producer is most often a lambda expression, it is often convenient to use a syntactic extension that suppresses the lambda expression in the interest of readability.

(define-syntax with-values
  (syntax-rules ()
    [(_ expr consumer)
     (call-with-values (lambda () expr) consumer)])) 

(with-values (values 1 2) list) <graphic> (1 2)
(with-values (split '(1 2 3 4))
  (lambda (odds evens)
    evens)) <graphic> (2 4)

If the consumer is also a lambda expression, the multiple-value variants of let and let* described in Section 4.5 are usually even more convenient.

(let-values ([(odds evens) (split '(1 2 3 4))])
  evens) <graphic> (2 4) 

(let-values ([ls (values 'a 'b 'c)])
  ls) <graphic> (a b c)

Many standard syntactic forms and procedures pass along multiple values. Most of these are "automatic," in the sense that nothing special must be done by the implementation to make this happen. The usual expansion of let into a direct lambda call automatically propagates multiple values produced by the body of the let. Other operators must be coded specially to pass along multiple values. The call-with-port procedure (page 7.6), for example, calls its procedure argument, then closes the port argument before returning the procedure's values, so it must save the values temporarily. This is easily accomplished via let-values, apply, and values:

(define call-with-port
  (lambda (port proc)
    (let-values ([val* (proc port)])
      (close-port port)
      (apply values val*))))

If this seems like too much overhead when a single value is returned, the code can use call-with-values and case-lambda to handle the single-value case more efficiently:

(define call-with-port
  (lambda (port proc)
    (call-with-values (lambda () (proc port))
      (case-lambda
        [(val) (close-port port) val]
        [val* (close-port port) (apply values val*)]))))

The definitions of values and call-with-values (and concomitant redefinition of call/cc) in the library below demonstrate that the multiple-return-values interface could be implemented in Scheme if it were not already built in. No error checking can be done, however, for the case in which more than one value is returned to a single-value context, such as the test part of an if expression.

(library (mrvs)
  (export call-with-values values call/cc
    (rename (call/cc call-with-current-continuation)))
  (import
    (rename
      (except (rnrs) values call-with-values)
      (call/cc rnrs:call/cc))) 

  (define magic (cons 'multiple 'values)) 

  (define magic?
    (lambda (x)
      (and (pair? x) (eq? (car x) magic))))

  (define call/cc
    (lambda (p)
      (rnrs:call/cc
        (lambda (k)
          (p (lambda args
               (k (apply values args)))))))) 

  (define values
    (lambda args
      (if (and (not (null? args)) (null? (cdr args)))
          (car args)
          (cons magic args)))) 

  (define call-with-values
    (lambda (producer consumer)
      (let ([x (producer)])
        (if (magic? x)
            (apply consumer (cdr x))
            (consumer x))))))

Multiple values can be implemented more efficiently [2], but this code serves to illustrate the meanings of the operators and may be used to provide multiple values in older, nonstandard implementations that do not support them.

========
Section 5.9. Eval

Scheme's eval procedure allows programmers to write programs that construct and evaluate other programs. This ability to do run-time meta programming should not be overused but is handy when needed.

procedure: (eval obj environment) 
returns: values of the Scheme expression represented by obj in environment 
libraries: (rnrs eval)

If obj does not represent a syntactically valid expression, eval raises an exception with condition type &syntax. The environments returned by environment, scheme-report-environment, and null-environment are immutable. Thus, eval also raises an exception with condition type &syntax if an assignment to any of the variables in the environment appears within the expression.

(define cons 'not-cons)
(eval '(let ([x 3]) (cons x 4)) (environment '(rnrs))) <graphic> (3 . 4) 

(define lambda 'not-lambda)
(eval '(lambda (x) x) (environment '(rnrs))) <graphic> #<procedure> 

(eval '(cons 3 4) (environment)) <graphic> exception

procedure: (environment import-spec ...) 
returns: an environment 
libraries: (rnrs eval)

environment returns an environment formed from the combined bindings of the given import specifiers. Each import-spec must be an s-expression representing a valid import specifier (see Chapter 10).

(define env (environment '(rnrs) '(prefix (rnrs lists) $)))
(eval '($cons* 3 4 (* 5 8)) env) <graphic> (3 4 . 40)

procedure: (null-environment version) 
procedure: (scheme-report-environment version) 
returns: an R5RS compatibility environment 
libraries: (rnrs r5rs)

version must be the exact integer 5.

null-environment returns an environment containing bindings for the keywords whose meanings are defined by the Revised5 Report on Scheme, along with bindings for the auxiliary keywords else, =>, ..., and _.

scheme-report-environment returns an environment containing the same keyword bindings as the environment returned by null-environment along with bindings for the variables whose meanings are defined by the Revised5 Report on Scheme, except those not defined by the Revised6 Report: load, interaction-environment, transcript-on, transcript-off, and char-ready?.

The bindings for each of the identifiers in the environments returned by these procedures are those of the corresponding Revised6 Report library, so this does not provide full backward compatibility, even if the excepted identifier bindings are not used.


