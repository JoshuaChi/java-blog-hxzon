Chapter 5，Control Operations（续1）
http://www.scheme.com/tspl4/control.html#./control:h0

Chapter 5. Control Operations

Section 5.1. Procedure Application
Section 5.2. Sequencing
Section 5.3. Conditionals
Section 5.4. Recursion and Iteration  递归和迭代

Section 5.5. Mapping and Folding  映射和规约
Section 5.6. Continuations  续延

Section 5.7. Delayed Evaluation  延迟求值
Section 5.8. Multiple Values  多值
Section 5.9. Eval

========
Section 5.5. Mapping and Folding
映射和规约

When a program must recur or iterate over the elements of a list, a mapping or folding operator is often more convenient. These operators abstract away from null checks and explicit recursion by applying a procedure to the elements of the list one by one. A few mapping operators are also available for vectors and strings.

procedure: (map procedure list1 list2 ...) 
returns: list of results 
libraries: (rnrs base), (rnrs)

map applies procedure to corresponding elements of the lists list1 list2 ... and returns a list of the resulting values. The lists list1 list2 ... must be of the same length. procedure should accept as many arguments as there are lists, should return a single value, and should not mutate the list arguments.

(map abs '(1 -2 3 -4 5 -6)) <graphic> (1 2 3 4 5 6) 

(map (lambda (x y) (* x y))
     '(1 2 3 4)
     '(8 7 6 5)) <graphic> (8 14 18 20)

While the order in which the applications themselves occur is not specified, the order of the values in the output list is the same as that of the corresponding values in the input lists.

map might be defined as follows.

(define map
  (lambda (f ls . more)
    (if (null? more)
        (let map1 ([ls ls])
          (if (null? ls)
              '()
              (cons (f (car ls))
                    (map1 (cdr ls)))))
        (let map-more ([ls ls] [more more])
          (if (null? ls)
              '()
              (cons
                (apply f (car ls) (map car more))
                (map-more (cdr ls) (map cdr more))))))))

No error checking is done by this version of map; f is assumed to be a procedure and the other arguments are assumed to be proper lists of the same length. An interesting feature of this definition is that map uses itself to pull out the cars and cdrs of the list of input lists; this works because of the special treatment of the single-list case.

procedure: (for-each procedure list1 list2 ...) 
returns: unspecified 
libraries: (rnrs base), (rnrs)

for-each is similar to map except that for-each does not create and return a list of the resulting values, and for-each guarantees to perform the applications in sequence over the elements from left to right. procedure should accept as many arguments as there are lists and should not mutate the list arguments. for-each may be defined without error checks as follows.

(define for-each
  (lambda (f ls . more)
    (do ([ls ls (cdr ls)] [more more (map cdr more)])
        ((null? ls))
      (apply f (car ls) (map car more))))) 

(let ([same-count 0])
  (for-each
    (lambda (x y)
      (when (= x y)
        (set! same-count (+ same-count 1))))
    '(1 2 3 4 5 6)
    '(2 3 3 4 7 6))
  same-count) <graphic> 3

====
procedure: (exists procedure list1 list2 ...) 
returns: see below 
libraries: (rnrs lists), (rnrs)

The lists list1 list2 ... must be of the same length. procedure should accept as many arguments as there are lists and should not mutate the list arguments. If the lists are empty, exists returns #f. Otherwise, exists applies procedure to corresponding elements of the lists list1 list2 ... in sequence until either the lists each have only one element or procedure returns a true value t. In the former case, exists tail-calls procedure, applying it to the remaining element of each list. In the latter case, exists returns t.

(exists symbol? '(1.0 #\a "hi" '())) <graphic> #f 

(exists member
        '(a b c)
        '((c b) (b a) (a c))) <graphic> (b a) 

(exists (lambda (x y z) (= (+ x y) z))
        '(1 2 3 4)
        '(1.2 2.3 3.4 4.5)
        '(2.3 4.4 6.4 8.6)) <graphic> #t

exists may be defined (somewhat inefficiently and without error checks) as follows:

(define exists
  (lambda (f ls . more)
    (and (not (null? ls))
      (let exists ([x (car ls)] [ls (cdr ls)] [more more])
        (if (null? ls)
            (apply f x (map car more))
            (or (apply f x (map car more))
                (exists (car ls) (cdr ls) (map cdr more))))))))

====
procedure: (for-all procedure list1 list2 ...) 
returns: see below 
libraries: (rnrs lists), (rnrs)

The lists list1 list2 ... must be of the same length. procedure should accept as many arguments as there are lists and should not mutate the list arguments. If the lists are empty, for-all returns #t. Otherwise, for-all applies procedure to corresponding elements of the lists list1 list2 ... in sequence until either the lists each have only one element left or procedure returns #f. In the former case, for-all tail-calls procedure, applying it to the remaining element of each list. In the latter case, for-all returns #f.

(for-all symbol? '(a b c d)) <graphic> #t 

(for-all =
         '(1 2 3 4)
         '(1.0 2.0 3.0 4.0)) <graphic> #t 

(for-all (lambda (x y z) (= (+ x y) z))
         '(1 2 3 4)
         '(1.2 2.3 3.4 4.5)
         '(2.2 4.3 6.5 8.5)) <graphic> #f

for-all may be defined (somewhat inefficiently and without error checks) as follows:

(define for-all
  (lambda (f ls . more)
    (or (null? ls)
      (let for-all ([x (car ls)] [ls (cdr ls)] [more more])
        (if (null? ls)
            (apply f x (map car more))
            (and (apply f x (map car more))
                 (for-all (car ls) (cdr ls) (map cdr more))))))))

====
procedure: (fold-left procedure obj list1 list2 ...) 
returns: see below 
libraries: (rnrs lists), (rnrs)

The list arguments should all have the same length. procedure should accept one more argument than the number of list arguments and return a single value. It should not mutate the list arguments.

fold-left returns obj if the list arguments are empty. If they are not empty, fold-left applies procedure to obj and the cars of list1 list2 ..., then recurs with the value returned by procedure in place of obj and the cdr of each list in place of the list.

(fold-left cons '() '(1 2 3 4)) <graphic> ((((() . 1) . 2) . 3) . 4) 

(fold-left
  (lambda (a x) (+ a (* x x)))
  0 '(1 2 3 4 5)) <graphic> 55 

(fold-left
  (lambda (a . args) (append args a))
  '(question)
  '(that not to)
  '(is to be)
  '(the be: or)) <graphic> (to be or not to be: that is the question)

====
procedure: (fold-right procedure obj list1 list2 ...) 
returns: see below 
libraries: (rnrs lists), (rnrs)

The list arguments should all have the same length. procedure should accept one more argument than the number of list arguments and return a single value. It should not mutate the list arguments.

fold-right returns obj if the list arguments are empty. If they are not empty, fold-right recurs with the cdr of each list replacing the list, then applies procedure to the cars of list1 list2 ... and the result returned by the recursion.

(fold-right cons '() '(1 2 3 4)) <graphic> (1 2 3 4) 

(fold-right
  (lambda (x a) (+ a (* x x)))
  0 '(1 2 3 4 5)) <graphic> 55 

(fold-right
  (lambda (x y a) (cons* x y a))   <graphic> (parting is such sweet sorrow
  '((with apologies))                gotta go see ya tomorrow
  '(parting such sorrow go ya)       (with apologies))
  '(is sweet gotta see tomorrow))

====
procedure: (vector-map procedure vector1 vector1 ...) 
returns: vector of results 
libraries: (rnrs base), (rnrs)

vector-map applies procedure to corresponding elements of vector1 vector2 ... and returns a vector of the resulting values. The vectors vector1 vector2 ... must be of the same length, and procedure should accept as many arguments as there are vectors and return a single value.

(vector-map abs '#(1 -2 3 -4 5 -6)) <graphic> #(1 2 3 4 5 6)
(vector-map (lambda (x y) (* x y))
  '#(1 2 3 4)
  '#(8 7 6 5)) <graphic> #(8 14 18 20)

While the order in which the applications themselves occur is not specified, the order of the values in the output vector is the same as that of the corresponding values in the input vectors.

====
procedure: (vector-for-each procedure vector1 vector2 ...) 
returns: unspecified 
libraries: (rnrs base), (rnrs)

vector-for-each is similar to vector-map except that vector-for-each does not create and return a vector of the resulting values, and vector-for-each guarantees to perform the applications in sequence over the elements from left to right.

(let ([same-count 0])
  (vector-for-each
    (lambda (x y)
      (when (= x y)
        (set! same-count (+ same-count 1))))
    '#(1 2 3 4 5 6)
    '#(2 3 3 4 7 6))
  same-count) <graphic> 3

====
procedure: (string-for-each procedure string1 string2 ...) 
returns: unspecified 
libraries: (rnrs base), (rnrs)

string-for-each is similar to for-each and vector-for-each except that the inputs are strings rather than lists or vectors.

(let ([ls '()])
  (string-for-each
    (lambda r (set! ls (cons r ls)))
    "abcd"
    "===="
    "1234")
  (map list->string (reverse ls))) <graphic> ("a=1" "b=2" "c=3" "d=4")

========
Section 5.6. Continuations
续延

见《续延》

