Chapter 2，Getting Started
http://www.scheme.com/tspl4/start.html#./start:h0

Chapter 2. Getting Started

Section 2.1. Interacting with Scheme
Section 2.2. Simple Expressions
Section 2.3. Evaluating Scheme Expressions  表达式求值
Section 2.4. Variables and Let Expressions  变量和let表达式
Section 2.5. Lambda Expressions  lambda表达式

==
Section 2.6. Top-Level Definitions  顶层定义
Section 2.7. Conditional Expressions  条件表达式
Section 2.8. Simple Recursion  简单递归
Section 2.9. Assignment  赋值

========
This chapter is an introduction to Scheme for programmers who are new to the language. 
You will get more from this chapter if you are sitting in front of an interactive Scheme system, trying out the examples as you go.

After reading this chapter and working the exercises, you should be able to start using Scheme. 
You will have learned the syntax of Scheme programs and how they are executed, 
along with how to use simple data structures and control mechanisms.

====
Section 2.1. Interacting with Scheme

Most Scheme systems provide an interactive programming environment that simplifies program development and experimentation. 
The simplest interaction with Scheme follows a "read-evaluate-print" cycle. 
A program (often called a read-evaluate-print loop, or REPL) reads each expression you type at the keyboard, evaluates it, and prints its value.

With an interactive Scheme system, you can type an expression at the keyboard and see its value immediately. 
You can define a procedure and apply it to arguments to see how it works. 
You can even type in an entire program consisting of a set of procedure definitions and test it without leaving the system. 
When your program starts getting longer, it will be more convenient to type it into a file (using a text editor), load the file and test it interactively. 
In most Scheme systems, a file may be loaded with the nonstandard procedure load, 
which takes a string argument naming the file.
在很多scheme实现中，可以用load函数来加载文件。（但load函数是非标准定义的。） 
Preparing your program in a file has several advantages: 
you have a chance to compose your program more carefully, you can correct errors without retyping the program, 
and you can retain a copy for later use. 
Most Scheme implementations treat expressions loaded from a file the same as expressions typed at the keyboard.

While Scheme provides various input and output procedures, 
the REPL takes care of reading expressions and printing their values. 
This frees you to concentrate on writing your program without worrying about how its results will be displayed.

The examples in this chapter and in the rest of the book follow a regular format. 
An expression you might type from your keyboard is given first, possibly spanning several lines. 
The value of the expression is given after the <graphic>, to be read as "evaluates to." 
The <graphic> is omitted for definitions and when the value of an expression is unspecified.

The example programs are formatted in a style that "looks nice" and conveys the structure of the program. 
The code is easy to read because the relationship between each expression and its subexpressions is clearly shown. 
Scheme ignores indentation and line breaks, however, so there is no need to follow a particular style. 
The important thing is to establish one style and keep to it. 
Scheme sees each program as if it were on a single line, with its subexpressions ordered from left to right.

If you have access to an interactive Scheme system, it might be a good idea to start it up now and type in the examples as you read. 
One of the simplest Scheme expressions is a string constant. 
Try typing "Hi Mom!" (including the double quotes) in response to the prompt. 
The system should respond with "Hi Mom!"; the value of any constant is the constant itself.

"Hi Mom!" <graphic> "Hi Mom!"

Here is a set of expressions, each with Scheme's response. 
They are explained in later sections of this chapter, but for now use them to practice interacting with Scheme.

"hello" <graphic> "hello"
42 <graphic> 42
22/7 <graphic> 22/7
3.141592653 <graphic> 3.141592653
+ <graphic> #<procedure>
(+ 76 31) <graphic> 107
(* -12 10) <graphic> -120
'(a b c d) <graphic> (a b c d)

Be careful not to miss any single quotes ( ' ), double quotes, or parentheses. 
If you left off a single quote in the last expression, you probably received a message indicating that an exception has occurred. 
Just try again. 
If you left off a closing parenthesis or double quote, the system might still be waiting for it.

Here are a few more expressions to try. 
You can try to figure out on your own what they mean or wait to find out later in the chapter.

(car '(a b c)) <graphic> a
(cdr '(a b c)) <graphic> (b c)
(cons 'a '(b c)) <graphic> (a b c)
(cons (car '(a b c))
      (cdr '(d e f))) <graphic> (a e f)

As you can see, Scheme expressions may span more than one line. 
The Scheme system knows when it has an entire expression by matching double quotes and parentheses.

====
Next, let's try defining a procedure.
定义一个函数：

(define square
  (lambda (n)
    (* n n)))

The procedure square computes the square n2 of any number n. 
We say more about the expressions that make up this definition later in this chapter. 
For now it suffices to say that define establishes variable bindings, lambda creates procedures, 
and * names the multiplication procedure. 
Note the form of these expressions. 
All structured forms are enclosed in parentheses and written in prefix notation, i.e., the operator precedes the arguments. 
As you can see, this is true even for simple arithmetic operations such as *.

Try using square.

(square 5) <graphic> 25
(square -200) <graphic> 40000
(square 0.5) <graphic> 0.25
(square -1/2) <graphic> 1/4

Even though the next definition is short, you might enter it into a file. 
Let's assume you call the file "reciprocal.ss."

(define reciprocal
  (lambda (n)
    (if (= n 0)
        "oops!"
        (/ 1 n))))

This procedure, reciprocal, computes the quantity 1/n for any number n ≠ 0. 
For n = 0, reciprocal returns the string "oops!". 
Return to Scheme and try loading your file with the procedure load.

(load "reciprocal.ss")

Finally, try using the procedure we have just defined.

(reciprocal 10) <graphic> 1/10
(reciprocal 1/10) <graphic> 10
(reciprocal 0) <graphic> "oops!"
(reciprocal (reciprocal 1/10)) <graphic> 1/10

In the next section we will discuss Scheme expressions in more detail. 
Throughout this chapter, keep in mind that your Scheme system is one of the most useful tools for learning Scheme. 
Whenever you try one of the examples in the text, follow it up with your own examples. 
In an interactive Scheme system, the cost of trying something out is relatively small---usually just the time to type it in.

====
Section 2.2. Simple Expressions
简单表达式

The simplest Scheme expressions are constant data objects, such as strings, numbers, symbols, and lists. 
常量数据对象：字符串，数字，符号，列表。
Scheme supports other object types, but these four are enough for many programs. 
We saw some examples of strings and numbers in the preceding section.

Let's discuss numbers in a little more detail. 
Numbers are constants. 
If you enter a number, Scheme echoes it back to you. 
The following examples show that Scheme supports several types of numbers.

123456789987654321 <graphic> 123456789987654321
3/4 <graphic> 3/4
2.718281828 <graphic> 2.718281828
2.2+1.1i <graphic> 2.2+1.1i

Scheme numbers include exact and inexact integer, rational, real, and complex numbers. 
Exact integers and rational numbers have arbitrary precision, i.e., they can be of arbitrary size. 
Inexact numbers are usually represented internally using IEEE standard floating-point representations.

Scheme provides the names +, -, *, and / for the corresponding arithmetic procedures. 
Each procedure accepts two numeric arguments. 
The expressions below are called procedure applications, because they specify the application of a procedure to a set of arguments.

(+ 1/2 1/2) <graphic> 1
(- 1.5 1/2) <graphic> 1.0 

(* 3 1/2) <graphic> 3/2
(/ 1.5 3/4) <graphic> 2.0

Scheme employs prefix notation even for common arithmetic operations. 
Any procedure application, whether the procedure takes zero, one, two, or more arguments, is written as (procedure arg ...). 
This regularity simplifies the syntax of expressions; 
one notation is employed regardless of the operation, and there are no complicated rules regarding the precedence or associativity of operators.

Procedure applications may be nested, in which case the innermost values are computed first. 
We can thus nest applications of the arithmetic procedures given above to evaluate more complicated formulas.

(+ (+ 2 2) (+ 2 2)) <graphic> 8
(- 2 (* 4 1/3)) <graphic> 2/3
(* 2 (* 2 (* 2 (* 2 2)))) <graphic> 32
(/ (* 6/7 7/2) (- 4.5 1.5)) <graphic> 1.0

These examples demonstrate everything you need to use Scheme as a four-function desk calculator. 
While we will not discuss them in this chapter, Scheme supports many other arithmetic procedures. 
Now might be a good time to turn to Section 6.4 and experiment with some of them.

==
列表

Simple numeric objects are sufficient for many tasks, but sometimes aggregate data structures containing two or more values are needed. 
In many languages, the basic aggregate data structure is the array. 
In Scheme, it is the list. 
Lists are written as sequences of objects surrounded by parentheses. 
For instance, (1 2 3 4 5) is a list of numbers, and ("this" "is" "a" "list") is a list of strings. 
Lists need not contain only one type of object, so (4.2 "hi") is a valid list containing a number and a string. 
Lists may be nested (may contain other lists), so ((1 2) (3 4)) is a valid list with two elements, each of which is a list of two elements.

You might notice that lists look just like procedure applications and wonder how Scheme tells them apart. 
That is, how does Scheme distinguish between a list of objects, (obj1 obj2 ...), and a procedure application, (procedure arg ...)?

In some cases, the distinction might seem obvious. 
The list of numbers (1 2 3 4 5) could hardly be confused with a procedure application, since 1 is a number, not a procedure. 
So, the answer might be that Scheme looks at the first element of the list or procedure application 
and makes its decision based on whether that first element is a procedure or not. 
This answer is not good enough, since we might even want to treat a valid procedure application such as (+ 3 4) as a list. 
The answer is that we must tell Scheme explicitly to treat a list as data rather than as a procedure application. 
We do this with quote.
使用 quote 来告诉scheme，不求值。

(quote (1 2 3 4 5)) <graphic> (1 2 3 4 5)
(quote ("this" "is" "a" "list")) <graphic> ("this" "is" "a" "list")
(quote (+ 3 4)) <graphic> (+ 3 4)

The quote forces the list to be treated as data. 
Try entering the above expressions without the quote; 
you will likely receive a message indicating that an exception has occurred for the first two and an incorrect answer (7) for the third.

Because quote is required fairly frequently in Scheme code, 
Scheme recognizes a single quotation mark ( ' ) preceding an expression as an abbreviation for quote.
使用单引号，来作为quote的简写。

'(1 2 3 4) <graphic> (1 2 3 4)
'((1 2) (3 4)) <graphic> ((1 2) (3 4))
'(/ (* 2 -1) 3) <graphic> (/ (* 2 -1) 3)

Both forms are referred to as quote expressions. 
We often say an object is quoted when it is enclosed in a quote expression.

A quote expression is not a procedure application, since it inhibits the evaluation of its subexpression. 
It is an entirely different syntactic form. 
Scheme supports several other syntactic forms in addition to procedure applications and quote expressions. 
Each syntactic form is evaluated differently. 
Fortunately, the number of different syntactic forms is small. 
We will see more of them later in this chapter.

Not all quote expressions involve lists. 
Try the following expression with and without the quote wrapper.

(quote hello) <graphic> hello

The symbol hello must be quoted in order to prevent Scheme from treating hello as a variable. 
Symbols and variables in Scheme are similar to symbols and variables in mathematical expressions and equations. 
When we evaluate the mathematical expression 1 - x for some value of x, we think of x as a variable. 
On the other hand, when we consider the algebraic equation x2 - 1 = (x - 1)(x + 1), 
we think of x as a symbol (in fact, we think of the whole equation symbolically). 
Just as quoting a list tells Scheme to treat a parenthesized form as a list rather than as a procedure application, 
引述一个列表，使得它变成一个数据结构，而不是作为函数调用。
quoting an identifier tells Scheme to treat the identifier as a symbol rather than as a variable. 
引述一个符号，使得它变成一个符号，而不是视为变量。
While symbols are commonly used to represent variables in symbolic representations of equations or programs, 
symbols may also be used, for example, as words in the representation of natural language sentences.

You might wonder why applications and variables share notations with lists and symbols. 
The shared notation allows Scheme programs to be represented as Scheme data, 
simplifying the writing of interpreters, compilers, editors, and other tools in Scheme. 
This is demonstrated by the Scheme interpreter given in Section 12.7, which is itself written in Scheme. 
用scheme来写scheme解释器。
Many people believe this to be one of the most important features of Scheme.

Numbers and strings may be quoted, too.

'2 <graphic> 2
'2/3 <graphic> 2/3
(quote "Hi Mom!") <graphic> "Hi Mom!"

Numbers and strings are treated as constants in any case, however, so quoting them is unnecessary.

==
列表操作

Now let's discuss some Scheme procedures for manipulating lists. 
There are two basic procedures for taking lists apart: car and cdr (pronounced could-er). 
car returns the first element of a list, and cdr returns the remainder of the list. 
(The names "car" and "cdr" are derived from operations supported by the first computer on which a Lisp language was implemented, the IBM 704.) 
Each requires a nonempty list as its argument.

(car '(a b c)) <graphic> a
(cdr '(a b c)) <graphic> (b c)
(cdr '(a)) <graphic> () 

(car (cdr '(a b c))) <graphic> b
(cdr (cdr '(a b c))) <graphic> (c) 

(car '((a b) (c d))) <graphic> (a b)
(cdr '((a b) (c d))) <graphic> ((c d))

The first element of a list is often called the "car" of the list, and the rest of the list is often called the "cdr" of the list. The cdr of a list with one element is (), the empty list.

The procedure cons constructs lists. It takes two arguments. The second argument is usually a list, and in that case cons returns a list.

(cons 'a '()) <graphic> (a)
(cons 'a '(b c)) <graphic> (a b c)
(cons 'a (cons 'b (cons 'c '()))) <graphic> (a b c)
(cons '(a b) '(c d)) <graphic> ((a b) c d) 

(car (cons 'a '(b c))) <graphic> a
(cdr (cons 'a '(b c))) <graphic> (b c)
(cons (car '(a b c))
      (cdr '(d e f))) <graphic> (a e f)
(cons (car '(a b c))
      (cdr '(a b c))) <graphic> (a b c)

Just as "car" and "cdr" are often used as nouns, "cons" is often used as a verb. Creating a new list by adding an element to the beginning of a list is referred to as consing the element onto the list.

Notice the word "usually" in the description of cons's second argument. The procedure cons actually builds pairs, and there is no reason that the cdr of a pair must be a list. A list is a sequence of pairs; each pair's cdr is the next pair in the sequence.

<graphic>

The cdr of the last pair in a proper list is the empty list. Otherwise, the sequence of pairs forms an improper list. More formally, the empty list is a proper list, and any pair whose cdr is a proper list is a proper list.

An improper list is printed in dotted-pair notation, with a period, or dot, preceding the final element of the list.

(cons 'a 'b) <graphic> (a . b)
(cdr '(a . b)) <graphic> b
(cons 'a '(b . c)) <graphic> (a b . c)

Because of its printed notation, a pair whose cdr is not a list is often called a dotted pair. Even pairs whose cdrs are lists can be written in dotted-pair notation, however, although the printer always chooses to write proper lists without dots.

'(a . (b . (c . ()))) <graphic> (a b c)

The procedure list is similar to cons, except that it takes an arbitrary number of arguments and always builds a proper list.

(list 'a 'b 'c) <graphic> (a b c)
(list 'a) <graphic> (a)
(list) <graphic> ()

Section 6.3 provides more information on lists and the Scheme procedures for manipulating them. This might be a good time to turn to that section and familiarize yourself with the other procedures given there.

Exercise 2.2.1

Convert the following arithmetic expressions into Scheme expressions and evaluate them.
  a.	1.2 × (2 - 1/3) + -8.7
  b.	(2/3 + 4/9) ÷ (5/11 - 4/3)
  c.	1 + 1 ÷ (2 + 1 ÷ (1 + 1/2))
  d.	1 × -2 × 3 × -4 × 5 × -6 × 7
Exercise 2.2.2

Experiment with the procedures +, -, *, and / to determine Scheme's rules for the type of value returned by each when given different types of numeric arguments.
Exercise 2.2.3

Determine the values of the following expressions. Use your Scheme system to verify your answers.
  a.	(cons 'car 'cdr)
  b.	(list 'this '(is silly))
  c.	(cons 'is '(this silly?))
  d.	(quote (+ 2 3))
  e.	(cons '+ '(2 3))
  f.	(car '(+ 2 3))
  g.	(cdr '(+ 2 3))
  h.	cons
  i.	(quote cons)
  j.	(quote (quote cons))
  k.	(car (quote (quote cons)))
  l.	(+ 2 3)
  m.	(+ '2 '3)
  n.	(+ (car '(2 3)) (car (cdr '(2 3))))
  o.	((car (list + - * /)) 2 3)
Exercise 2.2.4

(car (car '((a b) (c d)))) yields a. Determine which compositions of car and cdr applied to ((a b) (c d)) yield b, c, and d.
Exercise 2.2.5

Write a Scheme expression that evaluates to the following internal list structure.
<graphic>

Exercise 2.2.6

Draw the internal list structure produced by the expression below.
(cons 1 (cons '(2 . ((3) . ())) (cons '(()) (cons 4 5))))

Exercise 2.2.7

The behavior of (car (car (car '((a b) (c d))))) is undefined because (car '((a b) (c d))) is (a b), (car '(a b)) is a, and (car 'a) is undefined. Determine all legal compositions of car and cdr applied to ((a b) (c d)).
Exercise 2.2.8

Try to explain how Scheme expressions are evaluated. Does your explanation cover the last example in Exercise 2.2.3?

====
Section 2.3. Evaluating Scheme Expressions
求值表达式

Let's turn to a discussion of how Scheme evaluates the expressions you type. 
We have already established the rules for constant objects such as strings and numbers: the object itself is the value. 
You have probably also worked out in your mind a rule for evaluating procedure applications of the form (procedure arg1 ... argn). 
Here, procedure is an expression representing a Scheme procedure, and arg1 ... argn are expressions representing its arguments. 
One possibility is the following.

Find the value of procedure.
Find the value of arg1.
<graphic>
Find the value of argn.
Apply the value of procedure to the values of arg1 ... argn.

For example, consider the simple procedure application (+ 3 4). 
The value of + is the addition procedure, the value of 3 is the number 3, and the value of 4 is the number 4. 
Applying the addition procedure to 3 and 4 yields 7, so our value is the object 7.

By applying this process at each level, we can find the value of the nested expression (* (+ 3 4) 2). 
The value of * is the multiplication procedure, the value of (+ 3 4) we can determine to be the number 7, and the value of 2 is the number 2. 
Multiplying 7 by 2 we get 14, so our answer is 14.

This rule works for procedure applications but not for quote expressions because the subexpressions of a procedure application are evaluated, whereas the subexpression of a quote expression is not. The evaluation of a quote expression is more similar to the evaluation of constant objects. The value of a quote expression of the form (quote object) is simply object.

Constant objects, procedure applications, and quote expressions are only three of the many syntactic forms provided by Scheme. Fortunately, only a few of the other syntactic forms need to be understood directly by a Scheme programmer; these are referred to as core syntactic forms. The remaining syntactic forms are syntactic extensions defined, ultimately, in terms of the core syntactic forms. We will discuss the remaining core syntactic forms and a few syntactic extensions in the remaining sections of this chapter. Section 3.1 summarizes the core syntactic forms and introduces the syntactic extension mechanism.

Before we go on to more syntactic forms and procedures, two points related to the evaluation of procedure applications are worthy of note. First, the process given above is overspecified, in that it requires the subexpressions to be evaluated from left to right. That is, procedure is evaluated before arg1, arg1 is evaluated before arg2, and so on. This need not be the case. A Scheme evaluator is free to evaluate the expressions in any order---left to right, right to left, or any other sequential order. In fact, the subexpressions may be evaluated in different orders for different applications, even in the same implementation.

The second point is that procedure is evaluated in the same way as arg1 ... argn. While procedure is often a variable that names a particular procedure, this need not be the case. Exercise 2.2.3 had you determine the value of the expression ((car (list + - * /)) 2 3). Here, procedure is (car (list + - * /)). The value of (car (list + - * /)) is the addition procedure, just as if procedure were simply the variable +.

Exercise 2.3.1

Write down the steps necessary to evaluate the expression below.
((car (cdr (list + - * /))) 17 5)

========
Section 2.4. Variables and Let Expressions
变量和let表达式

Suppose expr is a Scheme expression that contains a variable var. 
Suppose, additionally, that we would like var to have the value val when we evaluate expr. 
For example, we might like x to have the value 2 when we evaluate (+ x 3). 
Or, we might want y to have the value 3 when we evaluate (+ 2 y). 
The following examples demonstrate how to do this using Scheme's let syntactic form.

(let ((x 2))
  (+ x 3)) <graphic> 5 

(let ((y 3))
  (+ 2 y)) <graphic> 5 

(let ((x 2) (y 3))
  (+ x y)) <graphic> 5

The let syntactic form includes a list of variable-expression pairs, 
along with a sequence of expressions referred to as the body of the let. 
The general form of a let expression is
let语法：
整个绑定列表一个括号，每个变量和它的值一个括号。

(let ((var expr) ...) body1 body2 ...)

We say the variables are bound to the values by the let. 
We refer to variables bound by let as let-bound variables.

A let expression is often used to simplify an expression that would contain two identical subexpressions. 
Doing so also ensures that the value of the common subexpression is computed only once.

(+ (* 4 4) (* 4 4)) <graphic> 32 

(let ((a (* 4 4))) (+ a a)) <graphic> 32

Brackets are often used in place of parentheses to delimit the bindings of a let expression.
可以改用方括号来隔开不同的变量。

(let (
  [list1 '(a b c)] 
  [list2 '(d e f)]
  )
  (cons (cons (car list1)
              (car list2))
        (cons (car (cdr list1))
              (car (cdr list2))))) <graphic> ((a . d) b . e)

Scheme treats forms enclosed in brackets just like forms enclosed in parentheses. 
An open bracket must be matched by a close bracket, and an open parenthesis must be matched by a close parenthesis. 
We use brackets for let (and, as we'll see, several other standard syntactic forms) to improve readability, 
especially when we might otherwise have two or more consecutive open parentheses.

Since expressions in the first position of a procedure application are evaluated no differently from other expressions, 
a let-bound variable may be used there as well.
变量可以是函数。

(let ([f +])
  (f 2 3)) <graphic> 5 

(let ([f +] [x 2])
  (f x 3)) <graphic> 5 

(let ([f +] [x 2] [y 3])
  (f x y)) <graphic> 5

The variables bound by let are visible only within the body of the let.

(let ([+ *])
  (+ 2 3)) <graphic> 6 

(+ 2 3) <graphic> 5

This is fortunate, because we would not want the value of + to be the multiplication procedure everywhere.

It is possible to nest let expressions.
let表达式可以嵌套。

(let ([a 4] [b -3])
  (let ([a-squared (* a a)]
        [b-squared (* b b)])
    (+ a-squared b-squared))) <graphic> 25

When nested let expressions bind the same variable, only the binding created by the inner let is visible within its body.
内部变量会隐藏外部同名变量。

(let ([x 1])
  (let ([x (+ x 1)])
    (+ x x))) <graphic> 4

The outer let expression binds x to 1 within its body, which is the second let expression. 
The inner let expression binds x to (+ x 1) within its body, which is the expression (+ x x). 
What is the value of (+ x 1)? 
Since (+ x 1) appears within the body of the outer let but not within the body of the inner let, 
the value of x must be 1 and hence the value of (+ x 1) is 2. 
What about (+ x x)? 
It appears within the body of both let expressions. 
Only the inner binding for x is visible, so x is 2 and (+ x x) is 4.

The inner binding for x is said to shadow the outer binding. 
A let-bound variable is visible everywhere within the body of its let expression except where it is shadowed. 
The region where a variable binding is visible is called its scope. 
变量的可见性称为“变量的作用域”。
The scope of the first x in the example above is the body of the outer let expression minus the body of the inner let expression, 
where it is shadowed by the second x. 
This form of scoping is referred to as lexical scoping, 
since the scope of each binding can be determined by a straightforward textual analysis of the program.
“词法作用域”，因为它直接基于文本的解析。

Shadowing may be avoided by choosing different names for variables. 
The expression above could be rewritten so that the variable bound by the inner let is new-x.

(let ([x 1])
  (let ([new-x (+ x 1)])
    (+ new-x new-x))) <graphic> 4

Although choosing different names can sometimes prevent confusion, 
shadowing can help prevent the accidental use of an "old" value. 
For example, with the original version of the preceding example, 
it would be impossible for us to mistakenly refer to the outer x within the body of the inner let.

Exercise 2.4.1

Rewrite the following expressions, using let to remove common subexpressions and to improve the structure of the code. Do not perform any algebraic simplifications.
  a.	(+ (- (* 3 a) b) (+ (* 3 a) b))
  b.	(cons (car (list a b c)) (cdr (list a b c)))

Exercise 2.4.2

Determine the value of the following expression. Explain how you derived this value.
(let ([x 9])
  (* x
     (let ([x (/ x 3)])
       (+ x x))))

Exercise 2.4.3

Rewrite the following expressions to give unique names to each different let-bound variable so that none of the variables is shadowed. Verify that the value of your expression is the same as that of the original expression.
  a.	
(let ([x 'a] [y 'b])
  (list (let ([x 'c]) (cons x y))
        (let ([y 'd]) (cons x y))))

  b.	
(let ([x '((a b) c)])
  (cons (let ([x (cdr x)])
          (car x))
        (let ([x (car x)])
          (cons (let ([x (cdr x)])
                  (car x))
                (cons (let ([x (car x)])
                        x)
                      (cdr x))))))

========
Section 2.5. Lambda Expressions
lambda表达式

In the expression (let ([x (* 3 4)]) (+ x x)), the variable x is bound to the value of (* 3 4). 
What if we would like the value of (+ x x) where x is bound to the value of (/ 99 11)? 
Where x is bound to the value of (- 2 7)? 
In each case we need a different let expression. 
When the body of the let is complicated, however, having to repeat it can be inconvenient.

Instead, we can use the syntactic form lambda to create a new procedure 
that has x as a parameter and has the same body as the let expression.

(lambda (x) (+ x x)) <graphic> #<procedure>

The general form of a lambda expression is
lambda语法：

(lambda (var ...) body1 body2 ...)

The variables var ... are the formal parameters of the procedure, and the sequence of expressions body1 body2 ... is its body. 
(Actually, the true general form is somewhat more general than this, as you will see later.)

A procedure is just as much an object as a number, string, symbol, or pair. 
It does not have any meaningful printed representation as far as Scheme is concerned, 
however, so this book uses the notation #<procedure> to show that the value of an expression is a procedure.

The most common operation to perform on a procedure is to apply it to one or more values.

((lambda (x) (+ x x)) (* 3 4)) <graphic> 24

This is no different from any other procedure application. 
The procedure is the value of (lambda (x) (+ x x)), and the only argument is the value of (* 3 4), or 12. 
The argument values, or actual parameters, 
are bound to the formal parameters within the body of the lambda expression in the same way as let-bound variables are bound to their values. 
In this case, x is bound to 12, and the value of (+ x x) is 24. 
Thus, the result of applying the procedure to the value 12 is 24.

Because procedures are objects, we can establish a procedure as the value of a variable and use the procedure more than once.

(let ([double (lambda (x) (+ x x))])
  (list (double (* 3 4))
        (double (/ 99 11))
        (double (- 2 7)))) <graphic> (24 18 -10)

Here, we establish a binding for double to a procedure, then use this procedure to double three different values.

The procedure expects its actual parameter to be a number, since it passes the actual parameter on to +. 
In general, the actual parameter may be any sort of object. 
Consider, for example, a similar procedure that uses cons instead of +.

(let ([double-cons (lambda (x) (cons x x))])
  (double-cons 'a)) <graphic> (a . a)

Noting the similarity between double and double-cons, you should not be surprised to learn that 
they may be collapsed into a single procedure by adding an additional argument.

(let ([double-any (lambda (f x) (f x x))])
  (list (double-any + 13)
        (double-any cons 'a))) <graphic> (26 (a . a))

This demonstrates that procedures may accept more than one argument 
and that arguments passed to a procedure may themselves be procedures.

As with let expressions, lambda expressions become somewhat more interesting 
when they are nested within other lambda or let expressions.

(let ([x 'a])
  (let ([f (lambda (y) (list x y))])
    (f 'b))) <graphic> (a b)

The occurrence of x within the lambda expression refers to the x outside the lambda that is bound by the outer let expression. 
The variable x is said to occur free in the lambda expression or to be a free variable of the lambda expression. 
The variable y does not occur free in the lambda expression since it is bound by the lambda expression. 
A variable that occurs free in a lambda expression should be bound, 
e.g., by an enclosing lambda or let expression, unless the variable is (like the names of primitive procedures) bound outside of the expression, 
as we discuss in the following section.

What happens when the procedure is applied somewhere outside the scope of the bindings for variables that occur free within the procedure, 
as in the following expression?

(let ([f (let ([x 'sam])
           (lambda (y z) (list x y z)))])
  (f 'i 'am)) <graphic> (sam i am)

The answer is that the same bindings that were in effect when the procedure was created are in effect again when the procedure is applied. 
This is true even if another binding for x is visible where the procedure is applied.

(let ([f (let ([x 'sam])
           (lambda (y z) (list x y z)))])
  (let ([x 'not-sam])
    (f 'i 'am))) <graphic> (sam i am)

In both cases, the value of x within the procedure named f is sam.

==
Incidentally, a let expression is nothing more than the direct application of a lambda expression to a set of argument expressions. 
For example, the two expressions below are equivalent.
下面两个表达式是等价的。（hxzon：let可以由lambda实现）

(let ([x 'a]) (cons x x)) ≡ ((lambda (x) (cons x x)) 'a)

In fact, a let expression is a syntactic extension defined in terms of lambda and procedure application, 
which are both core syntactic forms. 
In general, any expression of the form

(let ((var expr) ...) body1 body2 ...)

is equivalent to the following.

((lambda (var ...) body1 body2 ...)
 expr ...)

See Section 3.1 for more about core forms and syntactic extensions.

====
As mentioned above, the general form of lambda is a bit more complicated than the form we saw earlier, 
in that the formal parameter specification, (var ...), need not be a proper list, or indeed even a list at all. 
The formal parameter specification can be in any of the following three forms:

a proper list of variables, (var1 ... varn), such as we have already seen,
a single variable, varr, or （hxzon：“不定参数”，注意，没有括号）
an improper list of variables, (var1 ... varn . varr).（hxzon：“剩余参数”，这里的点号，即clojure中的“&”）

In the first case, exactly n actual parameters must be supplied, 
and each variable is bound to the corresponding actual parameter. 

In the second, any number of actual parameters is valid; 
all of the actual parameters are put into a single list and the single variable is bound to this list. 
第二种情况，可以传入任意数量的参数，它们会被打包成一个列表。（hxzon：注意！没有括号，如果有括号则只接受一个参数）

The third case is a hybrid of the first two cases. 
At least n actual parameters must be supplied. 
The variables var1 ... varn are bound to the corresponding actual parameters, 
and the variable varr is bound to a list containing the remaining actual parameters. 
In the second and third cases, varr is sometimes referred to as a "rest" parameter 
because it holds the rest of the actual parameters beyond those that are individually named.
第三种情况，最后一个参数是“剩余参数”。

Let's consider a few examples to help clarify the more general syntax of lambda expressions.

(let ([f (lambda x x)])
  (f 1 2 3 4)) <graphic> (1 2 3 4) 

(let ([f (lambda x x)])
  (f)) <graphic> () 

(let ([g (lambda (x . y) (list x y))])
  (g 1 2 3 4)) <graphic> (1 (2 3 4)) 

(let ([h (lambda (x y . z) (list x y z))])
  (h 'a 'b 'c 'd)) <graphic> (a b (c d))

In the first two examples, the procedure named f accepts any number of arguments. 
These arguments are automatically formed into a list to which the variable x is bound; 
the value of f is this list. 
In the first example, the arguments are 1, 2, 3, and 4, so the answer is (1 2 3 4). 
In the second, there are no arguments, so the answer is the empty list (). 
The value of the procedure named g in the third example is a list whose first element is the first argument 
and whose second element is a list containing the remaining arguments. 
The procedure named h is similar but separates out the second argument. 
While f accepts any number of arguments, g must receive at least one and h must receive at least two.

Exercise 2.5.1

Determine the values of the expressions below.
  a.	
(let ([f (lambda (x) x)])
  (f 'a))

  b.	
(let ([f (lambda x x)])
  (f 'a))

  c.	
(let ([f (lambda (x . y) x)])
  (f 'a))

  d.	
(let ([f (lambda (x . y) y)])
  (f 'a))

Exercise 2.5.2

How might the primitive procedure list be defined?

Exercise 2.5.3

List the variables that occur free in each of the lambda expressions below. Do not omit variables that name primitive procedures such as + or cons.
  a.	(lambda (f x) (f x))
  b.	(lambda (x) (+ x x))
  c.	(lambda (x y) (f x y))
  d.	
(lambda (x)
  (cons x (f x y)))

  e.	
(lambda (x)
  (let ([z (cons x y)])
    (x y z)))

  f.	
(lambda (x)
  (let ([y (cons x y)])
    (x y z)))

