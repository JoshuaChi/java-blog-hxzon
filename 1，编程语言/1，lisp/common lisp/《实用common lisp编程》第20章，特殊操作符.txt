《实用common lisp编程》第20章，特殊操作符

注释by hxzon
=======
CHAPTER 20 The Special Operators
第20 章 特殊操作符

Controlling Evaluation
20.1 控制求值

Manipulating the Lexical Environment
20.2 维护词法环境

Local Flow of Control
20.3 局部控制流

Unwinding the Stack
20.4 从栈上回退

==
Multiple Values
20.5 多值

EVAL-WHEN
20.6 EVAL-WHEN

Other Special Operators
20.7 其他特殊操作符


==========
CHAPTER 20
The Special Operators

In a way, the most impressive aspect of the condition system covered in the previous chapter 
is that if it wasn’t already part of the language, itcould be written entirely as a user-level library. 
This is possible because Common Lisp’s special operators—while none touches directly on 
signaling or handling conditions—provide enough access to the underlying machinery of the 
language to be able to do things suchas control the unwinding of the stack.
In previous chapters I’ve discussed the most frequently used special operators, but it’s 
worth being familiar with the others for two reasons. First, some of the infrequently used 
special operators are used infrequently simply because whatever need they address doesn’t 
arise that often. It’s good to be familiar withthese special operators so when one of them is 
called for, you’ll at least know it exists. Second, because the 25 special operators—along with 
the basic rule for evaluating function calls and the built-in data types—provide the foundation 
for the rest of the language, a passing familiarity with them will help you understand how the 
language works.

In this chapter, I’ll discuss all the special operators, some briefly and some at length, so 
you can see how they fit together. I’ll point out which ones you can expect to use directly in 
your own code, which ones serve as the basis for other constructs that you use all the time, and 
which ones you’ll rarely use directly but which can be handy in macro-generated code.

========
Controlling Evaluation
控制求值

（hxzon：quote，阻止求值。if。progn，即clojure中的 do 。）

The first category of special operators contains the three operators that provide basic control 
over the evaluation of forms. They’re QUOTE, IF, and PROGN, and I’ve discussed them all already. 
However, it’s worth noting how each of these special operators providesone fundamental kind 
of control over the evaluation of one or more forms. QUOTEprevents evaluation altogether and 
allows you to get at s-expressions as data. IFprovides the fundamental boolean choice operation 
from which all other conditional execution constructs can be built.【1】
And PROGNprovides the ability to sequence a number of forms.

【1】 Of course, if IFwasn’t a special operator but some other conditional form, such as COND, was, you 
could build IFas a macro. Indeed, in many Lisp dialects, starting with McCarthy’s original Lisp, 
CONDwas the primitive conditional evaluation operator.

========
Manipulating the Lexical Environment
操作词法环境

（hxzon：
let
let*
setq
flet，创建本地函数，不可递归。这使得可以调用外部同名函数。
labels，创建本地函数，可递归调用自身。
macrolet，本地宏。
symbol-macrolet，创建“符号宏”。
function，获取函数本身。
）

The largest class of special operators contains the operators that manipulate and access the 
lexical environment. LET and LET*, which I’ve already discussed, 
are examples of special operators that manipulate the lexical environment since they can introduce new lexical bindings 
for variables. Any construct, such as a DO or DOTIMES, that binds lexical variables will have to 
expand into a LET or LET*.【2】

The SETQ special operator is one that accesses the lexical environment 
since it can be used to set variables whose bindings were created by LET and LET*.
Variables, however, aren’t the only thing that can be named within a lexical scope. While 
most functions are defined globally with DEFUN, it’s also possible to create local functions with 
the special operators FLET and LABELS, local macros with MACROLET, and a special kind of 
macro, called a symbol macro, with SYMBOL-MACROLET.

Much like LET allows you to introduce a lexical variable whose scope is the body of the LET, 
FLET and LABELS let you define a function that can be referred to only within the scope of the 
FLET or LABELS form. These special operators are handy when you need a local function that’s 
a bit too complex to define inline as a LAMBDAexpression or that you need to use more than 
once. Both have the same basic form, which looks like this:

(flet (function-definition*)
body-form*)

and like this:

(labels (function-definition*)
body-form*)

where each function-definitionhas the following form:

(name(parameter*) form*)

The difference between FLET and LABELS is that the names of the functions defined with 
FLET can be used only in the body of the FLET, while the names introduced by LABELS can be
flet定义的函数，只能在body中使用。而labels定义的函数，可立即使用。 
used immediately, including in the bodies of the functions defined by the LABELS. Thus, LABELS
can define recursive functions, while FLET can’t. It might seem limiting that FLET can’t be used 
to define recursive functions, but Common Lisp provides both FLET and LABELS because 
sometimes it’s useful to be able to write local functions that can call another function of the 
same name, either a globally defined function or a local function from an enclosing scope.

Within the body of a FLET or LABELS, you can use the names of the functions defined just like 
any other function, including with the FUNCTION special operator. Since you can use FUNCTION
function用来获取函数本身。
to get the function object representing a function defined with FLET or LABELS, and since a 
FLET or LABELS can be in the scope of other binding forms such as LETs, these functions can 
be closures.

Because the local functions can refer to variables from the enclosing scope, they can often 
be written to take fewer parameters than the equivalent helper functions.This is particularly 
handy when you need to pass a function that takes a single argument as a functional parameter. 

【2】 Well, technically those constructs could also expand into a LAMBDAexpression since, as I mentioned 
in Chapter 6, LET could be defined—and was in some earlier Lisps—as a macro that expands into 
an invocation of an anonymous function.

For example, in the following function, which you’ll see again in Chapter 25, the FLETed function, 
count-version, takes a single argument, as required by walk-directory, but can also use the 
variable versions, introduced by the enclosing LET:

(defun count-versions (dir)
(let ((versions (mapcar #'(lambda (x) (cons x 0)) '(2 3 4))))
(flet ((count-version (file)
(incf (cdr (assoc (major-version (read-id3 file)) versions)))))
(walk-directory dir #'count-version :test #'mp3-p))
versions))

This function could also be written using an anonymous function in the place of the 
FLETed count-version, but giving the function a meaningful name makes it a bit easier to read.
And when a helper function needs to recurse, an anonymous function just won’t do.【3】

【3】 Surprising as it may seem, it actually is possible to make anonymous functions recurse. However, 
you must use a rather esoteric mechanism known as the Y combinator. But the Y combinator is 
an interesting theoretical result, not a practical programming tool, so is well outside the scope of 
this book.

When you don’t want to define a recursive helper function as a global function, you can use 
LABELS. For example, the following function, collect-leaves, uses the recursive helper function 
walkto walk a tree and gather all the atoms in the tree into a list, which collect-leavesthen 
returns (after reversing it):

(defun collect-leaves (tree)
(let ((leaves ()))
(labels ((walk (tree)
(cond
((null tree))
((atom tree) (push tree leaves))
(t (walk (car tree))
(walk (cdr tree))))))
(walk tree))
(nreverse leaves)))

Notice again how, within the walkfunction, you can refer to the variable, leaves, introduced 
by the enclosing LET.

FLET and LABELS are also useful operations to use in macro expansions—a macro can 
expand into code that contains a FLET or LABELS to create functions that can be used within 
the body of the macro. This technique can be used either to introduce functions that the user
of the macro will call or simply as a way of organizing the code generated by the macro. This, 
for instance, is how a function such as CALL-NEXT-METHOD, which can be used only within a 
method definition, might be defined.
可以用来创建“只在宏中才能使用的”函数。 

====
本地宏

A near relative to FLET and LABELS is the special operator MACROLET, which you can use to 
define local macros. Local macros work just like global macros defined with DEFMACROexcept 
without cluttering the global namespace. When a MACROLET form is evaluated, the body forms 
are evaluated with the local macro definitions in effect and possibly shadowing global function 
and macro definitions or local definitions from enclosing forms. Like FLET and LABELS, MACROLET
can be used directly, but it’s also a handy target for macro-generated code—by wrapping some 
user-supplied code in a MACROLET, a macro can provide constructs that can be used only within 
that code or can shadow a globally defined macro. You’ll see an example of this latter use of 
MACROLET in Chapter 31.

====
符号宏

普通宏就像函数，而符号宏就像变量（没有参数），展开成表达式。

Finally, one last macro-defining special operator is SYMBOL-MACROLET, which defines a 
special kind of macro called, appropriately enough, a symbol macro. Symbol macros are like 
regular macros except they can’t take arguments and are referred to with a plain symbol rather 
than a list form. In other words, after you’ve defined a symbol macro with a particular name, 
any use of that symbol in a value position will be expanded and the resulting form evaluated in 
its place. This is how macros such as WITH-SLOTSand WITH-ACCESSORSare able to define 
“variables” that access the state of a particular object under the covers. For instance, the 
following WITH-SLOTSform:

(with-slots (x y z) foo (list x y z)))

might expand into this code that uses SYMBOL-MACROLET:

(let ((#:g149 foo))
(symbol-macrolet
((x (slot-value #:g149 'x))
(y (slot-value #:g149 'y))
(z (slot-value #:g149 'z)))
(list x y z)))

When the expression (list x y z)is evaluated, the symbols x, y, and zwill be replaced 
with their expansions, such as (slot-value #:g149 'x).【4】

【4】It’s not required that WITH-SLOTS be implemented with SYMBOL-MACROLET
—in some implementations, WITH-SLOTS may walk the code provided and generate an expansion with x, y, and z
already replaced with the appropriate SLOT-VALUE forms.
 You can see how your implementation 
does it by evaluating this form:

(macroexpand-1 '(with-slots (x y z) obj (list x y z)))

However, walking the body is much easier for the Lisp implementation to do than for user code 
to do; to replace x, y, and zonly when they appear in value positions requires a code walker that 
understands the syntax of all special operators and that recursively expands all macro forms in 
order to determine whether their expansions include the symbols in value positions. The Lisp 
implementation obviously has such a code walker atits disposal, but it’s one of the few parts of 
Lisp that’s not exposed to users of the language.

==
本地符号宏 symbol-macrolet

Symbol macros are most often local, defined with SYMBOL-MACROLET, but Common Lisp 
also provides a macro DEFINE-SYMBOL-MACRO that defines a global symbol macro. A symbol 
macro defined with SYMBOL-MACROLET shadows other symbol macros of the same name 
defined with DEFINE-SYMBOL-MACRO or enclosing SYMBOL-MACROLET forms.

========
Local Flow of Control
局部控制流

（hxzon：
block，
return-from，退回到指定的block，并且可以返回一个值，作为该块的返回值。相当于其它语言中的return。
tagbody，
go
）

The next four special operators I’ll discuss also create and use names in the lexical environment
下面四个操作符同样创建名字，但是是为了控制流程。 
but for the purposes of altering the flow of control rather than defining new functions 
and macros. I’ve mentioned all four of these special operators in passingbecause they provide 
the underlying mechanisms used byother language features. They’re BLOCK, RETURN-FROM, 
TAGBODY, and GO. 

The first two, BLOCK and RETURN-FROM, are used together to write code that 
returns immediately from a section of code—I discussed RETURN-FROM in Chapter 5 as a way 
to return immediately from a function, but it’s more general than that. 
block 和 return-from 用来从中途返回。

The other two, TAGBODY and GO, 
provide a quite low-level goto construct that’s the basis for all the higher-level looping 
constructs you’ve already seen.
tagbody 和 go ，则用来提供其它语言中 goto 的机制。

====
The basic skeleton of a BLOCKform is this:

(block name
form*)

The nameis a symbol, and the forms are Lisp forms. The forms are evaluated in order, and 
the value of the last form is returned as the value of the BLOCK unless a RETURN-FROM is used to 
return from the block early. A RETURN-FROM form, as you saw in Chapter 5, consists of the name 
return-from 使得在块中提前返回。
of the block to return from and, optionally, a form that provides a value to return. When a 
RETURN-FROM is evaluated, it causes the named BLOCK to return immediately. If RETURN-FROM
is called with a return value form, the BLOCK will return the resulting value; otherwise, the 
BLOCK evaluates to NIL.
return-from 第一个参数是块的名字，第二个参数则作为块的返回值，它是可选的。

A BLOCK name can be any symbol, which includes NIL. Many of the standard control 
construct macros, such as DO, DOTIMES, and DOLIST, generate an expansion consisting of a 
BLOCK named NIL. This allows you to use the RETURN macro, which is a bit of syntactic sugar for 
(return-from nil ...), to break out of such loops. 
块的名字可以是任意符号，包括 nil 。
许多控制结构，例如 do，dotimes，dolist，都隐式包含一个名为nil的块，所以可用 return 宏来退出。

Thus, the following loop will print at most 
ten random numbers, stopping as soon as it gets a number greater than 50:

(dotimes (i 10)
(let ((answer (random 100)))
(print answer)
(if (> answer 50) (return))))

Function-defining macros such as DEFUN, FLET, and LABELS, on the other hand, wrap their 
bodies in a BLOCK with the same name as the function. That’s why you can use RETURN-FROM to 
return from a function.
定义函数的许多宏，例如 defun，flet，labels，都将代码体包在一个与函数同名的块中，
所以也可以用 return-from 退出。

====
TAGBODY and GO have a similar relationship to each other as BLOCK and RETURN-FROM: 
a TAGBODY form defines a context in which names are defined that can be used by GO. The skeleton 
of a TAGBODY is as follows:

(tagbody
tag-or-compound-form*)

where each tag-or-compound-form is either a symbol, called a tag, or a nonempty list form. 
The list forms are evaluated in order and the tags ignored, except as I’ll discuss in a moment. 
tagbody的体内是一系列的标签和形式。形式按顺序执行，而标签被忽略。
After the last form of the TAGBODY is evaluated, the TAGBODY returns NIL. Anywhere within the 
lexical scope of the TAGBODY you can use the GO special operator to jump immediately to any of 
the tags, and evaluation will resume with the form following the tag. For instance, you can 
write a trivial infinite loop with TAGBODY and GO like this:
当执行到 go 时，会跳转到它指定的标签。

(tagbody
top
(print 'hello)
(go top))

Note that while the tag names must appear at the top level of the TAGBODY, not nested 
within other forms, the GO special operator can appear anywhere within the scope of the 
TAGBODY. This means you could write a loop that loops a random number of times like this:
注意，标签只能在tagbody顶层出现，而go则可以在任意词法范围内的位置。

(tagbody
top
(print 'hello)
(when (plusp (random 10)) (go top)))

An even sillier example of TAGBODY, which shows you can have multiple tags in a single 
TAGBODY, looks like this:

(tagbody
a (print 'a) (if (zerop (random 2)) (go c))
b (print 'b) (if (zerop (random 2)) (go a))
c (print 'c) (if (zerop (random 2)) (go b)))

This form will jump around randomly printing as, bs, and cs until eventually the last 
RANDOM expression returns 1 and the control falls off the end of the TAGBODY.

==
TAGBODY is rarely used directly since it’s almost always easier to write iterative constructs 
in terms of the existing looping macros. It’s handy, however, for translating algorithms written 
in other languages into Common Lisp, either automatically or manually. 
An example of an automatic translation tool is the FORTRAN–to–Common Lisp translator, f2cl, that translates 
一种用法是用来翻译其它编程语言的程序。
FORTRAN source code into Common Lisp in order to make various FORTRAN libraries available to Common Lisp programmers. 
Since many FORTRAN libraries were written before the 
structured programming revolution, they’re full ofgotos. 
The f2cl compiler can simply translate those gotos to GOs within appropriate TAGBODYs.【5】

Similarly, TAGBODYand GOcan be handy when translating algorithms described in prose or 
by flowcharts—for instance, in Donald Knuth’s classic series The Art of Computer Programming, 
he describes algorithms using a “recipe” format: 

step1, do this; step 2, do that; step 3, go back 
to step 2; and so on. For example, on page 142 of The Art of Computer Programming, Volume 2: 
Seminumerical Algorithms, Third Edition (Addison-Wesley, 1998), he describes Algorithm S, 
which you’ll use in Chapter 27, in this form:
Algorithm S (Selection sampling technique). To select n records at random
from a set of N, where 0 < n ≤N.
S1. [Initialize.] Set t ←0, m ←0. (During this algorithm, m represents the
number of records selected so far, and t is the total number of input records
that we have dealt with.)

【5】. One version of f2cl is available as part of the Common Lisp Open Code Collection (CLOCC): 
http://clocc.sourceforge.net/. By contrast, consider the tricks the authors of f2j, 
a FORTRANto-Java translator, have to play. Although the Java Virtual Machine (JVM) has a goto instruction, 

it’s not directly exposed in Java. So to compile FORTRAN gotos, they first compile the FORTRAN 
code into legal Java source with calls to a dummyclass to represent the labels and gotos. Then 
they compile the source with a regular Java compiler and postprocess the byte codes to translate 
the dummy calls into JVM-level byte codes. Clever, but what a pain.

S2. [Generate U.] Generate a randomnumber U, uniformly distributed
between zero and one.
S3. [Test.] If (N – t)U ≥n – m, go to step S5.
S4. [Select.] Select the next record for the sample, and increase m and t by 1. If
m < n, go to step S2; otherwise the sample is complete and the algorithm
terminates.
S5. [Skip.] Skip the next record (do not include it in the sample), increase t by 1,
and go back to step S2.

This description can be easily translated into a Common Lisp function, after renaming a 
few variables, as follows:

(defun algorithm-s (n max) ; max is N in Knuth's algorithm
(let (seen ; t in Knuth's algorithm
selected ; m in Knuth's algorithm
u ; U in Knuth's algorithm
(records ())) ; the list where we save the records selected
(tagbody
s1
(setf seen 0)
(setf selected 0)
s2
(setf u (random 1.0))
s3
(when (>= (* (- max seen) u) (- n selected)) (go s5))
s4
(push seen records)
(incf selected)
(incf seen)
(if (< selected n)
(go s2)
(return-from algorithm-s (nreverse records)))
s5
(incf seen)
(go s2))))

It’s not the prettiest code, but it’s easy to verify that it’s a faithful translation of Knuth’s 
algorithm. But, this code, unlike Knuth’s prose description, can be run and tested. Then you 
can start refactoring, checking after eachchange that the function still works.【6】

【6】. Since this algorithm depends on values returned by RANDOM, you may want to test it with a 
consistent random seed, which you can get by binding *RANDOM-STATE*to the value of 
(make-random-state nil)around each call to algorithm-s. For instance, you can do a basic 
sanity check of algorithm-sby evaluating this:
(let ((*random-state* (make-random-state nil))) (algorithm-s 10 200))
If your refactorings are all valid, this expression should evaluate to the same list each time.

After pushing the pieces around a bit, you might end up with something like this:

(defun algorithm-s (n max)
(loop for seen from 0
when (< (* (- max seen) (random 1.0)) n)
collect seen and do (decf n)
until (zerop n)))

While it may not be immediately obvious that this code correctly implements Algorithm S, 
if you got here via a series of functions that all behave identically to the original literal translation 
of Knuth’s recipe, you’d have good reason to believe it’s correct.

========
Unwinding the Stack
20.4，从栈上回退

Another aspect of the language that special operators give you control over is the behavior of 
the call stack. For instance, while you normally use BLOCK and TAGBODY to manage the flow of 
control within a single function, you can also use them, in conjunction with closures, to force
前面的示例中，block和tagbody的流程控制，都是在单个函数内。 
an immediate nonlocal return from a function further down on the stack. That’s because BLOCK
names and TAGBODY tags can be closed over by any code within the lexical scope of the BLOCK
or TAGBODY. For example, consider this function:
它们也可以用在闭包中，从而使栈回退。

(defun foo ()
	(format t "Entering foo~%")
	(block a
		(format t " Entering BLOCK~%")
		(bar #'(lambda () (return-from a)))        ;hxzon：在匿名函数中退出
		(format t " Leaving BLOCK~%"))
	(format t "Leaving foo~%"))

The anonymous function passed to baruses RETURN-FROM to return from the BLOCK. But 
that RETURN-FROM doesn’t get evaluated until the anonymous function is invoked with FUNCALL
or APPLY. Now suppose bar looks like this:

(defun bar (fn)
	(format t " Entering bar~%")
	(baz fn)
	(format t " Leaving bar~%"))

Still, the anonymous function isn’t invoked. Now look at baz.

(defun baz (fn)
	(format t " Entering baz~%")
	(funcall fn)        ;hxzon：该匿名函数直到此时，才被调用
	(format t " Leaving baz~%"))

Finally the function is invoked. But what does it mean to RETURN-FROM a block that’s 
several layers up on the call stack? Turns out it works fine—the stack is unwound back to the 
frame where the BLOCK was established and control returns from the BLOCK. The FORMAT
expressions in foo, bar, and bazshow this:

CL-USER> (foo)
Entering foo
Entering BLOCK
Entering bar
Entering baz
Leaving foo        ;hxzon：baz，bar，block a 的剩余部分，都没有执行
NIL

Note that the only “Leaving . . .” message that prints is the one that appears after the BLOCK
in foo.

Because the names of blocks are lexically scoped, a RETURN-FROM always returns from the 
smallest enclosing BLOCK in the lexical environment where the RETURN-FROM form appears 
even if the RETURN-FROM is executed in a different dynamic context. For instance, bar could 
also contain a BLOCK named a, like this:
块的名字是词法范围的，所以下边额外插入一个块，名字也为a，没有任何影响。

(defun bar (fn)
	(format t " Entering bar~%")
	(block a (baz fn))
	(format t " Leaving bar~%"))

This extra BLOCK won’t change the behavior of foo at all—the name ais resolved lexically, 
at compile time, not dynamically, so the intervening block has no effect on the RETURN-FROM. 

Conversely, the name of a BLOCK can be used only by RETURN-FROMs appearing within the 
lexical scope of the BLOCK; there’s no way for code outside the block to return from the block 
except by invoking a closure that closes over a RETURN-FROM from the lexical scope of the BLOCK.

TAGBODY and GO work the same way, in this regard, as BLOCK and RETURN-FROM. When you 
invoke a closure that contains a GO form, if the GO is evaluated, the stack will unwind back to the 
appropriate TAGBODY and then jump to the specified tag.
tagbody 和 go 的工作方式相同。

BLOCK names and TAGBODY tags, however, differ from lexical variable bindings in one 
important way. As I discussed in Chapter 6, lexical bindings have indefinite extent, meaning 
虽然块的名字，和 tagbody 的标签，都是词法范围，但它们和词法变量绑定有一点不同。
the bindings can stick around even after the binding form has returned. BLOCKs and TAGBODYs, 
词法变量绑定的生存期，是“永久的”，
on the other hand, have dynamic extent—you can RETURN-FROM a BLOCK or GO to a TAGBODY tag 
only while the BLOCK or TAGBODY is on the call stack. In other words, a closure that captures a 
而块的名字，和 tagbody 的标签，只在栈中有效。
block name or TAGBODY tag can be passed down the stack to be invoked later, but it can’t be 
returned up the stack. If you invoke a closure that tries to RETURN-FROM a BLOCK, after the BLOCK
itself has returned, you’ll get an error. Likewise, trying to GO to a TAGBODY that no longer exists 
will cause an error.【7】

【7】 This is a pretty reasonable restriction—it’s not entirely clear what it’d mean to return from a form 
that has already returned—unless, of course, you’re a Scheme programmer. Scheme supports 
从一个已经返回的形式中返回，是难以理解的。
continuations, a language construct that makes it possible to return from the same function call 
more than once. But for a variety of reasons, few, if any, languages other than Scheme support 
this kind of continuation.
不过，scheme有“续延”。

It’s unlikely you’ll need to use BLOCK and TAGBODY yourself for this kindof stack unwinding. 
But you’ll likely be using them indirectly whenever you use the condition system, so understanding 
how they work should help you understand better what exactly, for instance, invoking 
a restart is doing.【8】

【8】 If you’re the kind of person who likes to know how things work all the way down to the bits, it may 
be instructive to think about how you might implement the condition system’s macros using 
BLOCK, TAGBODY, closures, and dynamic variables.

====
CATCH and THROW are another pair of special operators that can force the stack to unwind. 
You’ll use these operators even less often than the others mentioned so far—they’re holdovers 
from earlier Lisp dialects that didn’t have Common Lisp’s condition system. They definitely 
shouldn’t be confused with try/catchand try/exceptconstructs from languages such as Java 
and Python.

CATCH and THROW are the dynamic counterparts of BLOCK and RETURN-FROM. That is, you 
catch 和 throw 是 块 和 return-from 的“动态版本”。
wrap CATCH around a body of code and then use THROW to cause the CATCH form to return 
immediately with a specified value. The difference is that the association between a CATCH and 
THROW is established dynamically—instead of a lexically scoped name, the label for a CATCH is 
但是 catch 和 throw 的关联，是通过一个对象（称为“捕捉标签”），而不是一个词法范围的名字。
an object, called a catch tag, and any THROW evaluated within the dynamic extent of the CATCH
that throws that object will unwind the stack back to the CATCH form and cause it to return 
immediately. Thus, you can write a version of the foo, bar, and baz functions from before using 
CATCH and THROW instead of BLOCK and RETURN-FROM like this:

(defparameter *obj* (cons nil nil)) ; i.e. some arbitrary object

(defun foo ()
	(format t "Entering foo~%")
	(catch *obj*
		(format t " Entering CATCH~%")
		(bar)
		(format t " Leaving CATCH~%"))
	(format t "Leaving foo~%"))

(defun bar ()
	(format t " Entering bar~%")
	(baz)
	(format t " Leaving bar~%"))

(defun baz ()
	(format t " Entering baz~%")
	(throw *obj* nil)         ;hxzon：如果在这之前，有人改变了 *obj* 的值，则会导致 throw 抛出另一个对象，那catch就捕捉不到。
	(format t " Leaving baz~%"))

Notice how it isn’t necessary to pass a closure down the stack—baz can call THROW directly. 
它们的好处是不用再传递一个闭包。
The result is quite similar to the earlier version.

CL-USER> (foo)
Entering foo
Entering CATCH
Entering bar
Entering baz
Leaving foo
NIL

However, CATCH and THROW are almost toodynamic. In both the CATCH and the THROW, the 
tag form is evaluated, which means their values are both determined at runtime. Thus, if some 
code in barreassigned or rebound *obj*, the THROW in baz wouldn’t throw to the same CATCH. 
This makes CATCH and THROW much harder to reason about than BLOCK and RETURN-FROM. The 
only advantage, which the version of foo, bar, and baz that use CATCH and THROW demonstrates, 
is there’s no need to pass down a closure in order for low-level code to return from a CATCH—
any code that runs within the dynamic extent of a CATCH can cause it to return by throwing the 
right object.

In older Lisp dialects that didn’t have anything like Common Lisp’s condition system, 
CATCH and THROW were used for error handling. However,to keep them manageable, the catch 
tags were usually just quoted symbols, so you could tell by looking at a CATCH and a THROW
whether they would hook up at runtime. In Common Lisp you’ll rarely have any call to use 
CATCH and THROW since the condition system is so much more flexible.
在早期，还没有状况系统，所以使用它们来完成异常的处理。

====
unwind-protect（hxzon：”回退保护“，相当于java中的finally）

The last special operator related to controlling the stack is another one I’ve mentioned in 
passing before—UNWIND-PROTECT. UNWIND-PROTECT lets you control what happens as the 
stack unwinds—to make sure that certain code always runs regardless of how control leaves 
the scope of the UNWIND-PROTECT, whether by a normal return, by a restart being invoked, or 
by any of the ways discussed in this section.【9】
【9】. UNWIND-PROTECT is essentially equivalent to try/finally constructs in Java and Python.


The basic skeleton of UNWIND-PROTECT looks like this:

(unwind-protect protected-form
cleanup-form*)

The single protected-formis evaluated, and then, regardless of how itreturns, the cleanupforms are evaluated. 
If the protected-formreturns normally, then whatever it returns is returned 
from the UNWIND-PROTECT after the cleanup forms run. The cleanup forms are evaluated in the 
same dynamic environment as the UNWIND-PROTECT, so the same dynamic variable bindings, 
restarts, and condition handlers will be visible to code in cleanup forms as were visible just 
before the UNWIND-PROTECT.

You’ll occasionally use UNWIND-PROTECT directly. More often you’lluse it as the basis for 
WITH-style macros, similar to WITH-OPEN-FILE, that evaluate any number of body forms in a 
”with风格“的宏。
context where they have access to some resource that needs to be cleaned up after they’re 
done, regardless of whether they return normally or bail via a restart or other nonlocal exit. For 
example, if you were writing a database library that defined functions open-connectionand 
close-connection, you might write a macro like this:【10】

【10】 And indeed, CLSQL, the multi-Lisp, multidatabase SQL interface library, provides a similar 
macro called with-database. CLSQL’s home page is at http://clsql.b9.com.

(defmacro with-database-connection ((var &rest open-args) &body body)
`(let ((,var (open-connection ,@open-args)))
(unwind-protect (progn ,@body)
(close-connection ,var))))

which lets you write code like this:

(with-database-connection (conn :host "foo" :user "scott" :password "tiger")
(do-stuff conn)
(do-more-stuff conn))

and not have to worry about closing the database connection, since the UNWIND-PROTECT will 
make sure it gets closedno matter what happens in the body of the with-database-connection
form.

