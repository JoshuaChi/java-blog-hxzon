（官方文档）Lua 5.2 Reference Manual-3，The Language
http://www.lua.org/manual/5.2/manual.html

注释by hxzon
====
3.1 – Lexical Conventions
3.2 – Variables

3.3 – Statements
3.3.1 – Blocks
3.3.2 – Chunks
3.3.3 – Assignment
3.3.4 – Control Structures
3.3.5 – For Statement
3.3.6 – Function Calls as Statements
3.3.7 – Local Declarations

3.4 – Expressions
3.4.1 – Arithmetic Operators
3.4.2 – Coercion
3.4.3 – Relational Operators
3.4.4 – Logical Operators
3.4.5 – Concatenation
3.4.6 – The Length Operator
3.4.7 – Precedence
3.4.8 – Table Constructors
3.4.9 – Function Calls
3.4.10 – Function Definitions

3.5 – Visibility Rules

===============
3 – The Language

This section describes the lexis, the syntax, and the semantics of Lua. 
In other words, this section describes which tokens are valid, how they can be combined, and what their combinations mean.

Language constructs will be explained using the usual extended BNF notation, 
in which {a} means 0 or more a's, and [a] means an optional a. 
Non-terminals are shown like non-terminal, keywords are shown like kword, 
and other terminal symbols are shown like ‘=’. 
The complete syntax of Lua can be found in §9 at the end of this manual.
完整语法见第9章。

====
3.1 – Lexical Conventions
字面量

Lua is a free-form language. 
It ignores spaces (including new lines) and comments between lexical elements (tokens), except as delimiters between names and keywords.

Names (also called identifiers) in Lua can be any string of letters, digits, and underscores, not beginning with a digit. 
Identifiers are used to name variables, table fields, and labels.
标识符。

The following keywords are reserved and cannot be used as names:
关键字：

     and       break     do        else      elseif    end
     false     for       function  goto      if        in
     local     nil       not       or        repeat    return
     then      true      until     while

Lua is a case-sensitive language: and is a reserved word, but And and AND are two different, valid names. 
As a convention, names starting with an underscore followed by uppercase letters (such as _VERSION) are reserved for variables used by Lua.
大小写敏感。
作为惯例，以下划线开头，跟着大写字母的标识符，被lua保留。

The following strings denote other tokens:

     +     -     *     /     %     ^     #
     ==    ~=    <=    >=    <     >     =
     (     )     {     }     [     ]     ::
     ;     :     ,     .     ..    ...

Literal strings can be delimited by matching single or double quotes, 
and can contain the following C-like escape sequences: 
'\a' (bell), '\b' (backspace), '\f' (form feed), '\n' (newline), '\r' (carriage return), '\t' (horizontal tab), 
'\v' (vertical tab), '\\' (backslash), '\"' (quotation mark [double quote]), and '\'' (apostrophe [single quote]). 
A backslash followed by a real newline results in a newline in the string. 
The escape sequence '\z' skips the following span of white-space characters, including line breaks; 
it is particularly useful to break and indent a long literal string into multiple lines without adding the newlines and spaces into the string contents.
字符串，转义字符。

A byte in a literal string can also be specified by its numerical value. 
This can be done with the escape sequence \xXX, where XX is a sequence of exactly two hexadecimal digits, 
or with the escape sequence \ddd, where ddd is a sequence of up to three decimal digits. 
(Note that if a decimal escape is to be followed by a digit, it must be expressed using exactly three digits.) 
Strings in Lua can contain any 8-bit value, including embedded zeros, which can be specified as '\0'.
字节。
字符串可以含有8比特的值。

Literal strings can also be defined using a long format enclosed by long brackets. 
We define an opening long bracket of level n as an opening square bracket followed by n equal signs followed by another opening square bracket. 
So, an opening long bracket of level 0 is written as [[, an opening long bracket of level 1 is written as [=[, and so on. 
A closing long bracket is defined similarly; 
for instance, a closing long bracket of level 4 is written as ]====]. 
A long literal starts with an opening long bracket of any level 
and ends at the first closing long bracket of the same level. 
It can contain any text except a closing bracket of the proper level. 
Literals in this bracketed form can run for several lines, do not interpret any escape sequences, 
and ignore long brackets of any other level. 
Any kind of end-of-line sequence (carriage return, newline, carriage return followed by newline, or newline followed by carriage return) 
is converted to a simple newline.
任何行结束，都转化为单个newline字符。

Any byte in a literal string not explicitly affected by the previous rules represents itself. 
However, Lua opens files for parsing in text mode, and the system file functions may have problems with some control characters. 
So, it is safer to represent non-text data as a quoted literal with explicit escape sequences for non-text characters.

For convenience, when the opening long bracket is immediately followed by a newline, 
the newline is not included in the string. 
As an example, in a system using ASCII (in which 'a' is coded as 97, newline is coded as 10, and '1' is coded as 49), 
the five literal strings below denote the same string:
下面五个字符串是等价的。

     a = 'alo\n123"'
     a = "alo\n123\""
     a = '\97lo\10\04923"'
     a = [[alo
     123"]]
     a = [==[
     alo
     123"]==]

==
数值

A numerical constant can be written with an optional fractional part and an optional decimal exponent, marked by a letter 'e' or 'E'. 
Lua also accepts hexadecimal constants, which start with 0x or 0X. 
Hexadecimal constants also accept an optional fractional part plus an optional binary exponent, marked by a letter 'p' or 'P'. 
Examples of valid numerical constants are

     3     3.0     3.1416     314.16e-2     0.31416E1
     0xff  0x0.1E  0xA23p-4   0X1.921FB54442D18P+1

==
A comment starts with a double hyphen (--) anywhere outside a string. 
If the text immediately after -- is not an opening long bracket, the comment is a short comment, which runs until the end of the line. 
Otherwise, it is a long comment, which runs until the corresponding closing long bracket. 
Long comments are frequently used to disable code temporarily.
长注释和短注释。
注释以双横线开头。

=======
3.2 – Variables
变量

Variables are places that store values. 
There are three kinds of variables in Lua: global variables, local variables, and table fields.
三种类型的变量：全局变量，本地变量，表字段。

A single name can denote a global variable or a local variable 
(or a function's formal parameter, which is a particular kind of local variable):

	var ::= Name

Name denotes identifiers, as defined in §3.1.

Any variable name is assumed to be global unless explicitly declared as a local (see §3.3.7). 
Local variables are lexically scoped: local variables can be freely accessed by functions defined inside their scope (see §3.5).
变量默认都是全局的，除非使用 local 关键字。

Before the first assignment to a variable, its value is nil.

Square brackets are used to index a table:
访问表字段：

	var ::= prefixexp ‘[’ exp ‘]’

The meaning of accesses to table fields can be changed via metatables. 
An access to an indexed variable t[i] is equivalent to a call gettable_event(t,i). 
(See §2.4 for a complete description of the gettable_event function. 
This function is not defined or callable in Lua. 
We use it here only for explanatory purposes.)

The syntax var.Name is just syntactic sugar for var["Name"]:
另一种访问表字段的语法：

	var ::= prefixexp ‘.’ Name

An access to a global variable x is equivalent to _ENV.x. 
Due to the way that chunks are compiled, _ENV is never a global name (see §2.2).

=========
3.3 – Statements
语句

Lua supports an almost conventional set of statements, similar to those in Pascal or C. 
This set includes assignments, control structures, function calls, and variable declarations.

====
3.3.1 – Blocks
块

A block is a list of statements, which are executed sequentially:
块即若干语句。

	block ::= {stat}

Lua has empty statements that allow you to separate statements with semicolons, 
start a block with a semicolon or write two semicolons in sequence:
空语句。

	stat ::= ‘;’

Function calls and assignments can start with an open parenthesis. 
This possibility leads to an ambiguity in Lua's grammar. 
Consider the following fragment:

     a = b + c
     (print or io.write)('done')

The grammar could see it in two ways:

     a = b + c(print or io.write)('done')
     
     a = b + c; (print or io.write)('done')

The current parser always sees such constructions in the first way, interpreting the open parenthesis as the start of the arguments to a call. 
To avoid this ambiguity, it is a good practice to always precede with a semicolon statements that start with a parenthesis:
歧义。总是使用第一种解释。
为了避免歧义，建议总是在括号前加上分号。

     ;(print or io.write)('done')

A block can be explicitly delimited to produce a single statement:

	stat ::= do block end

Explicit blocks are useful to control the scope of variable declarations. 
Explicit blocks are also sometimes used to add a return statement in the middle of another block (see §3.3.4).
显示的块。

====
3.3.2 – Chunks
编译单元。

The unit of compilation of Lua is called a chunk. 
Syntactically, a chunk is simply a block:
编译单元与块相似。

	chunk ::= block

Lua handles a chunk as the body of an anonymous function with a variable number of arguments (see §3.4.10).
lua将编译单元视为一个匿名函数的函数体。 
As such, chunks can define local variables, receive arguments, and return values. 
Moreover, such anonymous function is compiled as in the scope of an external local variable called _ENV (see §2.2). 
The resulting function always has _ENV as its only upvalue, even if it does not use that variable.

A chunk can be stored in a file or in a string inside the host program. 
To execute a chunk, Lua first precompiles the chunk into instructions for a virtual machine, 
and then it executes the compiled code with an interpreter for the virtual machine.

Chunks can also be precompiled into binary form; see program luac for details. 
Programs in source and compiled forms are interchangeable; 
Lua automatically detects the file type and acts accordingly.
编译单元也可预编译。

====
3.3.3 – Assignment
赋值

Lua allows multiple assignments. 
Therefore, the syntax for assignment defines a list of variables on the left side and a list of expressions on the right side. 
The elements in both lists are separated by commas:

	stat ::= varlist ‘=’ explist
	varlist ::= var {‘,’ var}
	explist ::= exp {‘,’ exp}

Expressions are discussed in §3.4.

Before the assignment, the list of values is adjusted to the length of the list of variables. 
If there are more values than needed, the excess values are thrown away. 
If there are fewer values than needed, the list is extended with as many nil's as needed. 
If the list of expressions ends with a function call, then all values returned by that call enter the list of values, 
before the adjustment (except when the call is enclosed in parentheses; see §3.4).

The assignment statement first evaluates all its expressions and only then are the assignments performed. 
Thus the code
（hxzon：注意语法。）

     i = 3
     i, a[i] = i+1, 20

sets a[3] to 20, without affecting a[4] because the i in a[i] is evaluated (to 3) before it is assigned 4. 
Similarly, the line

     x, y = y, x

exchanges the values of x and y, and

     x, y, z = y, z, x

cyclically permutes the values of x, y, and z.

The meaning of assignments to global variables and table fields can be changed via metatables. 
An assignment to an indexed variable t[i] = val is equivalent to settable_event(t,i,val). 
(See §2.4 for a complete description of the settable_event function. 
This function is not defined or callable in Lua. 
We use it here only for explanatory purposes.)

An assignment to a global variable x = val is equivalent to the assignment _ENV.x = val (see §2.2).

====
3.3.4 – Control Structures
控制结构

The control structures if, while, and repeat have the usual meaning and familiar syntax:

	stat ::= while exp do block end
	stat ::= repeat block until exp
	stat ::= if exp then block {elseif exp then block} [else block] end

Lua also has a for statement, in two flavors (see §3.3.5).

The condition expression of a control structure can return any value. 
Both false and nil are considered false. 
All values different from nil and false are considered true (in particular, the number 0 and the empty string are also true).

In the repeat–until loop, the inner block does not end at the until keyword, but only after the condition. 
So, the condition can refer to local variables declared inside the loop block.

The goto statement transfers the program control to a label. For syntactical reasons, labels in Lua are considered statements too:

	stat ::= goto Name
	stat ::= label
	label ::= ‘::’ Name ‘::’

A label is visible in the entire block where it is defined, 
except inside nested blocks where a label with the same name is defined and inside nested functions. 
A goto may jump to any visible label as long as it does not enter into the scope of a local variable.
标签在整个块内可见，除非内嵌块定义了同名标签。

Labels and empty statements are called void statements, as they perform no actions.

The break statement terminates the execution of a while, repeat, or for loop, 
skipping to the next statement after the loop:

	stat ::= break

A break ends the innermost enclosing loop.

The return statement is used to return values from a function or a chunk (which is a function in disguise). 
Functions can return more than one value, so the syntax for the return statement is

	stat ::= return [explist] [‘;’]

The return statement can only be written as the last statement of a block. 
If it is really necessary to return in the middle of a block, 
then an explicit inner block can be used, as in the idiom do return end, because now return is the last statement in its (inner) block.
return语句只能在块的最后一行。
如果要在块的中间return，则得加入一个内嵌块。

====
3.3.5 – For Statement
for语句

The for statement has two forms: one numeric and one generic.
两种for语句。

==
数值递进：

The numeric for loop repeats a block of code while a control variable runs through an arithmetic progression. 
It has the following syntax:

	stat ::= for Name ‘=’ exp ‘,’ exp [‘,’ exp] do block end

The block is repeated for name starting at the value of the first exp, until it passes the second exp by steps of the third exp. 
More precisely, a for statement like

     for v = e1, e2, e3 do block end

is equivalent to the code:

     do
       local var, limit, step = tonumber(e1), tonumber(e2), tonumber(e3)
       if not (var and limit and step) then error() end
       while (step > 0 and var <= limit) or (step <= 0 and var >= limit) do
         local v = var
         block
         var = var + step
       end
     end

Note the following:
注意：

All three control expressions are evaluated only once, before the loop starts. 
They must all result in numbers.
var, limit, and step are invisible variables. 
The names shown here are for explanatory purposes only.
If the third expression (the step) is absent, then a step of 1 is used.
默认步长是1。
You can use break to exit a for loop.

The loop variable v is local to the loop; you cannot use its value after the for ends or is broken. 
If you need this value, assign it to another variable before breaking or exiting the loop.

==
The generic for statement works over functions, called iterators. 
On each iteration, the iterator function is called to produce a new value, stopping when this new value is nil. 
The generic for loop has the following syntax:
迭代器：

	stat ::= for namelist in explist do block end
	namelist ::= Name {‘,’ Name}

A for statement like

     for var_1, ···, var_n in explist do block end

is equivalent to the code:

     do
       local f, s, var = explist
       while true do
         local var_1, ···, var_n = f(s, var)
         if var_1 == nil then break end
         var = var_1
         block
       end
     end

Note the following:
注意：

explist is evaluated only once. 
Its results are an iterator function, a state, and an initial value for the first iterator variable.

f, s, and var are invisible variables. 
The names are here for explanatory purposes only.

You can use break to exit a for loop.

The loop variables var_i are local to the loop; you cannot use their values after the for ends. 
If you need these values, then assign them to other variables before breaking or exiting the loop.

====
3.3.6 – Function Calls as Statements
函数调用

To allow possible side-effects, function calls can be executed as statements:

	stat ::= functioncall

In this case, all returned values are thrown away. 
Function calls are explained in §3.4.9.

====
3.3.7 – Local Declarations
本地变量声明

Local variables can be declared anywhere inside a block. 
The declaration can include an initial assignment:

	stat ::= local namelist [‘=’ explist]

If present, an initial assignment has the same semantics of a multiple assignment (see §3.3.3). 
Otherwise, all variables are initialized with nil.

A chunk is also a block (see §3.3.2), and so local variables can be declared in a chunk outside any explicit block.

The visibility rules for local variables are explained in §3.5.
可见性规则见第3.5节。

