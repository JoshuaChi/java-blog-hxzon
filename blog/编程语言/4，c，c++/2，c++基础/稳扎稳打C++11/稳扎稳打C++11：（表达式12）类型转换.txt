稳扎稳打C++11：（表达式12）类型转换
来源：ilanever.com | 作者：LanPei | 创建时间：2014-3-20 11:27:26
http://ilanever.com/article/sitedetail.html?id=253

类型转换分为隐式类型转换（implicit conversion）和显式类型转换（explicit conversion）。

=======
目录

算术转换
其他隐式转换
显示转换

====
类型转换分为隐式类型转换（implicit conversion）和显式类型转换（explicit conversion）。

隐式类型转换主要发生在以下场合：
在大多数表达式中，如果整型值小于int，那么该值首先会被提升到一个合适的更大的整型。
在条件中，非布尔表达式将被转换为布尔型。
在初始化过程中，初始化器被转换成变量的类型；
在赋值过程中，右侧操作数的类型被转换成左侧操作数的类型。
在算术和关系表达式中，如果操作数混合了不同的类型，那么这些类型将会被转换成通用类型。
在函数调用过程中，也会发生转换。

====
算术转换 

算术类型的转换规则是将所有操作数都转换成操作数中类型范围最大的类型。
例如，
表达式中有个操作数的类型是long double，那么其他的操作数都会被转换成long double类型。

如果表达式中混合使用了浮点数和整数，那么整数将被转换为浮点型。

====
其他隐式转换 

除了算术转换是隐式转换外，还有以下几种情况也是隐式转换：

==
数组到指针的转换
在大多数表达式中，当我们使用数组时，数组都自动转换为指向数组中第一个元素的指针。

但在以下情况中，不会发生数组到指针的转换：
使用decltype(array)声明数组变量的类型
使用&array对数组进行求址
使用sizeof(array)获取数组的大小
使用typeid(array)获取数组类型
使用数组初始化一个引用

==
指针转换

常量0和字面量nullptr能够被转换成任何指针类型。
指向任何非const类型的指针能够被转换成void*，指向任何类型的指针都能够被转换成const void*。
继承关系的类的指针转换。

==
转换到布尔类型

算术类型和指针类型能够自动转换为布尔类型。
如果指针或算术值是0，转换结果为false；否则为true。

==
转换到const类型

我们能够将指向非const类型的指针转换到指向const类型的指针。引用也是如此。
反向的转换不存在。

==
被类类型定义的转换

类类型能够定义编译器自动应用的转换。
例如：

我们可以使用C风格字符串对string变量进行初始化。

还有在条件表达式中使用输入输出对象时，while(cin >> s)，cin >> s 返回的istream，
IO库定义了istream到bool的转换。
返回的bool依赖于流的状态：
如果最后一次成功读取，则返回true；如果最后一次读取失败，则返回false。

====
显示转换 

显示转换分为具名强制转换（Named Casts）和旧式转换（Old-Style Casts）。

==
具名强制转换
具名强制转换的形式如下：

cast-name<type>(expression);

cast-name可以是以下转换：static_cast, dynamic_cast, const_cast, reinterpret_cast。

type是转换的目标类型。
expression是被转换的值。
如果type是引用的话，转换的结果是个左值。

==
static_cast
除了涉及低级const外，任何意义明确的类型转换都可以使用static_cast。
例如：我们使用static_cast强制将表达式从整型转换为double型。
还可以将大范围的算术类型转换成小范围的算术类型。
还可义使用static_cast将void*指针转换为具体类型的指针。

代码示例如下：

#include <iostream>
#include <typeinfo>
 
using namespace std;
 
void static_cast_test()
{
    int i = 20, j = 100;
    double slope = static_cast<double>(j)/i;
    cout << typeid(slope).name() << endl;
 
    double x = 12.345;
    int y = static_cast<int>(x);
    cout << typeid(y).name() << endl;
 
    double d = 78.9;
    void* p = &d;
    double *dp = static_cast<double*>(p);
    cout << p << endl;
    cout << dp << endl;
    cout << *dp << endl;
     
    /*
    Environment:
    g++-4.8(linux64bit)
     
    Output:
    d
    i
    0x7fff375955b8
    0x7fff375955b8
    78.9
    */ 
}
 
int main()
{
    static_cast_test();
    return 0;
}

==
const_cast

const_cast用于将const类型的变量转换成非const类型的变量。
const_cast转换又被称作“剔除const”。
不能使用const_cast来改变表达式的类型。

#include <iostream>
#include <typeinfo>
 
using namespace std;
 
void const_cast_test()
{
    int i = 22;
    const int *pi = &i;
    int *p = const_cast<int*>(pi);
    cout << pi << endl;
    cout << p << endl;
     
    int j = 33;
    p = &j;
    cout << p << endl;
 
    /*
    Environment:
    g++-4.8(linux64)
 
    Output:
    0x7fff6df612c8
    0x7fff6df612c8
    0x7fff6df612cc
    */
}
 
int main()
{
    const_cast_test();
    return 0;
}

==
reinterpret_cast

reinterpret_cast用来将其操作数的bit模式重新解释。

==
旧式转换

旧式转换有以下两种风格：

type (expr); // function-style

(type) expr; // C-language-style

依赖于涉及的类型，旧式转换的行为同下列转换：static_cast、const_cast和reinterpret_cast。

