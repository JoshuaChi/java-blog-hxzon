（hxzon学习笔记）C++

by hxzon
====
1，函数中的变量使用static修饰，
该变量仍然是局部作用域，但是生命周期变为整个程序运行期间。
该变量只在函数第一次调用时初始化一次。
《C++ Primer中文版第3版》

#include <iostream> 
int traceGcd( int v1, int v2 ) 
{ 
 static int depth = 1; 
 cout << "depth #" << depth++ << endl; 
 if ( v2 == 0 ) { 
  depth = 1; 
    return v1; 
 } 
 return traceGcd( v2, v1%v2 ); 
} 

====
2，
《C++ Primer中文版第5版》2.2，3.3

在C++中，初始化和赋值是不同的操作。

--
默认初始化：声明变量时，没有指定值。
在函数体外的内置类型变量，会被默认初始化。
在函数体内的内置类型变量，不会默认初始化。

--
列表初始化（List Initialization）：使用花括号。

intunits_sold = 0;
int units_sold = {0};
int units_sold{0};
int units_sold(0);

使用列表初始化还有个好处，会检查精度丢失。

longdouble ld = 3.1415926536;
int a{ld}, b = {ld}; // error: narrowing conversion required
int c(ld), d = ld;  // ok: but value will be truncated

vector的列表初始化：

vector<int> v1(10);  // v1 has ten elements with value 0
vector<int> v2{10};  // v2 has one element with value 10
vector<int> v3(10, 1); // v3 has ten elements with value 1
vector<int> v4{10, 1}; // v4 has two elements with values 10 and 1

vector<string> v5{"hi"}; // list initialization: v5 has one element
vector<string> v6("hi"); // error: can't construct a vector from a string
literal
vector<string> v7{10};  // v7 has ten default-initialized elements
vector<string> v8{10, "hi"}; // v8 has ten elements with value "hi"

列表初始化优先作为元素值，如果不能作为元素值，才使用构造函数。

----
直接初始化

复制初始化

strings1;  // default initialization; s1 is the empty string
string s2 = s1;  // s2 is a copy of  s1
string s3 = "hiya";  // s3 is a copy of the string literal
string s5 = "hiya";  // copy initialization
string s6("hiya");  // direct initialization
string s4(10, 'c');  // s4 is cccccccccc

字符串默认初始化为空串。

====
3，const

格式：基本数据类型 修饰符 变量名字

要区分“基本数据类型”（不是指内置基本数据类型）和“修饰符”。
修饰符只是修饰随后的变量名字。

最简单的理解const指针的方式仍然是从右向左读他的声明。
“*const”表明变量首先是一个const对象，其次它才是一个指针。

const double *pd = &d;//从右往左，pd首先是一个指针，然后指向double常量。

double *const pd2 = &d2;//pd2本身是一个常量对象，然后是一个指针，所以是常量指针，然后指向double变量。

====
4，range-for

我们不能使用range-for向被迭代的序列中添加元素。
在range-for中，end()的值是被缓存的。
如果我们从序列中添加或删除元素，end()的值可能是无效的。

5，左值和右值

左值与右值另一个不同点是，（hxzon重要）
当使用decltype时：当我们将decltype应用到一个表达式（除了变量）时，
如果表达式产生一个左值，那么decltype的结果将是一个引用类型。
例如：假设p是int*，解引用p产生一个左值，所以decltype(*p)的类型是int&；
另一方面，对p求址产生一个右值，所以decltype(&p)的类型是int**。

====
6，
因为关系运算符返回bool值，所以串联使用这些运算符结果可能不是我们想要的。
如果我们想测试算术类型和指针对象的真值，最直接的方式就是将该值作为条件使用。
因为，当用true和算术类型去比较大小时，true会转换为整型值1。

7，
建议使用复合赋值运算符，因为复合赋值运算符比通常的赋值方式的效率要高。

8，
前置运算符递增（或递减）它的操作数，并返回改变后的对象；
后置运算符递增（或递减）它的操作数，并返回对象的原始值的副本。
建议：只有在必要的情况下才使用后置运算符。

后置递增运算符的优先级高于解引用运算符，所以 *pbeg++ 等于 *(pbeg++)。

以下用法就是错误的：

vector<string> svec = {"me","you","he"};
auto pbeg = svec.begin();
while(pbeg != svec.end())
{
    *pbeg = toupper(*pbeg++);
}

hxzon：如果后面的子表达式先计算，则指针先递增，导致前面的*pbeg指向了下一个位置？

====
9，


