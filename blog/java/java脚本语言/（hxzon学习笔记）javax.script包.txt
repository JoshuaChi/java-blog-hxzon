（hxzon学习笔记）javax.script包

by hxzon
http://docs.oracle.com/javase/8/docs/api/javax/script/package-summary.html
==========
1，所有类
==
Interface Summary

Bindings	
A mapping of key/value pairs, all of whose keys are Strings.
实现了Map接口。

Compilable	
The optional interface implemented by ScriptEngines whose methods compile scripts to a form 
that can be executed repeatedly without recompilation.
不用重复编译。

Invocable	
The optional interface implemented by ScriptEngines whose methods allow the invocation of procedures in scripts 
that have previously been executed.
（hxzon：相当于有全局函数，即不依赖任何对象或类的方法。）

ScriptContext	
The interface whose implementing classes are used to connect Script Engines with objects, 
such as scoped Bindings, in hosting applications.
Each scope is a set of named attributes whose values can be set and retrieved using the ScriptContext methods. 
ScriptContexts also expose Readers and Writers that can be used by the ScriptEngines for input and output.
存放java对象到多个不同的作用域，允许脚本访问。
也提供了Reader和Writer，作为脚本的输入输出。

ScriptEngine	
ScriptEngine is the fundamental interface whose methods must be fully functional in every implementation of this specification.

ScriptEngineFactory	
ScriptEngineFactory is used to describe and instantiate ScriptEngines.

==
Class Summary

AbstractScriptEngine	
Provides a standard implementation for several of the variants of the eval method.

CompiledScript	
Extended by classes that store results of compilations.

ScriptEngineManager	
The ScriptEngineManager implements a discovery and instantiation mechanism for ScriptEngine classes 
and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager.

SimpleBindings	
A simple implementation of Bindings backed by a HashMap or some other specified Map.

SimpleScriptContext	
Simple implementation of ScriptContext.

==
Exception Summary

ScriptException	
The generic Exception class for the Scripting APIs.

==
Package javax.script Description

The scripting API consists of interfaces and classes that define Java TM Scripting Engines 
and provides a framework for their use in Java applications. 
This API is intended for use by application programmers 
who wish to execute programs written in scripting languages in their Java applications. 
The scripting language programs are usually provided by the end-users of the applications.

The main areas of functionality of javax.script package include

Script execution: Scripts are streams of characters used as sources for programs executed by script engines. 
Script execution uses eval methods of ScriptEngine and methods of the Invocable interface.

Binding: This facility allows Java objects to be exposed to script programs as named variables. 
Bindings and ScriptContext classes are used for this purpose.
将java对象作为变量，传入脚本引擎。

Compilation: This functionality allows the intermediate code generated by the front-end of a script engine 
to be stored and executed repeatedly. 
This benefits applications that execute the same script multiple times. 
These applications can gain efficiency since the engines' front-ends only need to execute once per script 
rather than once per script execution. 
Note that this functionality is optional and script engines may choose not to implement it. 
Callers need to check for availability of the Compilable interface using an instanceof check.

Invocation: This functionality allows the reuse of intermediate code generated by a script engine's front-end. 
Whereas Compilation allows entire scripts represented by intermediate code to be re-executed, 
Invocation functionality allows individual procedures/methods in the scripts to be re-executed. 
As in the case with compilation, not all script engines are required to provide this facility. 
Caller has to check for Invocable availability.
（hxzon：相当于有全局函数，即不依赖任何对象或类的方法。）

Script engine discovery and Metadata: 
Applications written to the Scripting API might have specific requirements on script engines. 
Some may require a specific scripting language and/or version while others may require a specific implementation engine and/or version. 
Script engines are packaged in a specified way so that engines can be discovered at runtime and queried for attributes. 
The Engine discovery mechanism is based on the Service discovery mechanism described in the Jar File Specification. 
Script engine implementing classes are packaged in jar files that include a text resource named 
META-INF/services/javax.script.ScriptEngineFactory. 
This resource must include a line for each ScriptEngineFactory that is packaged in the jar file. 
ScriptEngineManager includes getEngineFactories method to get all ScriptEngineFactory instances discovered using this mechanism. 
ScriptEngineFactory has methods to query attributes about script engine.
通过jar包的META-INF信息，发现脚本引擎。

Since:
1.6

==========
2，ScriptContext接口
实现类SimpleScriptContext

默认两种作用域范围：

ENGINE_SCOPE
EngineScope attributes are visible during the lifetime of a single ScriptEngine 
and a set of attributes is maintained for each engine.

GLOBAL_SCOPE
GlobalScope attributes are visible to all engines created by same ScriptEngineFactory.

==
void setBindings(Bindings bindings, int scope)
Associates a Bindings instance with a particular scope in this ScriptContext. 
Calls to the getAttribute and setAttribute methods must map to the get and put methods of the Bindings for the specified scope.

==
Object getAttribute(String name)
Retrieves the value of the attribute with the given name in the scope occurring earliest in the search order. 
The order is determined by the numeric value of the scope parameter (lowest scope values first.)
在所有作用域中查找变量，从低到高。
Parameters:
name - The name of the the attribute to retrieve.
Returns:
The value of the attribute in the lowest scope for which an attribute with the given name is defined. 
Returns null if no attribute with the name exists in any scope.

========
3，ScriptEngineManager
入口。发现脚本引擎。设置全局变量。

==
setBindings(Bindings bindings)
setBindings stores the specified Bindings in the globalScope field.

=========
4，ScriptEngine

==
Object eval(String script,
            ScriptContext context)
     throws ScriptException

Causes the immediate execution of the script whose source is the String passed as the first argument. 
The script may be reparsed or recompiled before execution. 
State left in the engine from previous executions, 
including variable values and compiled procedures may be visible during this execution.
脚本引擎之前的状态，对于本次执行，可能是可见的。

Parameters:
script - The script to be executed by the script engine.
context - A ScriptContext exposing sets of attributes in different scopes. 
The meanings of the scopes ScriptContext.GLOBAL_SCOPE, and ScriptContext.ENGINE_SCOPE are defined in the specification. 

The ENGINE_SCOPE Bindings of the ScriptContext 
contains the bindings of scripting variables to application objects to be used during this script execution.
Returns:
The value returned from the execution of the script.

==
Object eval(String script)
     throws ScriptException
Executes the specified script. The default ScriptContext for the ScriptEngine is used.
使用默认的上下文。

==
Object eval(String script,
            Bindings n)
     throws ScriptException

Executes the script using the Bindings argument as the ENGINE_SCOPE Bindings of the ScriptEngine during the script execution. 
The Reader, Writer and non-ENGINE_SCOPE Bindings of the default ScriptContext are used. 
The ENGINE_SCOPE Bindings of the ScriptEngine is not changed, and its mappings are unaltered by the script execution.
指定引擎级别的上下文。原来的引擎级别的上下文不受任何影响。

Parameters:
script - The source for the script.
n - The Bindings of attributes to be used for script execution.

==
void put(String key, Object value)
Sets a key/value pair in the state of the ScriptEngine that may either create a Java Language Binding 
to be used in the execution of scripts or be used in some other way, 
depending on whether the key is reserved. 
Must have the same effect as getBindings(ScriptContext.ENGINE_SCOPE).put.
设置引擎级别的上下文变量。

