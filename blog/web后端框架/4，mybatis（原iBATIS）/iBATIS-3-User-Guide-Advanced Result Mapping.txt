iBATIS-3-User-Guide-Advanced Result Mapping


iBATIS was created with one idea in mind:  Databases aren’t always what you want or need them to be. 
While we’d love every database to be perfect 3rd
 normal form or BCNF, they aren’t.  And it would be
great if it was possible to have a single database map perfectly to all of the applications that use it, it’s
not.  Result Maps are the answer that iBATIS provides to this problem.  
 
For example, how would we map this statement?

<!-- Very Complex Statement  -->  

<select id="selectBlogDetails" parameterType="int" resultMap=" detailedBlogResultMap ">
   select
    B.id as blog_id,
    B.title as blog_title,  
    B.author_id as blog_author_id,  
    A.id as author_id,
    A.username as author_username,  
    A.password as author_password,  
    A.email as author_email,
    A.bio as author_bio,
    A.favourite_section as author_favourite_section,  
    P.id as post_id,
    P.blog_id as post_blog_id,
    P.author_id as post_author_id,  
    P.created_on as post_created_on,  
    P.section as post_section,
    P.subject as post_s ubject,
    P.draft as draft,  
    P.body as post_body,
    C.id as comment_id,  
    C.post_id as comment_post_id,
    C.name as comment_name,
    C.comment as comment_text,
    T.id as tag_id,
    T.name as tag_name
    from Blog B
    left outer join Author A on B.author_id = A.id
    left outer join Post P on B.id = P.blog_id  
    left outer join Comment C on P.id = C.post_id  
    left outer join Post_Tag PT on PT.post_id = P.id  
    left outer join Tag T on PT.tag_id = T.id
    where B.id = #{id}
  </select> 

You’d probably want to map it to an intelligent object model consisting of a Blog that was written by an
Author, and has many Posts, each of which may have zero or many Comments and Tags.  The following
is a complete example of a complex ResultMap (assum e Author, Blog, Post, Comments and Tags are all
type aliases).  Have a look at it, but don’t worry, we’re going to go through each step.  While it may look
daunting at first, it’s actually very simple.

<!-- Very Complex Result Map -->  

<resultMap id="detailedBlogResultMap " type="Blog">

  <constructor>
    <idArg column="id" javaType="int"/>  
  < / constructor>

  <result property="title" column="blog_title"/>

  <association property="author" column="blog_author_id" javaType=" Author">
    <id property="id" column="author_id"/>
    <result property="username" column="author_username"/>
    <result property="password" column="author_password"/>
    <result property="email" column="author_email"/>  
    <result property="bio" column="author_bio"/>
    <result proper ty="favouriteSection" column="author_favourite_section"/>  
  </association>  

  <collection property="posts" ofType="Post">
    <id property="id" column="post_id"/>
    <result property="subject" column="post_subject"/>  
    <association property="author" column="post_author_id" javaType="Author"/>  

    <collection property="comments" column="post_id" ofType=" Comment">
      <id property="id" column="comment_id"/>
    </collection>

    <collection property="tags" column="post_id" ofType=" Tag" > 
      <id property="id" column="tag_id"/>  
    </collection>

    <discriminator javaType="int" column="draft">  
      <case value="1" resultType="DraftPost"/>  
    </discriminator>

  </collection>

</resultMap>

 
The resultMap element has a number of sub‐ elements and a struct ure worthy of some discussion.  The
following is a conceptual view of the resultMap element.  
 
resultMap  
•   constructor   –  used for injecting results into the constructor of a class upon instantiation  
o   idArg   –  ID argument; flagging results as ID will help improv e overall performance
o   arg  –  a normal result injected into the constructor  
•   id   –  an ID result; flagging results as ID will help improve overall performance  
•   result   –  a normal result injected into a field or JavaBean property  
•   association   –  a complex type assoc iation; many results will roll up into this type  
o   nested result mappings   –  associations are resultMaps themselves, or can refer to
one  
•   collection  –  a collection of complex types  
o   nested result mappings   –  collections are resultMaps themselves, or can refer to  one  
•   discriminator   –  uses a result value to determine which resultMap to use  
o   case   –  a case is a result map based on some value  
   nested result mappings  –  a case is also a result map itself, and thus can
contain many of these same elements, or it can refer to  an external
resultMap.  
 
  Best Practice:   Always build ResultMaps incrementally.  Unit tests really help out here.  If you
try to build a gigantic resultMap like the one above all at once, it’s likely you’ll get it wrong and it
will be hard to work with.   Start simple, and evolve it a step at a time.  And unit test!  The
downside to using frameworks is that they are sometimes a bit of a black box (open source or
not).  Your best bet to ensure that you’re achieving the behaviour that you intend, is to write
unit tests.  It also helps to have them when submitting bugs. 
 
The next sections will walk through each of the elements in more detail. 

=========================
id, result


<id property="id" column="post_id"/>  
<result property="subject" column="post_subject"/>
 
These are the most  basic of result mappings.  Both id , and  result map a single column value to a single
property or field of a simple data type (String, int, double, Date, etc.).  
 
The only difference between the two is that id  will flag the result as an identifier propert y to be used
when comparing object instances.  This helps to improve general performance, but especially
performance of caching and nested result mapping (i.e. join mapping).    
 
Each has a number of attributes:
 

property 
The field or  property to map the column result to.  If a matching JavaBeans property
exists for the given name, then that will be used.  Otherwise, iBATIS will look for a field
of the given name.  In both cases you can use complex property navigation using the
usual d ot notation.  For example, you can map to something simple like: “username”,
or to something more complicated like:  “address.street.number”.
column
The column name from the database, or the aliased column label. This is the same
string that would normall y be passed to resultSet.getString(columnName).
javaType 
A fully qualified Java class name, or a type alias (see the table above for the list of built ‐
in type aliases).  iBATIS can usually figure out the type if you’re mapping to a JavaBean. 
However, if  you are mapping to a HashMap, then you should specify the javaType
explicitly to ensure the desired behaviour.
jdbcType 
The JDBC Type from the list of supported types that follows this table.  The JDBC type is
only required for nullable columns upon insert, update or delete.   This is a JDBC
requirement, not an iBATIS one.  So even if you were coding JDBC directly, you’d need
to specify this type –  but only for nullable values. 
typeHandler
We discussed default type handlers previously in this documentation.  Using this
property you can override the default type handler on a mapping ‐ by ‐ mapping basis. 
The value is either a fully qualified class name of a TypeHandler implementation, or a
type alias.   
Supported JDBC Types
For future reference, iBATIS supports the following JDBC Types via the included JdbcType enumeration.  

 
BIT   FLOAT  CHAR   TIMESTAMP  OTHER  UNDEFINED
TINYINT  REAL  VARCHAR   BINARY   BLOB   NVARCHAR
SMALLINT  DOUBLE  LONGVARCHAR   VARBINARY   CLOB   NCHAR
INTEGER   NUMERIC   DATE  LONGVARBINARY   BOOLEAN   NCLOB
B IGINT  DECIMAL  TIME  NULL  CURSOR   
 

============================
constructor


<constructor>  
<idArg column="id" javaType="int"/>   
<arg column=”username” javaType=”String”/>
< / constructor>
 
While properties will work for most Data Transfer Object (DTO) type classes, and likely most of your
domain model, there may be some cases where you want to use immutable classes.  Often tables that
contain reference or lookup data that rarely or never changes is suited to immutable classes. 
Constructor injection allows you to set values on a class upon instantiation, without exposing public
methods.  iBATIS also supports private properties and private JavaBeans properties to achieve this, but
some people prefer Constructor injection.  The  constructor  element enables this.    
 
Consider the following const ructor:  
 
public class User {
      //… 
    public User(int id, String username) {
        //…  
    }
    //…
}  
 
In order to inject the results into the constructor, iBATIS needs to identify the constructor by the type of
its parameters.  Java has no way to in trospect (or reflect) on parameter names.  So when creating a
constructor element, ensure that the arguments are in order, and that the data types are specified.
 
<constructor>  
<idArg column="id" javaType="int"/>   
<arg column=”username” javaType=”String”/>
< / constructor>
 
The rest of the attributes and rules are the same as for the regular id and  result elements.   
 

column
The column name from the database, or the aliased column label. This is the same
string that would normally be pas sed to resultSet.getString(columnName). 
javaType 
A fully qualified Java class name, or a type alias (see the table above for the list of built ‐
in type aliases).  iBATIS can usually figure out the type if you’re mapping to a JavaBean. 
However, if you are mapping to a HashMap, then you should specify the javaType
explicitly to ensure the desired behaviour.
jdbcType 
The JDBC Type from the list of supported types that follows this table.  The JDBC type is
only required for nullable columns upon insert, updat e or delete.  This is a JDBC
requirement, not an iBATIS one.  So even if you were coding JDBC directly, you’d need
to specify this type –  but only for nullable values.
typeHandler
We discussed default type handlers previously in this documentation.  Using this
property you can override the default type handler on a mapping ‐ by ‐ mapping basis. 
The value is either a fully qualified class name of a TypeHandler implementation, or a
type alias.   
==========================
association


<association property="author" column="blog_author_id" javaType=" Author">
<id property="id" column="author_id"/>
<result property="username" column="author_username"/>  
</association>
 
The association element deals with a “has‐ one” type relationship.  For example, in our example, a Blog
has one Author.  A n association mapping works mostly like any other result.  You specify the target
property, the column to retrieve the value from, the javaType of the property (which iBATIS can figure
out most of the time), the jdbcType if necessary and a typeHandler if you want to override the retrieval
of the result values. 
 
Where the association differs is that you need to tell iBATIS how to load the association.  iBATIS can do
so in two different ways:
•   Nested Select:  By executing another mapped SQL statement that re turns the complex type
desired.   
•   Nested Results:  By using nested result mappings to deal with repeating subsets of joined
results.
 
First, let’s examine the properties of the element.  As you’ll see, it differs from a normal result mapping
only by the  select and resultMap attributes.  
  

property
The field or property to map the column result to.  If a matching JavaBeans property
exists for the given name, then that will be used.  Otherwise, iBATIS will look for a field
of the given nam e.  In both cases you can use complex property navigation using the
usual dot notation.  For example, you can map to something simple like: “username”,
or to something more complicated like:  “address.street.number”.
column
The column name from the database, or the aliased column label. This is the same
string that would normally be passed to resultSet.getString(columnName).  
Note:   To deal with composite keys,  you can specify multiple column names  to pass
to the nested select statement by using the syntax
column=”{prop1=col1,prop2=col2}” .  This will cause prop1 and prop2 to be set against
the parameter object for the target nested select statement. 
javaType 
A fully qualified Java class name, or a type alias (see the table above for the list of built ‐
in  type aliases).  iBATIS can usually figure out the type if you’re mapping to a JavaBean. 
However, if you are mapping to a HashMap, then you should specify the javaType
explicitly to ensure the desired behaviour.
jdbcType 
The JDBC Type from the list of supported types that follows this table.  The JDBC type is
only required for nullable columns upon insert, update or delete.   This is a JDBC
requirement, not an iBATIS one.  So even if you were coding JDBC directly, you’d need
to specify this type –  but only  for nullable values.  
typeHandler
We discussed default type handlers previously in this documentation.  Using this
property you can override the default type handler on a mapping ‐ by ‐ mapping basis. 
The value is either a fully qualified class name of a Ty peHandler implementation, or a
type alias.  
Nested Select for Association

select
The ID of another mapped statement that will load the complex type required by this
property mapping.  The values retrieved from columns specified in the column
attribute w ill be passed to the target  select statement as parameters.    A detailed
example follows this table.  
Note:   To deal with composite keys,  you can specify multiple column names  to pass
to the nested select statement by using the syntax
column=”{prop1=col1,p rop2=col2}” .  This will cause prop1 and prop2 to be set against
the parameter object for the target nested select statement. 
 
For example:
 
<resultMap id=”blogResult” type=”Blog”>  
  <association property="author" col umn="blog_author_id" javaType=" Author"  
select=”selectAuthor” / >  
</resultMap>
 
< select   id=”selectBlog” parameterType=”int” resultMap=”blogResult”>  
  SELECT * FROM BLOG WHERE ID = ${id}
</select>
 
< select   id=”selectAuthor” parameterType=”int” resultType="Author">
  SELECT * FROM AUTHOR WHERE ID = ${id}  
</select>
 
That’s it.  We have two select statements: one to load the Blog, the other to load the Author, and the
Blog’s resultMap describes that the “selectAuthor” statement should be used to load its author
property.     
 
All other properties will  be loaded automatically assuming their column and property names match.
 
While this approach is simple, it will not perform well for large data sets or lists.  This problem is known
as the “N+1 Selects Problem”.  In a nutshell, the N+1 selects problem is c aused like this:
 
•   You execute a single SQL statement to retrieve a list of records (the “+1”).  
•   For each record returned, you execute a select statement to load details for each (the “N”).  
 
This problem could result in hundreds or thousands of SQL statement s to be executed.  This is not
always desirable.    
 
The upside is that iBATIS can lazy load such queries, thus you might be spared the cost of these
statements all at once.  However, if you load such a list and then immediately iterate through it to
access  the nested data, you will invoke all of the lazy loads, and thus performance could be very bad.    
 
And so, there is another way.

Nested Results for Association 


resultMap
This is the ID of a ResultMap that can map the nested results of this association into an
appropriate object graph.  This is an alternative to using a call to another select
statement. It allows you to join multiple tables together into a single ResultSet.  Such a
ResultSet will contain duplicated, repeating groups of data that needs to be
decomposed and mapped properly to a nested object graph.  To facilitate this, iBATIS
lets you “chain” result maps together, to deal with the nested results.   An example will
be far easier to follow, and one follows this table.  
 
You’ve already seen a ver y complicated example of nested associations above.  The following is a far
simpler example to demonstrate how this works.  Instead of executing a separate statement, we’ll join
the Blog and Author tables together, like so:
 
<select id="selectBlog" parameterType="int" resultMap="blogResult">
    select
    B.id     as blog_id,  
    B.title     as blog_title,
    B.author_id    as blog_author_id,  
    A.id     as author_id,  
    A.username   as author_username,
    A.password   as author_password,
    A.email     as author_email,
    A.bio     as author_bio  
    from Blog B  left outer join Author A on B.author_id = A.id  
    where B.id = #{id}
  </select>  
 
Notice the join, as well as the care taken to ensure that all results are aliased with a unique and clear
name.  This makes  mapping far easier.  Now we can map the results:  
 
<resultMap id="blogResult" type="Blog">  
  <id property=”blog_id” column="id" />  
  <result property="title" column="blog_title"/>
  <association property="author" column="blog_author_id" javaType="Author"  
resultMap=”authorResult”/>  
</resultMap>
 
< resultMap id="author Result " type=" Author">  
  <id property="id" column="author_id"/>
  <result property="username" column="author_username"/>
  <result property="password" column="author_password"/>
  <result proper ty="email" column="author_email"/>  
  <result property="bio" column="author_bio"/>  
</resultMap>  
 
In the example above you can see at the Blog’s “author ”  association  delegates to the “authorResult”
resultMap to load the Author instance.    
 
Very Important:  i d  elements play a very important role in Nested Result mapping.  You should always
specify one or more properties that can be used to uniquely identify the results.  The truth is that iBATIS
will still work if you leave it out, but at a severe performance cost.  Choose as few properties as possible
that can uniquely identify the result. The primary key is an obvious choice (even if composite).  
 
Now, the above example used an external resultMap element to map the association.  This makes the
Author resultMap reusable.  However, if you have no need to reuse it, or if you simply prefer to co ‐
locate your result mappings into a single descriptive resultMap, you can nest the association result
mappings.  Here’s the same example using this approach:  
 
<resultMap id="blogResult" type="Blog">
  <id property=”blog_id” column="id" />  
  <result property="title" column="blog_title"/>
  <association property="author" column="blog_author_id" javaType="Author" >  
<id property="id" column="author_id"/>
<result property="usern ame" column="author_username"/>  
<result property="password" column="author_password"/>  
<result property="email" column="author_email"/>
<result property="bio" column="author_bio"/>  
    </association>  
</resultMap>
 
You’ve seen above how to deal with a “has one” type association.  But what about “has many”?  That’s
the subject of the next section. 


==========================
collection 


 < collection property="posts" ofType="domain.blog.Post">  
  <id property="id" column="post_id"/>  
  <result property="subject" column="post_subject"/>
  <re sult property="body" column="post_body"/>  
</collection>  
 
The  collection  element works almost identically to the association.  In fact, it’s so similar, to document
the similarities would be redundant.  So let’s focus on the differences. 
 
To continue with our example above, a Blog only had one Author.  But a Blog has many Posts.  On the
blog class, this would be represented by something like:
 
private List<Post> posts;
 
To map a set of nested results to a List like this, we use the  collection  element.  Just  like the  association  
element, we can use a nested select, or nested results from a join.    
Nested Select for Collection  
First, let’s look at using a nested select to load the Posts for the Blog.    
 
<resultMap id=”blogResult” type=”Blog”>  
  <collection property="posts" javaType=”ArrayList” column="blog_id"  
ofType="Post" select=”selectPostsForBlog”/>
</resultMap>
 
< select   id=”selectBlog” parameterType=”int” resultMap=”blogResult”>  
  SELECT * FROM BLOG WHERE ID = ${id}
</select>
 
< select   id=”selectPostsForBlog” parameterType=”int” resultType="Author">  
  SELECT * FROM POST WHERE BLOG_ID = ${id}
</select>
 
There are a number things you’ll notice immediately, but for the most part it looks very similar to the
association  element we learned about above.  First, y ou’ll notice that we’re using the collection  element. 
Then you’ll notice that there’s a new “ofType”  attribute.  This attribute is necessary to distinguish
between the JavaBean (or field) property type and the type that the collection contains.  So you co uld
read the following mapping like this:

<collection property="posts" javaType=” ArrayList” column="blog_id"  
ofType="Post" select=”selectPostsForBlog”/>  
 
   Read as:  “A collection of posts in an ArrayList of type Post.”  

The javaType attribute is really unnecessary, as iBATIS will figure this out for you in most cases.  So you
can often shorten this down to simply:  

<collection property="posts" column="blog_id"  ofType="Post"  
  select=”selectPostsForBlog”/>  
 

Nested Results for Collection

By this point, you c an probably guess how nested results for a collection will work, because it’s exactly
the same as an association, but with the same addition of the  “ofType”  attribute applied.  
First, let’s look at the SQL:  

<select id="selectBlog" parameterType="int" resultMap="blogResult">
    select
    B.id as blog_id,
    B.title as blog_title,  
    B.author_id as blog_author_id,  
    P.id as post_id,
    P.subject as post_subject,
    P.body as post_body,
    from Blog B
    left outer join Post P on B.id = P.blog_id  
    where B.id = #{id}  
  </select>  

Again, we’ve joined the Blog and Post tables, and have taken care to ensure quality result column labels
for simple mapping.  Now mapping a Blog with its collection of Post mappings is as simple as:  

<resultMap id="blogResult"  type="Blog">  
  <id property=”id” column="blog_id" />  
  <result property="title" column="blog_title"/>
  <collection property="posts" ofType="Post">
    <id property="id" column="post_id"/>
    <result property="subject" column="post_subject"/>  
    <result property="body" column="post_body "/>  
  </collection>
</resultMap>
 
Again, remember the importance of the  id  elements here, or read the  association  section above if you
haven’t already.  
Also, if you prefer the longer form that allows for more reusabilit y of your result maps, you can use the
following alternative mapping:  

<resultMap id="blogResult" type="Blog">  
  <id property=”id” column="blog_id" />  
  <result property="title" column="blog_title"/>
  <collection property="posts" ofType="Post"  resultMap=”blogPostResult”/ >  
</resultMap>
 
<resultMap id="blogPostResult" type=" Post">
    <id property="id" column="post_id"/>
    <result property="subject" column="post_subject"/>  
    <result property="body" column="post_body "/>  
</resultMap>
 
 Note:  There’s no l imit to the depth, breadth or combinations of the associations and collections that
you map.  You should keep performance in mind when mapping them.  Unit testing and performance
testing of your application goes a long way toward discovering the best approach for your application. 
The nice thing is that iBATIS lets you change your mind later, with very little (if any) impact to your code.
Advanced association and collection mapping is a deep subject. Documentation can only get you so far. 
With a little pr actice, it will all become clear very quickly. 


==========================
discriminator


<discriminator javaType="int" column="draft">
  <case value="1" resultType="DraftPost"/>
</discriminator>  
 
Sometimes a single database query might return result sets of many different (but hopefully somewhat
related) data types.  The discriminator element was designed to deal with this situation, and others,
including class inheritance hierarchies.  The discriminator is pretty simple to understand, as it  behaves
much like a switch statement in Java. 
 
A discriminator definition specifies column and  javaType  attributes. The column is where iBATIS will look
for the value to compare.  The javaType is required to ensure the proper kind of equality test is
performed (although String would probably work for almost any situation).  For example:   
 
<resultMap id="vehicleResult " type=" Vehicle">
    <id property=”id” column="id" />  
    <result property=" vin " column="vin "/>  
<result property=" year" column="year"/>  
<result property=" make" column="make"/>  
<result property=" model" column="model"/>  
<result property=" color" column="color"/>  
<discriminator javaType="int" column="vehicle_type">
  <case value="1" resultMap="carResult"/>  
  <case value="2" resultMap="truckResult "/>  
  <case value="3" resultMap="vanResult"/>  
  <case value="4" resultMap="suvResult"/>  
</discriminator>  
</resultMap>
 
    
In this example, iBATIS would retrieve each record from the result set and compare its vehicle type
value.  If it matches any of the discriminator cases, then it will use the resultMap specified by the case. 
This is done exclusively, so in other words, the rest of the resultMap is ignored (unless it is extended,
which we talk about in a second).  If none of the cases match, then iBATIS simply uses the resultMap as
defined outside of the discriminator block.  So, if the carResult was declared as follows:  
 
<resultMap id="carResult" type=" Car ">
    < result property=”doorCount” column="door_count" />  
</resultMap>
 
Then ONLY the doorCount property would be loaded.  This is done to allow completely independent
groups of discriminator cases, even ones that have no relationship to the parent resultMap.  In this case
we do of course know that there’s a relationship between cars and vehicles, as a Car is ‐ a Vehicle. 
Therefore, we want the re st of the properties loaded too.  One simple change to the resultMap and
we’re set to go.
 
<resultMap id="carResult" type=" Car "  extends=”vehicleResult”>  
    < result property=”doorCount” column="door_count" />  
</resultMap>
 
Now all of the properties from bo th the vehicleResult and carResult will be loaded.

Once again though, some may find this external definition of maps somewhat tedious.  Therefore
there’s an alternative syntax for those that prefer a more concise mapping style.  For example:
 
<resultMap id=" vehicleResult " type=" Vehicle">
    <id property=”id” column="id" />  
    <result property=" vin " column="vin "/>  
<result property=" year" column="year"/>  
<result property=" make" column="make"/>  
<result property=" model" column="model"/>  
<result property=" color " column="color"/>  
<discriminator javaType="int" column="vehicle_type">
  <case value="1" resultType="carResult">  
      < result property=”doorCount” column="door_count" />  
  </case>
  <case value="2 " resultType="truckResult">  
          < result property=”boxSize” column="box_size " />  
      < result property=”extendedCab ” column="extended_cab" />  
  </case>
  <case value="3 " resultType="vanResult">  
      < result property=”powerSlidingDoor ” column="power_sliding_door " />  
  </case>
  <case value="4 " resultType="suvResult">  
           < result property=”allWheelDrive ” column="all_wheel_drive" />  
  </case>
</discriminator>  
</resultMap>
 
  R emember that these are all Result Maps, and if you don’t specify any results at all, then iBATIS will
automatically match up co lumns and properties for you.  So most of these examples are more verbose
than they really need to be.  That said, most databases are kind of complex and it’s unlikely that we’ll be
able to depend on that for all cases. 

