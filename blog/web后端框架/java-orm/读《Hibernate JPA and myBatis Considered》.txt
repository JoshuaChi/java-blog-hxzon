读《Hibernate/JPA and myBatis Considered》

http://cec.jmu.edu.cn/cha/Info/View.Asp?id=87


Hibernate/JPA and myBatis Considered
by Will on June 24, 2011
At the last SeaJUG, I mentioned that I was really impressed with the latest myBatis (the successor to iBatis), and that it might be more appropriate for many projects than Hibernate/JPA. I’ve gotten very, very deep on Hibernate, and so I think a few people were rather surprised to hear me speak so favorably about myBatis.

First, a bit of background. I started working with Hibernate really early, back in 2001-200, and I wrote a book on Hibernate in 2004. I’ve worked with many developers and projects that have used Hibernate (and a few NHibernate) over the years. In the summer of 2010, I served as a technical expert in a patent case that involved Hibernate.

First, the brief version: HIbernate/JPA is great if you have a small, very senior team of developers who really understand Java, SQL, and ORM very, very well. For a mid-to-large team with more than a few junior developers, Hibernate/JPA is a Really Bad Idea. For many situations and environments, myBatis is much more appropriate.

Ok, if you’re still reading, you may be interested in “the long version.” Here are a few more thoughts:

Using Hibernate/JPA properly requires understanding Java and SQL very well. If you use Hibernate to avoid learning SQL, you will be miserable and your app will perform poorly.  If it’s a toy app, it doesn’t really matter.
Using Hibernate/JPA properly requires learning HQL and/or Criteria and paying attention to the generated SQL. To get that working, you need to spend time setting up your environment and tools correctly.
Hibernate/JPA is so much better than EJB 1.x-2.x it’s a no-brainer. That’s actually not a huge compliment, alas.
Someone asked about “legacy” Hibernate.  I personally define legacy code as code without a good test suite, regardless of framework.  Certainly an application based on Hibernate 3.x+ should not be considered legacy just because of that.
Spring Transaction Annotations + Hibernate/JPA = almost always a terrible idea. Just use the open-session-in-view if you are building a web app. You will get much better performance, avoid lots of dumb lazy-loading exceptions, and automatically map transactions to web requests (which is almost always the transaction you want anyways).
Incidentally, Grails transactions defaults to basically an auto-commit=true model, but adds a one-liner to turn on transactions in an open-session-in-view model.  There is a debate going on about changing this.
Play Framework defaults to open-session-in-view transactions.
You can have an excellent (or terrible) app in any framework. It’s almost entirely a product of the development organization and has nothing to do with the framework.
The learning curve for myBatis is practically nil compared to Hibernate/JPA. You don’t have to worry about bad code nearly as much, because the SQL is so much more in your face. The new annotions in myBatis (vs. XML config in iBatis) make myBatis really, really nice and easy. The real kicker for me is (as Eelco mentioned) being able to develop the query quickly in your database tool and then just paste it in as an annotation in myBatis. Simple and easy.
myBatis is more or less useless if you want to maintain simultaneous database independence.  If you are working on in-house apps, you probably don’t care about switching out databases – and if you do want to switch databases, it’ll be an event, which you can still manage via iBatis.  Hopefully you have a good test suite.
Hibernate/JPA is fantastic if you want to support multiple databases simultaneously. For example, you are working on a commercial product that needs to supports multiple RDBMS packages. Set up a build that targets all of the supported databases and you’re good to go. This does require a good test suite and a solid commitment to TDD – not typical junior dev territory.
Hibernate has a really rich 2nd level cache ecosystem (part of what makes it the leading contender for JPA). If you don’t care about (or more commonly, don’t understand) that, it just makes stuff more complicated.
If you use JPA or if you use myBatis, I would recommend an explicit cache (e.g. as I talked about in my session) if you care about performance.  It’s more straight-forward and much easier for everyone to understand.
If you are using lots of native SQL (or stored procedures) do not use HIbernate/JPA, period. You’re missing the whole point. Use myBatis and you will be much happier.
JPA is a (popular) standard. If you want to be a credible senior Java developer in 2011, you should be really comfortable with Java, SQL, and JPA. Having an opinion is one thing, but it should be an informed opinion.  ”Hibernate/JPA/myBatis sucks” is not an informed opinion.
Hibernate/JPA/myBatis absolutely can scale. None of these bring scale for free, all of them can be screwed up badly, all of them can be used in highly scale solutions. If you don’t have a real performance test environment, where you conduct real (verifiable, fact-based) performance tests, you’re just expressing opinions.
As a corollary: if you are working in an environment that does not respect and encourage senior developers to take ownership, you will have problems. Put another way, if you hear that a company is having a lot of problems with Hibernate, that’s a good sign that the company is having trouble hiring/keeping good senior developers. But that’s another topic…

 
 撇嘴英语没过六级的我，试试能不能翻译得通。

 

 
Hibernate/JPA 和 myBatis 之我见
 2011年6月24日，Will
在去年的 SeaJUG, 我提过我已经对最新的 myBatis ( iBatis的继任者)有了很深刻的印象, 它可能比Hibernate/JPA更适合许多的项目.我对于Hibernate的研究是比较深的, 所以我觉得有些人对于听到我这样认同myBatis会感到非常的惊讶。

首先，有一些背景需要说下。我开始致力于Hibernate确实挺早的, 从2001年至今,并且在2004年的时候我还写了一本关于  Hibernate 的书。这些年，我和许多开发人员开发了 许多用到Hibernate（也有少数的 NHibernate）的项目. 在2010年夏天，我被授予了关于Hibernate的技术专家。

简要的来说: 如果你有一个小而非常资深的真正理解Java,SQL和ORM的开发团队，Hibernate/JPA是非常强大的。对于有一部分初级的开发者的中大型团队来说 Hibernate/JPA确实是一个比较槽糕的主意。在很多的情况和环境下，MyBatis是更为合适的。

好的，如果你正在还要继续听我说，那也许会对（下面的）比较长的描述感兴趣。下面是更多的一些观点:

使用 Hibernate/JPA需要非常好的了解Java和SQL。 如果你使用Hibernate，以避免学习SQL，你将是可悲的，你的应用程序将表现不佳。如果那是一个玩具似的应用程序，那确实是不没关系了。
使用 Hibernate/JPA 需要学习HQL 和/或 Criteria并且还需注重去生成SQL。为了能够运行，你需要去花更多的时间去配置你的开发环境还有正确的使用工具。
Hibernate/JPA对于 EJB 1.x-2.x来说好非常多，这是显而易见的。实际上，这并不是对它一个巨大的恭维， 唉。
有一些人询问 Hibernate的遗留问题。我个人认为遗留编码应该是没有测试套件也不用框架的编码。当然，作为一个基于 Hibernate 3.x+的应用程序不应该就因为此而被认为是它的产物。（---这句翻译的有点晕乎---）
Spring事务注解+ Hibernate/JPA = 几乎总是一个可怕的概念。如果你正在构建一个Web应用，只需要使用open-session-in-view模式。你会得到更好的性能，避免大量的延迟加载异常，并且自动映射事务到web请求 (这几乎总是你需要做的事务处理)。
 顺便说一下, Grails 的事务处理默认基本上是一个auto-commit=true的模型，但是增加的单行方式在open-session-in-view模式中打开了事务处。对于这样的改变还具有争议。
Play Framework 默认 open-session-in-view的事务处理。
你可以有在任何框架下创建一个优秀（或可怕）的应用。这几乎完全是一个开发组织的跟框架无关的产品。
MyBatis的学习曲线对比于 Hibernate / JPA几乎为零。你不必担心糟糕的代码几乎跟(hibernate)一样多，因为SQL更多的呈现在你面前。MyBatis的新annotions（与iBatis的XML 配置）， 真的使MyBatis变得很好很简单。更吸引我的是 （Eelco提到）它能够用你的数据库工具快速开发查询，然后只需将其粘贴在MyBatis的注解。简单和易用。
如果你想保持同步数据库的独立性 ，MyBatis的或多或少是无用的。如果你做底层的工作，你可能不关​​心断开数据库-如果你想切换数据库，这将是一个事件，你仍然可以通过iBatis的管理。希望你有一个很好的测试套件。
 如果你想同时支持多个数据库，Hibernate / JPA是很好的。例如，你正在开发一个需要支持多种RDBMS软件包商业产品。建立构建面向所有支持的数据库和并且友好的支持。这确实需要一个良好的测试套件和一致的保证来测试驱动开发（TDD） -不典型的初级开发领域。
 Hibernate有一个非常丰富的二级缓存的体系（它是让JPA的领先竞争者的一部分）。如果你不关心（或更常见的，不明白），它只是让东西更复杂。
 如果使用JPA或者如果你使用的MyBatis，我建议一个显式缓存（例如， I talked about in my session），如果你对性能的关心。这是更直截了当，更容易为大家所理解。
 如果这时候你使用的是大量的原生SQL（或存储过程）不使用Hibernate / JPA。你丢掉了整个要点。使用的MyBatis，你会更快乐。
 JPA是一个（流行）的标准。在2011年，如果你想成为一个可靠的高级Java开发人员，你应该真正掌握Java，SQL和JPA。有一个意见是一回事，但它应该是一个宏论。“ Hibernate/JPA/myBatis sucks” 并不是一个宏论。
 Hibernate / JPA / MyBatis的完全可以衡量。这些没有带来自由的规模，他们都可以被搞砸得厉害，他们都可以用在高度规模的解决方案。如果你没有一个真正的进行真实（可证实的，基于事实的）的性能测试环境，你只是表达意见。
 总结：如果你工作在 不尊重和​​鼓励高级开发人员全心地投入环境中，你就会有问题。换句话说，如果你听到一个公司有很多与Hibernate，这是一个好兆头，该公司正在遇到麻烦招聘/保持良好的高级开发人员的问题。但是，这是另一个话题...

 



总结： 

Java应用传统上使用JDBC（Java Database Connectivity）API来把数据持久到关系数据库中。JDBC API使用SQL语句来完成创建（create）、读取（read）、更新（update）和删除（delete）（CRUD）操作。JDBC代码内嵌在Java类中——换句话说，这类代码与业务逻辑紧密耦合在一起。这类代码还在很大程度上依赖于SQL，而SQL并非是跨数据库的标准；这使得从一种数据库移植到另一种数据库变得困难起来。而ORM提供功能来执行完整的CRUD操作并鼓励面向对象的查询。ORM还支持元数据映射以及在应用的事务管理方面提供帮助。 持久性框架的目的是分离数据库相关代码和应用代码（即业务逻辑），从而提高应用的灵活性。持久性框架通过提供一个持久性逻辑的包装器来简化开发过程。

 iBATIS、Hibernate和JPA是用于把数据持久到关系数据库中的三种不同的机制，每种都有着自己的优势和局限性。iBATIS不提供完整的ORM解决方案，也不提供任何的对象和关系模型的直接映射。iBATIS给你提供了对查询的全面控制权。Hibernate提供了一个完整的ORM解决方案，但不提供对查询的控制权。  
iBATIS：直接使用SQL

iBATIS是一个持久性框架，其提供了SQL的好处却又免去了JDBC的复杂性。iBATIS使用了一个数据映射器（data mapper），其经由一个XML描述符而不是元数据映射器把对象映射到存储过程、SQL语句或是ResultSet上，而元数据映射器起的是把领域中的对象映射到数据库中的表上的作用。因此，iBATIS能够使得数据模型和对象模型彼此独立，互不相干。  

iBATIS框架主要使用下面的两个XML文件作为描述符：SQLMapConfig.xml,SQLMap.xml。 SQLMapConfig.xml是一个主要的XML文件，其包含所有的配置细节，比如数据源这一类的数据细节等；它还可以选择在其中包含关于事务管理的信息。 SQLMap.xml文件在其相关到某个表后再做实际命名， 把领域对象映射到SQL语句的地方。 所以，使用SQL给开发者提供了更大的灵活性，并使得iBATIS对于有使用SQL编程经验的人来说变得更容易理解。  


Hibernate

Hibernate是一个开源的轻量级的对象-关系映射解决方案。 主要特点是支持基于对象的建模，这使得它可以提供一个透明的持久性机制。 Hibernate包含了非常强大的HQL查询语言。HQL非常类似SQL，不过还定义了一些额外的约定。HQL是完全面向对象的，能够充分利用继承、多态和关联等这些面向对象核心概念的长处。除了被用到的Java类和属性的名称之外，HQL查询是非大小写敏感的。HQL把查询结果作为对象返回，这些对象可以由编程者直接访问和操纵。HQL还支持分页和动态分析（profiling）等许多高级功能，SQL一直未提供对这些功能的支持。在用到多个表来工作时，HQL并不要求做任何显式的连接（join）。

Hibernate的架构主要由两个接口——Session和Transaction组成——以及一个Query接口，该接口位于应用的持久层中。 

下面是Hibernate组成部分的主要编程接口：

Ÿ           org.hibernate.SessionFactory基本上是用来获取一个session实例，并且可看作是连接池化机制的一个模拟。这是线程安全的，因为所有的应用线程都使用单一的SessionFactory（只要Hibernate只使用一个数据库）。该接口通过配置文件来配置，配置文件决定了要加载的映射文件。

Ÿ           org.hibernate.Session提供了一个单独的线程，该线程确定应用和数据库之间的对话。这是对一个特定（单个）连接的模拟。该接口是非常轻量级的，而且是非线程安全的。

Ÿ           org.hibernate.Transaction提供了一个单线程对象，其横跨整个应用并确定原子工作单元。其基本上抽象了JDBC、JTA和CORBA事务。

Ÿ           org.hibernate.Query被用来执行查询，或以HQL的形式或是以底层数据库的SQL方言形式。Query实例是轻量级的，需要提到的很重要的一点是，它不能用在创建它的session的外部。

   当在应用中创建了一个SessionFactory实例时，Hibernate读入配置文件并标识出各自的映射文件。创建自SessionFactory的session对象获取到数据库的一个特定连接，这个session对象就是持久化类实例的持久化上下文。实例可以是以下三种状态之一：瞬态的（transient）、持久的（persistent）或是游离的（detached）。处于瞬态时，对象尚未与表关联起来；处于持久态中时，对象是与表关联的；而处于游离态中时，则不能保证对象与表是同步的。

       Hibernate功能强大，数据库无关性好，O/R映射能力强，对于Hibernate相当精通，而且对Hibernate进行了适当的封装，那么项目整个持久层代码会相当简单，需要写的代码很少，开发速度很快。不过这点貌似没使得它更好，要精通并不是一件容易的事情。 而iBATIS相对门槛较低。
对于具体的数据操作，Hibernate会自动生成SQL 语句，而iBATIS 则要求开发者编写具体的SQL 语句。同样的需求,iBATIS的工作量比Hibernate要大很多。类似的，如果涉及到数据库字段的修改，Hibernate修改的地方很少，而iBATIS要把那些sql mapping的地方一一修改。 不过，系统数据处理量巨大，性能要求极为苛刻，这往往意味着我们必须通过经过高度优化的SQL语句（或存储过程）才能达到系统性能设计指标。在这种情况下iBATIS会有更好的可控性和表现。比如:更新一个记录。如果使用Hibernate，需要现把对象select 出来，然后再做update。这对数据库来说就是两条SQL。而iBatis只需要一条 update 的SQL就可以了。减少一次与数据库的交互，对于性能的提升是非常重要。

