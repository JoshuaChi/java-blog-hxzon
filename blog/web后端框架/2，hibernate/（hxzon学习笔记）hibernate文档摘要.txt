（hxzon学习笔记）hibernate文档摘要

by hxzon
========
1，使用with关键字，你可以为join指定更多条件。（hxzon：重要）

示例：

from Cat as cat
    left join cat.kittens as kitten
        with kitten.bodyWeight > 10.0

（只加载猫的“体重大于10”的孩子。）

====
2，“fetch” join允许你使用单个查询语句来加载关联的对象字段和集合字段。

from Cat as cat
    inner join fetch cat.mate
    left join fetch cat.kittens child
    left join fetch child.kittens

（获取猫的孩子，这些孩子往下继续获取它们自己的孩子。）

如果你使用属性级别的延迟加载（利用字节码增强），
你可以使用“fetch all”强制让hibernate立即加载“所有字段”。

示例：

from Document fetch all properties order by name

from Document doc fetch all properties where lower(doc.name) like '%cats%'

====
3，隐式关联（不使用join关键字）

示例：

from Cat as cat where cat.mate.name like '%s%'

====
4，可以使用特殊的小写的“id”来引用实体的id字段，
但这些实体不能含有不作为唯一标识却名为“id”的字段。

组合主键：

from bank.Person person
where person.id.country = 'AU'
    and person.id.medicareNumber = 123456

====
5，查询可以返回多个对象和/或多个字段，结果是一个object数组。

select mother, offspr, mate.name
from DomesticCat as mother
    inner join mother.mate as mate
    left outer join mother.kittens as offspr

也可以返回一个list。


select new list(mother, offspr, mate.name)
from DomesticCat as mother
    inner join mother.mate as mate
    left outer join mother.kittens as offspr

返回一个map。

select new map( max(bodyWeight) as max, min(bodyWeight) as min, count(*) as n )
from Cat cat

可以通过构造函数返回一个对象。

select new Family(mother, mate, offspr)
from DomesticCat as mother
    join mother.mate as mate
    left join mother.kittens as offspr

====
6，支持下列聚集函数：

avg(...), sum(...), min(...), max(...)
count(*)
count(...), count(distinct ...), count(all...)

你可以在select子句中使用数学运算，字符串连接和其它可识别的sql函数。

====
7，多态查询。（hxzon：重要）

from Cat as cat

上述查询返回的不只是cat实体，还包括所有的子类实体。
hql允许在from子句中使用任何java类和接口。
这些查询会返回指定类或接口的所有被映射的实体，包括子类实体。

这个查询会返回所有被映射的实体：

from java.lang.Object o

上面的两条查询需要执行多条sql select语句。
这意味着order by子句不能正常工作。
这也意味着你不能使用 Query.scroll() 方法。

==
在多态时，使用“class”鉴别值来指明类型。

示例：

from Cat cat where cat.class = DomesticCat

==
（hxzon：？）

An "any" type has the special properties id and class 
that allows you to express a join in the following way 
(where AuditLog.item is a property mapped with <any>):

（“any”映射到AuditLog.item。）

from AuditLog log, Payment payment
where log.item.class = 'Payment' and log.item.id = payment.id

The log.item.class and payment.class 
would refer to the values of completely different database columns in the above query.

====
8，

from Foo foo
where foo.bar.baz.customer.address.city is not null

上面这个查询生成的sql语句包含4个表的联接。

from Cat as cat where cat.mate.id = 69

上面这条查询不会使用表联接，因为只需要利用外键。

====
9，实例比较

=操作符还可用于对象的比较，基于唯一标识字段。

from Cat cat, Cat rival where cat.mate = rival.mate

select cat, mate
from Cat cat, Cat mate
where cat.mate = mate

====
10，
在hibernate配置件中，可以配置true和false的转换值。

<property name="hibernate.query.substitutions">true 1, false 0</property>

这会让true和false关键字在转换成sql时使用字面值1和0。

====
11，表达式
文档16.10

====
12，
javahean的属性能够用来为命名语句提供参数。

例如：

Query q = s.createQuery("from foo Foo as foo where foo.name=:name and foo.size=:size");
q.setProperties(fooBean); // fooBean has getName() and getSize()
List foos = q.list();

====
13，过滤器

可以使用filter来为集合分页。

Query q = s.createFilter( collection, "" ); // the trivial filter
q.setMaxResults(PAGE_SIZE);
q.setFirstResult(PAGE_SIZE * pageNumber);
List page = q.list();

--
集合也能够通过filter来排序或分组。

例如：

Collection orderedCollection = s.filter( collection, "order by this.amount" );
Collection counts = s.filter( collection, "select this.type, count(this) group by this.type" );

====
14，元组

hql支持元组，即使底层数据库不支持。

这里指“多值的比较”，例如组件。
假设一个实体“人”含有“名字”这个组件字段：

from Person p where p.name.first='John' and p.name.last='Jingleheimer-Schmidt'

上面的语法有点累赘，你可以使用“元组”让它更简洁，见如下例子。

from Person p where p.name=('John', 'Jingleheimer-Schmidt')

==
在子查询中使用元组，会让多值比较更简洁：

from Cat as cat
where not ( cat.name, cat.color ) in (
    select cat.name, cat.color from DomesticCat cat
)

当你判断是否使用元组语法时，有一件事需考虑，
那就是查询会依赖于组件的子字段的顺序。

