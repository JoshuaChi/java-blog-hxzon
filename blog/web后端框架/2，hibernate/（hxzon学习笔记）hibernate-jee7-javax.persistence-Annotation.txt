（hxzon学习笔记）hibernate-jee7-javax.persistence-Annotation

by hxzon

http://docs.oracle.com/javaee/7/api/javax/persistence/package-summary.html

========
Access

Used to specify an access type to be applied to an entity class, mapped superclass, or embeddable class, 
or to a specific attribute of such a class.

定义实体类的字段访问类型（字段或属性）。

--
AssociationOverride

Used to override a mapping for an entity relationship.

覆盖实体关联关系的映射。

May be applied to an entity that extends a mapped superclass 
to override a relationship mapping defined by the mapped superclass. 
在子类中，覆盖父类定义的关联映射。
If not specified, the association is mapped the same as in the original mapping. 
When used to override a mapping defined by a mapped superclass, 
AssociationOverride is applied to the entity class. 

May be used to override a relationship mapping from an embeddable within an entity 
to another entity when the embeddable is on the owning side of the relationship. 
组件。
When used to override a relationship mapping defined by an embeddable class 
(including an embeddable class embedded within another embeddable class), 
AssociationOverride is applied to the field or property containing the embeddable. 

When AssociationOverride is used to override a relationship mapping from an embeddable class, 
the name element specifies the referencing relationship field or property within the embeddable class. 
To override mappings at multiple levels of embedding, 
a dot (".") notation syntax must be used in the name element to indicate an attribute within an embedded attribute. 
The value of each identifier used with the dot notation is the name of the respective embedded field or property. 

When AssociationOverride is applied to override the mappings of an embeddable class used as a map value, 
"value." must be used to prefix the name of the attribute within the embeddable class 
that is being overridden in order to specify it as part of the map value. 

If the relationship mapping is a foreign key mapping, the joinColumns element is used. 
If the relationship mapping uses a join table, the joinTable element must be specified 
to override the mapping of the join table and/or its join columns. 


    Example 1: Overriding the mapping of a relationship defined by a mapped superclass

    @MappedSuperclass
    public class Employee {
        ...
        @ManyToOne
        protected Address address;
        ...
    }

    @Entity
        @AssociationOverride(name="address",
                             joinColumns=@JoinColumn(name="ADDR_ID"))
        // address field mapping overridden to ADDR_ID foreign key
    public class PartTimeEmployee extends Employee {
        ...
    }
 
    Example 2: Overriding the mapping for phoneNumbers defined in the ContactInfo class

    @Entity
    public class Employee {
        @Id int id;
        @AssociationOverride(
          name="phoneNumbers",
          joinTable=@JoinTable(
             name="EMPPHONES",
             joinColumns=@JoinColumn(name="EMP"),
             inverseJoinColumns=@JoinColumn(name="PHONE")
          )
        )
        @Embedded ContactInfo contactInfo;
       ...
    }

    @Embeddable
    public class ContactInfo {
        @ManyToOne 
        Address address; // Unidirectional

        @ManyToMany(targetEntity=PhoneNumber.class) 
        List phoneNumbers;
    }

    @Entity
    public class PhoneNumber {
        @Id int number;

        @ManyToMany(mappedBy="contactInfo.phoneNumbers")
        Collection<Employee> employees;
     }



--
AssociationOverrides

Used to override mappings of multiple relationship properties or fields.

覆盖多个实体关联关系的映射。

--
AttributeOverride
	
Used to override the mapping of a Basic (whether explicit or default) property or field or Id property or field.
重新定义字段。

May be applied to an entity that extends a mapped superclass 
or to an embedded field or property to override a basic mapping 
or id mapping defined by the mapped superclass or embeddable class 
(or embeddable class of one of its attributes). 

May be applied to an element collection containing instances of an embeddable class 
or to a map collection whose key and/or value is an embeddable class. 
When AttributeOverride is applied to a map, 
"key." or "value." must be used to prefix the name of the attribute that is being overridden 
in order to specify it as part of the map key or map value. 

To override mappings at multiple levels of embedding, 
a dot (".") notation form must be used in the name element to indicate an attribute within an embedded attribute. 
The value of each identifier used with the dot notation is the name of the respective embedded field or property. 

If AttributeOverride is not specified, the column is mapped the same as in the original mapping. 

    Example 1:

    @MappedSuperclass
    public class Employee {
        @Id protected Integer id;
        @Version protected Integer version;
        protected String address;

        public Integer getId() { ... }
        public void setId(Integer id) { ... }
        public String getAddress() { ... }
        public void setAddress(String address) { ... }
    }

    @Entity
    @AttributeOverride(name="address", column=@Column(name="ADDR"))
    public class PartTimeEmployee extends Employee {
        // address field mapping overridden to ADDR

        protected Float wage();
        public Float getHourlyWage() { ... }
        public void setHourlyWage(Float wage) { ... }
    }


    Example 2:

    @Embeddable public class Address {
        protected String street;
        protected String city;
        protected String state;
        @Embedded protected Zipcode zipcode;
    }

    @Embeddable public class Zipcode {
        protected String zip;
        protected String plusFour;
    }

    @Entity public class Customer {
        @Id protected Integer id;
        protected String name;

        @AttributeOverrides({
            @AttributeOverride(name="state",
                               column=@Column(name="ADDR_STATE")),
            @AttributeOverride(name="zipcode.zip",
                               column=@Column(name="ADDR_ZIP"))
        })
        @Embedded protected Address address;
        ...
    }


    Example 3:

    @Entity public class PropertyRecord {
        @EmbeddedId PropertyOwner owner;

        @AttributeOverrides({
            @AttributeOverride(name="key.street",
                               column=@Column(name="STREET_NAME")),
            @AttributeOverride(name="value.size",
                               column=@Column(name="SQUARE_FEET")),
            @AttributeOverride(name="value.tax",
                               column=@Column(name="ASSESSMENT"))
        })
       @ElementCollection
       Map<Address, PropertyInfo> parcels;
    }

   @Embeddable public class PropertyInfo {
       Integer parcelNumber;
       Integer size;
       BigDecimal tax;
   }

（参见hibernate官方文档，5.1.5，组件。

    @Embedded
    @AttributeOverrides( {
            @AttributeOverride(name="city", column = @Column(name="fld_city") ),
            @AttributeOverride(name="nationality.iso2", column = @Column(name="nat_Iso2") ),
            @AttributeOverride(name="nationality.name", column = @Column(name="nat_CountryName") )
            //nationality columns in homeAddress are overridden
    } )
    Address homeAddress;

）

--
AttributeOverrides	

Used to override mappings of multiple properties or fields.

--
Basic
	
The simplest type of mapping to a database column.

--
Cacheable	

Specifies whether an entity should be cached if caching is enabled 
when the value of the persistence.xml caching element is ENABLE_SELECTIVE or DISABLE_SELECTIVE.

--
CollectionTable
	
Specifies the table that is used for the mapping of collections of basic or embeddable types.

定义（基本类型或内嵌类型的，非实体）集合所映射的数据库表。

（见hibernate官方文档，7.2.3。

   @ElementCollection
   @CollectionTable(name="Nicknames", joinColumns=@JoinColumn(name="user_id"))
   @Column(name="nickname")
   public Set<String> getNicknames() { ... } 

）

--
Column
	
Specifies the mapped column for a persistent property or field.

--
ColumnResult
	
Used in conjunction with the SqlResultSetMapping annotation or ConstructorResult annotation 
to map a column of the SELECT list of a SQL query.

--
ConstructorResult
	
Used in conjunction with the SqlResultSetMapping annotation to map the SELECT clause of a SQL query to a constructor.

--
Convert	

Specifies the conversion of a Basic field or property.

定义基本类型的字段的转换。

--
Converter
	
Specifies that the annotated class is a converter and defines its scope.

标记一个类为一个转换器。

--
Converts
	
Used to group Convert annotations.

--
DiscriminatorColumn
	
Specifies the discriminator column for the SINGLE_TABLE and JOINED Inheritance mapping strategies.

标记一个字段为“类型指示”字段。

（见hibernate官方文档，5.1。

@Entity 
@Table(name="cats") @Inheritance(strategy=SINGLE_TABLE)
@DiscriminatorValue("C") @DiscriminatorColumn(name="subclass", discriminatorType=CHAR)
public class Cat {

）

--
DiscriminatorValue
	
Specifies the value of the discriminator column for entities of the given type.

--
ElementCollection
	
Specifies a collection of instances of a basic type or embeddable class.


--
Embeddable
	
Specifies a class whose instances are stored as an intrinsic part of an owning entity and share the identity of the entity.

标记一个类为内嵌的，即属于某个实体的一部分，共享它的唯一标识符。

--
Embedded
	
Specifies a persistent field or property of an entity whose value is an instance of an embeddable class.

标记一个字段为内嵌类型。

--
EmbeddedId	

Applied to a persistent field or property of an entity class or mapped superclass 
to denote a composite primary key that is an embeddable class.

--
Entity
	
Specifies that the class is an entity.

--
EntityListeners

Specifies the callback listener classes to be used for an entity or mapped superclass.

--
EntityResult
	
Used in conjunction with the SqlResultSetMapping annotation to map the SELECT clause of a SQL query to an entity result.

--
Enumerated

Specifies that a persistent property or field should be persisted as a enumerated type.

--
ExcludeDefaultListeners
	
Specifies that the invocation of default listeners is to be excluded 
for the entity class (or mapped superclass) and its subclasses.

--
ExcludeSuperclassListeners	

Specifies that the invocation of superclass listeners is to be excluded 
for the entity class (or mapped superclass) and its subclasses.

--
FieldResult

Used in conjunction with the EntityResult annotation to map columns 
specified in the SELECT list of a SQL query to the properties or fields of an entity class.

--
ForeignKey

Used to specify the handling of foreign key constraints when schema generation is in effect.

--
GeneratedValue

Provides for the specification of generation strategies for the values of primary keys.

--
Id

Specifies the primary key of an entity.

--
IdClass

Specifies a composite primary key class that is mapped to multiple fields or properties of the entity.

--
Index
	
Used in schema generation to specify creation of an index.

在建表时创建索引。

--
Inheritance

Specifies the inheritance strategy to be used for an entity class hierarchy.

描述继承映射的策略。

--
JoinColumn
	
Specifies a column for joining an entity association or element collection.

--
JoinColumns
	
Specifies the mapping for composite foreign keys.

--
JoinTable
	
Specifies the mapping of associations.

--
Lob
	
Specifies that a persistent property or field should be persisted as a large object to a database-supported large object type.

--
ManyToMany
	
Specifies a many-valued association with many-to-many multiplicity.

--
ManyToOne
	
Specifies a single-valued association to another entity class that has many-to-one multiplicity.

--
MapKey
	
Specifies the map key for associations of type java.util.Map when the map key is itself the primary key 
or a persistent field or property of the entity that is the value of the map.

用来指明值的哪个字段作为map的key。

   @OneToMany(mappedBy="customer")
   @MapKey(name="number") //指明哪个属性值作为map的键
   public Map<String,Order> getOrders() { return orders; }


--
MapKeyClass
	
Specifies the type of the map key for associations of type java.util.Map.

--
MapKeyColumn
	
Specifies the mapping for the key column of a map whose map key is a basic type.

--
MapKeyEnumerated
	
Specifies the enum type for a map key whose basic type is an enumerated type.

--
MapKeyJoinColumn
	
Specifies a mapping to an entity that is a map key.

--
MapKeyJoinColumns
	
Supports composite map keys that reference entities.

--
MapKeyTemporal
	
This annotation must be specified for persistent map keys of type Date and Calendar.

--
MappedSuperclass
	
Designates a class whose mapping information is applied to the entities that inherit from it.

--
MapsId
	
Designates a ManyToOne or OneToOne relationship attribute that provides the mapping for an EmbeddedId primary key, 
an attribute within an EmbeddedId primary key, or a simple primary key of the parent entity.

--
NamedAttributeNode
	
A NamedAttributeNode is a member element of a NamedEntityGraph.

--
NamedEntityGraph
	
Used to specify the path and boundaries for a find operation or query.

--
NamedEntityGraphs
	
Used to group NamedEntityGraph annotations.

--
NamedNativeQueries
	
Specifies multiple native SQL named queries.

--
NamedNativeQuery
	
Specifies a named native SQL query.

--
NamedQueries	

Specifies multiple named Java Persistence query language queries.

--
NamedQuery	

Specifies a static, named query in the Java Persistence query language.

--
NamedStoredProcedureQueries	

Specifies multiple named stored procedure queries.

--
NamedStoredProcedureQuery	

Specifies and names a stored procedure, its parameters, and its result type.

--
NamedSubgraph	

A NamedSubgraph is a member element of a NamedEntityGraph.

--
OneToMany	

Specifies a many-valued association with one-to-many multiplicity.

--
OneToOne
	
Specifies a single-valued association to another entity that has one-to-one multiplicity.

--
OrderBy	

Specifies the ordering of the elements of a collection valued association or element collection at the point 
when the association or collection is retrieved.

--
OrderColumn
	
Specifies a column that is used to maintain the persistent order of a list.

--
PersistenceContext
	
Expresses a dependency on a container-managed EntityManager and its associated persistence context.

--
PersistenceContexts

Declares one or more PersistenceContext annotations.

--
PersistenceProperty
	
Describes a single container or persistence provider property.

--
PersistenceUnit
	
Expresses a dependency on an EntityManagerFactory and its associated persistence unit.

--
PersistenceUnits
	
Declares one or more PersistenceUnit annotations.

--
PostLoad
	
Specifies a callback method for the corresponding lifecycle event.

标记一个方法为回调函数（位于实体类或回调监听器类中），在数据加载后调用。

--
PostPersist
	
Specifies a callback method for the corresponding lifecycle event.

--
PostRemove
	
Specifies a callback method for the corresponding lifecycle event.

--
PostUpdate
	
Specifies a callback method for the corresponding lifecycle event.

--
PrePersist
	
Specifies a callback method for the corresponding lifecycle event.

--
PreRemove
	
Specifies a callback method for the corresponding lifecycle event.

--
PreUpdate
	
Specifies a callback method for the corresponding lifecycle event.

--
PrimaryKeyJoinColumn
	
Specifies a primary key column that is used as a foreign key to join to another table.

--
PrimaryKeyJoinColumns
	
Groups PrimaryKeyJoinColumn annotations.

--
QueryHint

Used to supply a query property or hint to the NamedQuery or NamedNativeQuery annotation.

--
SecondaryTable

Specifies a secondary table for the annotated entity class.

--
SecondaryTables
	
Specifies multiple secondary tables for an entity.

--
SequenceGenerator
	
Defines a primary key generator that may be referenced by name 
when a generator element is specified for the GeneratedValue annotation.

--
SqlResultSetMapping
	
Specifies the mapping of the result of a native SQL query or stored procedure.

--
SqlResultSetMappings
	
Is used to define one or more SqlResultSetMapping annotations.

--
StoredProcedureParameter
	
Specifies a parameter of a named stored procedure query.

--
Table
	
Specifies the primary table for the annotated entity.

--
TableGenerator
	
Defines a primary key generator that may be referenced by name 
when a generator element is specified for the GeneratedValue annotation.

--
Temporal
	
This annotation must be specified for persistent fields or properties of type java.util.Date and java.util.Calendar.

--
Transient
	
Specifies that the property or field is not persistent.

--
UniqueConstraint
	
Specifies that a unique constraint is to be included in the generated DDL for a primary or secondary table.

--
Version
	
Specifies the version field or property of an entity class that serves as its optimistic lock value.

