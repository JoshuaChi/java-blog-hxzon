（hxzon学习笔记）hibernate-Chapter 5. Basic O-R Mapping（5.1.1，实体）

http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html#mapping-declaration

=======
5.1. Mapping declaration

5.1.1. Entity

5.1.2. Identifiers
5.1.3. Optimistic locking properties (optional)
5.1.4. Property
5.1.5. Embedded objects (aka components)
5.1.6. Inheritance strategy
5.1.7. Mapping one to one and one to many associations
5.1.8. Natural-id
5.1.9. Any
5.1.10. Properties
5.1.11. Some hbm.xml specificities

==
5.2. Hibernate types
5.2.1. Entities and values
5.2.2. Basic value types
5.2.3. Custom value types

5.3. Mapping a class more than once
一个类，映射成多个实体（注解不支持此功能）

5.4. SQL quoted identifiers
5.5. Generated properties
5.6. Column transformers: read and write expressions
5.7. Auxiliary database objects

===============
5.1. Mapping declaration

Object/relational mappings can be defined in three approaches:

using Java 5 annotations (via the Java Persistence 2 annotations)
using JPA 2 XML deployment descriptors (described in chapter XXX)
using the Hibernate legacy XML files approach known as hbm.xml

Annotations are split in two categories, the logical mapping annotations 
(describing the object model, the association between two entities etc.) 
and the physical mapping annotations (describing the physical schema, tables, columns, indexes, etc). 
We will mix annotations from both categories in the following code examples.

JPA annotations are in the javax.persistence.* package. 
Hibernate specific extensions are in org.hibernate.annotations.*. 
You favorite IDE can auto-complete annotations and their attributes for you 
(even without a specific "JPA" plugin, since JPA annotations are plain Java 5 annotations).

==
Here is an example of mapping

package eg;

@Entity 
@Table(name="cats") @Inheritance(strategy=SINGLE_TABLE)
@DiscriminatorValue("C") @DiscriminatorColumn(name="subclass", discriminatorType=CHAR)
public class Cat {
   
   @Id @GeneratedValue
   public Integer getId() { return id; }
   public void setId(Integer id) { this.id = id; }
   private Integer id;

   public BigDecimal getWeight() { return weight; }
   public void setWeight(BigDecimal weight) { this.weight = weight; }
   private BigDecimal weight;

   @Temporal(DATE) @NotNull @Column(updatable=false)
   public Date getBirthdate() { return birthdate; }
   public void setBirthdate(Date birthdate) { this.birthdate = birthdate; }
   private Date birthdate;

   @org.hibernate.annotations.Type(type="eg.types.ColorUserType")
   @NotNull @Column(updatable=false)
   public ColorType getColor() { return color; }
   public void setColor(ColorType color) { this.color = color; }
   private ColorType color;

   @NotNull @Column(updatable=false)
   public String getSex() { return sex; }
   public void setSex(String sex) { this.sex = sex; }
   private String sex;

   @NotNull @Column(updatable=false)
   public Integer getLitterId() { return litterId; }
   public void setLitterId(Integer litterId) { this.litterId = litterId; }
   private Integer litterId;

   @ManyToOne @JoinColumn(name="mother_id", updatable=false)
   public Cat getMother() { return mother; }
   public void setMother(Cat mother) { this.mother = mother; }
   private Cat mother;

   @OneToMany(mappedBy="mother") @OrderBy("litterId")
   public Set<Cat> getKittens() { return kittens; }
   public void setKittens(Set<Cat> kittens) { this.kittens = kittens; }
   private Set<Cat> kittens = new HashSet<Cat>();
}

//被驯养的猫，所以有名字
@Entity @DiscriminatorValue("D")
public class DomesticCat extends Cat {

   public String getName() { return name; }
   public void setName(String name) { this.name = name }
   private String name;
}

@Entity
public class Dog { ... }

The legacy hbm.xml approach uses an XML schema designed to be readable and hand-editable. 
The mapping language is Java-centric, meaning that mappings 
are constructed around persistent class declarations and not table declarations.
围绕着实体类，而不是数据库表。

Please note that even though many Hibernate users choose to write the XML by hand, 
a number of tools exist to generate the mapping document. 
These include XDoclet, Middlegen and AndroMDA.

Here is an example mapping:

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
      "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
          "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="eg">

        <class name="Cat"
            table="cats"
            discriminator-value="C">

                <id name="id">
                        <generator class="native"/>
                </id>

                <discriminator column="subclass"
                     type="character"/>

                <property name="weight"/>

                <property name="birthdate"
                    type="date"
                    not-null="true"
                    update="false"/>

                <property name="color"
                    type="eg.types.ColorUserType"
                    not-null="true"
                    update="false"/>

                <property name="sex"
                    not-null="true"
                    update="false"/>

                <property name="litterId"
                    column="litterId"
                    update="false"/>

                <many-to-one name="mother"
                    column="mother_id"
                    update="false"/>

                <set name="kittens"
                    inverse="true"
                    order-by="litter_id">
                        <key column="mother_id"/>
                        <one-to-many class="Cat"/>
                </set>

（子类，被驯养的猫，所以有名字。）
                <subclass name="DomesticCat"
                    discriminator-value="D">

                        <property name="name"
                            type="string"/>

                </subclass>

        </class>

        <class name="Dog">
                <!-- mapping for Dog could go here -->
        </class>

</hibernate-mapping>

We will now discuss the concepts of the mapping documents (both annotations and XML). 
We will only describe, however, the document elements and attributes that are used by Hibernate at runtime. 
The mapping document also contains some extra optional attributes and elements 
that affect the database schemas exported by the schema export tool (for example, the not-null attribute).
映射文件还有一些额外的选项。

===========
5.1.1. Entity
实体

An entity is a regular Java object (aka POJO) which will be persisted by Hibernate.

To mark an object as an entity in annotations, use the @Entity annotation.

@Entity
public class Flight implements Serializable {
    Long id;

    @Id
    public Long getId() { return id; }

    public void setId(Long id) { this.id = id; }
}

That's pretty much it, the rest is optional. 
其它配置都是可选的。
There are however any options to tweak your entity mapping, let's explore them.

@Table lets you define the table the entity will be persisted into. 
If undefined, the table name is the unqualified class name of the entity. 
You can also optionally define the catalog, the schema as well as unique constraints on the table.
@Table注解，定制一些数据库表信息。

@Entity
@Table(name="TBL_FLIGHT", 
       schema="AIR_COMMAND", 
       uniqueConstraints=
           @UniqueConstraint(
               name="flight_number", 
               columnNames={"comp_prefix", "flight_number"} ) )
public class Flight implements Serializable {
    @Column(name="comp_prefix")
    public String getCompagnyPrefix() { return companyPrefix; }

    @Column(name="flight_number")
    public String getNumber() { return number; }
}

（“公司名前缀”+“航班号”组成唯一约束。）

The constraint name is optional (generated if left undefined). 
The column names composing the constraint correspond to the column names as defined before the Hibernate NamingStrategy is applied.

Tip
Be sure to use the database-level column names for the columnNames property of a @UniqueConstraint. 
注意唯一约束中的列名，是数据库表中的列名，不是java类的字段名。
For example, whilst for simple types the database-level column name may be the same as the entity-level property name, 
this is often not the case for relational properties.

@Entity.name lets you define the shortcut name of the entity you can used in JP-QL and HQL queries. 
It defaults to the unqualified class name of the class.
@Entity.name 用来定义实体的缩写名，不要和表名混淆。

====
Hibernate goes beyond the JPA specification and provide additional configurations. 
Some of them are hosted on @org.hibernate.annotations.Entity:
hibernate的一些额外扩展：

dynamicInsert / dynamicUpdate (defaults to false): 
“动态插入”和“动态更新”：
specifies that INSERT / UPDATE SQL should be generated at runtime 
and contain only the columns whose values are not null.
在运行时生成插入和删除语句，只包含非null的字段。 
The dynamic-update and dynamic-insert settings are not inherited by subclasses.
这两个配置，不会传递到子类，因为对性能有影响。 
Although these settings can increase performance in some cases, 
they can actually decrease performance in others.

selectBeforeUpdate (defaults to false):
更新之前重新读取。 
specifies that Hibernate should never perform an SQL UPDATE unless it is certain that an object is actually modified. 
Only when a transient object has been associated with a new session using update(), 
will Hibernate perform an extra SQL SELECT to determine if an UPDATE is actually required. 
Use of select-before-update will usually decrease performance. 
It is useful to prevent a database update trigger being called unnecessarily if you reattach a graph of detached instances to a Session.

polymorphisms (defaults to IMPLICIT): 
“多态方式”（隐式或显示）：
determines whether implicit or explicit query polymorphisms is used. 
Implicit polymorphisms means that instances of the class will be returned by a query 
that names any superclass or implemented interface or class, 
隐式多态，指所有子类实例都会返回。
and that instances of any subclass of the class will be returned by a query that names the class itself. 
Explicit polymorphisms means that class instances will be returned only by queries that explicitly name that class. 
显示多态，指只返回该类的实例。
Queries that name the class will return only instances of subclasses mapped. 
For most purposes, the default polymorphisms=IMPLICIT is appropriate. 
Explicit polymorphisms is useful when two different classes are mapped to the same table. 
This allows a "lightweight" class that contains a subset of the table columns.

persister: specifies a custom ClassPersister.
定制类持久化器。 
The persister attribute lets you customize the persistence strategy used for the class. 
You can, for example, specify your own subclass of org.hibernate.persister.EntityPersister, 
or you can even provide a completely new implementation of the interface org.hibernate.persister.ClassPersister that implements, 
for example, persistence via stored procedure calls, serialization to flat files or LDAP. 
例如，通过存储过程持久化，或持久化到文件中。
See org.hibernate.test.CustomPersister for a simple example of "persistence" to a Hashtable.

====
optimisticLock (defaults to VERSION):
优化锁策略。
determines the optimistic locking strategy. 
If you enable dynamicUpdate, you will have a choice of optimistic locking strategies:

version: check the version/timestamp columns

all: check all columns

dirty: check the changed columns, allowing some concurrent updates

none: do not use optimistic locking

It is strongly recommended that you use version/timestamp columns for optimistic locking with Hibernate.
强烈建议使用版本号和时间戳。 
This strategy optimizes performance and correctly handles modifications made to detached instances 
(i.e. when Session.merge() is used).

Tip
Be sure to import @javax.persistence.Entity to mark a class as an entity. 
It's a common mistake to import @org.hibernate.annotations.Entity by accident.
注意引入 jpa 的 @Entity 注解，而不是 hibernate的 @Entity 注解。
Some entities are not mutable. 
They cannot be updated by the application. 
This allows Hibernate to make some minor performance optimizations.. 
Use the @Immutable annotation.
使用 @Immutable 注解，将实体标记为不可变的，这可以提高性能。

====
You can also alter how Hibernate deals with lazy initialization for this class. 
On @Proxy, use lazy=false to disable lazy fetching (not recommended). 
将 @Proxy 的 lazy 设为假，可以禁用延迟加载。但这是不推荐的。
You can also specify an interface to use for lazy initializing proxies (defaults to the class itself): 
use proxyClass on @Proxy. 
Hibernate will initially return proxies ( using bytecode provider defined by hibernate.bytecode.provider) that implement the named interface. 
The persistent object will load when a method of the proxy is invoked. 
See "Initializing collections and proxies" below.

==
@BatchSize specifies a "batch size" for fetching instances of this class by identifier. 
Not yet loaded instances are loaded batch-size at a time (default 1).
批量加载的大小。

You can specific an arbitrary SQL WHERE condition to be used when retrieving objects of this class. 
Use @Where for that.

In the same vein, @Check lets you define an SQL expression 
used to generate a multi-row check constraint for automatic schema generation.
@Check注解用来在建表语句中加入“检查约束”。

====
There is no difference between a view and a base table for a Hibernate mapping. 
This is transparent at the database level, although some DBMS do not support views properly, especially with updates. 
Sometimes you want to use a view, but you cannot create one in the database (i.e. with a legacy schema). 
In this case, you can map an immutable and read-only entity to a given SQL subselect expression 
using @org.hibernate.annotations.Subselect:
hibernate的映射，不区分是视图，还是表。
如果你希望使用视图，但是在数据库中，你不能创建视图，
这时可以使用 @Subselect 注解。

@Entity
@Subselect("select item.name, max(bid.amount), count(*) "
        + "from item "
        + "join bid on bid.item_id = item.id "
        + "group by item.name")
@Synchronize( {"item", "bid"} ) //tables impacted
public class Summary {
    @Id
    public String getId() { return id; }
    ...
}

Declare the tables to synchronize this entity with, 
ensuring that auto-flush happens correctly and that queries against the derived entity do not return stale data. 
The <subselect> is available both as an attribute and a nested mapping element.

====
We will now explore the same options using the hbm.xml structure. 
You can declare a persistent class using the class element. For example:

<class
        name="ClassName"                                   (1)
        table="tableName"                                  (2)
        discriminator-value="discriminator_value"          (3)
        mutable="true|false"                               (4)
        schema="owner"                                     (5)
        catalog="catalog"                                  (6)
        proxy="ProxyInterface"                             (7)
        dynamic-update="true|false"                        (8)
        dynamic-insert="true|false"                        (9)
        select-before-update="true|false"                  (10)
        polymorphism="implicit|explicit"                   (11)
        where="arbitrary sql where condition"              (12)
        persister="PersisterClass"                         (13)
        batch-size="N"                                     (14)
        optimistic-lock="none|version|dirty|all"           (15)
        lazy="true|false"                                  (16)
        entity-name="EntityName"                           (17)
        check="arbitrary sql check condition"              (18)
        rowxml:id="rowid"                                  (19)
        subselect="SQL expression"                         (20)
        abstract="true|false"                              (21)
        node="element-name"
/>

1	name (optional): 
the fully qualified Java class name of the persistent class or interface. 
If this attribute is missing, it is assumed that the mapping is for a non-POJO entity.

2	table (optional - defaults to the unqualified class name): 
the name of its database table.

3	discriminator-value (optional - defaults to the class name): 
a value that distinguishes individual subclasses that is used for polymorphic behavior. 
Acceptable values include null and not null.

4	mutable (optional - defaults to true): 
specifies that instances of the class are (not) mutable.

5	schema (optional): 
overrides the schema name specified by the root <hibernate-mapping> element.

6	catalog (optional): 
overrides the catalog name specified by the root <hibernate-mapping> element.

7	proxy (optional): 
specifies an interface to use for lazy initializing proxies. 
You can specify the name of the class itself.

8	dynamic-update (optional - defaults to false): 
specifies that UPDATE SQL should be generated at runtime and can contain only those columns whose values have changed.

9	dynamic-insert (optional - defaults to false): 
specifies that INSERT SQL should be generated at runtime and contain only the columns whose values are not null.

10	select-before-update (optional - defaults to false): 
specifies that Hibernate should never perform an SQL UPDATE unless it is certain that an object is actually modified. 
Only when a transient object has been associated with a new session using update(), 
will Hibernate perform an extra SQL SELECT to determine if an UPDATE is actually required.

11	polymorphisms (optional - defaults to implicit): 
determines whether implicit or explicit query polymorphisms is used.

12	where (optional): 
specifies an arbitrary SQL WHERE condition to be used when retrieving objects of this class.

13	persister (optional): 
specifies a custom ClassPersister.

14	batch-size (optional - defaults to 1): 
specifies a "batch size" for fetching instances of this class by identifier.

15	optimistic-lock (optional - defaults to version): 
determines the optimistic locking strategy.

(16)	lazy (optional): 
lazy fetching can be disabled by setting lazy="false".
是否延迟加载。

(17)	entity-name (optional - defaults to the class name): 
Hibernate allows a class to be mapped multiple times, potentially to different tables. 
It also allows entity mappings that are represented by Maps or XML at the Java level. 
In these cases, you should provide an explicit arbitrary name for the entity. 
See Section 4.4, “Dynamic models” and ??? for more information.

(18)	check (optional): 
an SQL expression used to generate a multi-row check constraint for automatic schema generation.

(19)	rowid (optional): 
Hibernate can use ROWIDs on databases. 
On Oracle, for example, Hibernate can use the rowid extra column for fast updates once this option has been set to rowid. 
A ROWID is an implementation detail and represents the physical location of a stored tuple.

(20)	subselect (optional): 
maps an immutable and read-only entity to a database subselect. 
This is useful if you want to have a view instead of a base table. 
See below for more information.
适用于视图。

(21)	abstract (optional): 
is used to mark abstract superclasses in <union-subclass> hierarchies.
是否是抽象类。

====
It is acceptable for the named persistent class to be an interface. 
You can declare implementing classes of that interface using the <subclass> element. 
You can persist any static inner class. 
Specify the class name using the standard form i.e. e.g.Foo$Bar.

====
Here is how to do a virtual view (subselect) in XML:

<class name="Summary">
    <subselect>
        select item.name, max(bid.amount), count(*)
        from item
        join bid on bid.item_id = item.id
        group by item.name
    </subselect>
    <synchronize table="item"/>
    <synchronize table="bid"/>
    <id name="name"/>
    ...
</class>

The <subselect> is available both as an attribute and a nested mapping element.

