（hxzon学习笔记）hibernate-Chapter 26. Best Practices

注释by hxzon
http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch26.html
========
Write fine-grained classes and map them using <component>:
使用组件。
Use an Address class to encapsulate street, suburb, state, postcode. 
This encourages code reuse and simplifies refactoring.

Declare identifier properties on persistent classes:
为每个实体声明id字段。
Hibernate makes identifier properties optional. 
There are a range of reasons why you should use them. 
We recommend that identifiers be 'synthetic', that is, generated with no business meaning.
建议使用不依赖业务逻辑的主键。

Identify natural keys:
Identify natural keys for all entities, and map them using <natural-id>. 
为所有实体使用自然主键。
Implement equals() and hashCode() to compare the properties that make up the natural key.

Place each class mapping in its own file:
每个实体映射使用一个单独的映射文件。
Do not use a single monolithic mapping document. 
Map com.eg.Foo in the file com/eg/Foo.hbm.xml. 
This makes sense, particularly in a team environment.

Load mappings as resources:
Deploy the mappings along with the classes they map.

Consider externalizing query strings:
This is recommended if your queries call non-ANSI-standard SQL functions. 
Externalizing the query strings to mapping files will make the application more portable.

Use bind variables.
使用绑定变量，使用命名参数。
As in JDBC, always replace non-constant values by "?". 
Do not use string manipulation to bind a non-constant value in a query. 
You should also consider using named parameters in queries.

Do not manage your own JDBC connections:
Hibernate allows the application to manage JDBC connections, 
but his approach should be considered a last-resort. 
If you cannot use the built-in connection providers, 
consider providing your own implementation of org.hibernate.connection.ConnectionProvider.

Consider using a custom type:
考虑自定义类型：
Suppose you have a Java type from a library that needs to be persisted 
but does not provide the accessors needed to map it as a component. 
You should consider implementing org.hibernate.UserType. 
This approach frees the application code from implementing transformations to/from a Hibernate type.

Use hand-coded JDBC in bottlenecks:
In performance-critical areas of the system, some kinds of operations might benefit from direct JDBC. 
Do not assume, however, that JDBC is necessarily faster. 
Please wait until you know something is a bottleneck. 
If you need to use direct JDBC, you can open a Hibernate Session, 
wrap your JDBC operation as a org.hibernate.jdbc.Work object and using that JDBC connection. 
This way you can still use the same transaction strategy and underlying connection provider.

Understand Session flushing:
理解会话“冲刷”。
Sometimes the Session synchronizes its persistent state with the database. 
Performance will be affected if this process occurs too often. 
You can sometimes minimize unnecessary flushing by disabling automatic flushing, 
or even by changing the order of queries and other operations within a particular transaction.

In a three tiered architecture, consider using detached objects:
在三层架构中，考虑使用“脱管对象”。
When using a servlet/session bean architecture, 
you can pass persistent objects loaded in the session bean to and from the servlet/JSP layer. 
Use a new session to service each request. 
Use Session.merge() or Session.saveOrUpdate() to synchronize objects with the database.

In a two tiered architecture, consider using long persistence contexts:
Database Transactions have to be as short as possible for best scalability. 
However, it is often necessary to implement long running application transactions, 
a single unit-of-work from the point of view of a user. 
An application transaction might span several client request/response cycles. 
It is common to use detached objects to implement application transactions. 
An appropriate alternative in a two tiered architecture, 
is to maintain a single open persistence contact session for the whole life cycle of the application transaction. 
Then simply disconnect from the JDBC connection at the end of each request 
and reconnect at the beginning of the subsequent request. 
Never share a single session across more than one application transaction 
or you will be working with stale data.
永远不要在多个应用事务中共享一个会话。

Do not treat exceptions as recoverable:
This is more of a necessary practice than a "best" practice. 
When an exception occurs, roll back the Transaction and close the Session. 
当异常发生时，回滚并关闭会话。
If you do not do this, Hibernate cannot guarantee that in-memory state accurately represents the persistent state. 
For example, do not use Session.load() to determine if an instance with the given identifier exists on the database; 
use Session.get() or a query instead.

Prefer lazy fetching for associations:
对关联对象，尽量使用懒加载。
Use eager fetching sparingly. 
Use proxies and lazy collections for most associations to classes 
that are not likely to be completely held in the second-level cache. 
For associations to cached classes, where there is an a extremely high probability of a cache hit, 
explicitly disable eager fetching using lazy="false". 
When join fetching is appropriate to a particular use case, use a query with a left join fetch.

Use the open session in view pattern, 
or a disciplined assembly phase to avoid problems with unfetched data:
Hibernate frees the developer from writing tedious Data Transfer Objects (DTO). 
In a traditional EJB architecture, DTOs serve dual purposes: 
first, they work around the problem that entity beans are not serializable; 
second, they implicitly define an assembly phase where all data to be used by the view is fetched 
and marshalled into the DTOs before returning control to the presentation tier. 
Hibernate eliminates the first purpose. 
Unless you are prepared to hold the persistence context (the session) open across the view rendering process, 
you will still need an assembly phase. 
Think of your business methods as having a strict contract with the presentation tier 
about what data is available in the detached objects. 
This is not a limitation of Hibernate. 
It is a fundamental requirement of safe transactional data access.

Consider abstracting your business logic from Hibernate:
Hide Hibernate data-access code behind an interface. 
Combine the DAO and Thread Local Session patterns. 
You can even have some classes persisted by handcoded JDBC associated to Hibernate via a UserType. 
This advice is, however, intended for "sufficiently large" applications. 
It is not appropriate for an application with five tables.

Do not use exotic association mappings:
（exotic，adj.异国的；外来的；异乎寻常的，奇异的；吸引人的
n.舶来品，外来物；脱衣舞女）
Practical test cases for real many-to-many associations are rare. 
很多应用，其实不需要那么多的“多对多”关联。
Most of the time you need additional information stored in the "link table". 
如果关联表需要更多的字段，
In this case, it is much better to use two one-to-many associations to an intermediate link class. 
建议使用两个“一对多”关联。
In fact, most associations are one-to-many and many-to-one. 
For this reason, you should proceed cautiously when using any other association style.

Prefer bidirectional associations:
优先使用双向关联。
Unidirectional associations are more difficult to query. 
使用单向关联，有些查询会比较困难。
In a large application, almost all associations must be navigable in both directions in queries.

