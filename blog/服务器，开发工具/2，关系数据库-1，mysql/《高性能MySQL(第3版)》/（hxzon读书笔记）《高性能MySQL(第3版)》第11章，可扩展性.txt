（hxzon读书笔记）《高性能MySQL(第3版)》第11章，可扩展性

by hxzon
===========
第11章 可扩展的MySQL

11.1 什么是可扩展性
11.1.1 正式的可扩展性定义

11.2 扩展MySQL
11.2.1 规划可扩展性
11.2.2 为扩展赢得时间

11.2.3 向上扩展
11.2.4 向外扩展
11.2.5 通过多实例扩展
11.2.6 通过集群扩展
11.2.7 向内扩展

11.3 负载均衡
11.3.1 直接连接
11.3.2 引入中间件
11.3.3 一主多备间的负载均衡
11.4 总结

====
1，什么是可扩展性

性能定义为“响应时间”。
可扩展性表明了当需要增加资源，以执行更多工作时，系统能够获得划算的“等同提升”（equal bang for the buck）。

系统容量表示在一定时间内能够完成的工作量。
但容量必须是可以有效利用的。
系统的最大吞吐量并不等同于容量。
我们将系统的真实容量定义为在保证可接受的性能的情况下，能够达到的吞吐量。

容量和可扩展性并不依赖于性能。

从较高层次看，可扩展性就是能够通过增加资源，来提升容量的能力。

容量可以简单的认为是处理负载的能力：数据量，用户量，用户活跃度，
相关数据集的大小（例如在整个相关联用户群体上执行查询和计算）。

正式定义：
可扩展性是当增加资源以处理负载和增加容量时，系统能够获得的投资产出率（ROI）。

线性扩展

可扩展性定律（USL）：
线性扩展的偏差可通过两个因素来建立模型：
-1，无法并发执行的一部分工作。
-2，需要交互的另外一部分工作。
为第一个因素建模就有了著名的Amdahl定律，它会导致吞吐量趋于平缓。
增加第二个因素，就得出了USL。

USL并不能完美的描述真实系统，它只是一个简化模型。

扩展模型不是最终定论。
当工作负载和其所运行的系统存在微妙关系时，USL理论可能失效。
例如，当集群的总内存由于数据集大小而发生改变时，也会导致系统的行为发送变化。
USL不允许比线性更好的可扩展性，
但现实中可能会发生这样的事情：
增加系统的资源后，原来的一部分IO密集型工作变成了纯内存工作，
因此获得超过线性的性能扩展。

====
2，扩展Mysql

垂直扩展（向上扩展）
水平扩展（向外扩展）
向内扩展（清理和归档很少或不需要的数据）

2.1，规划可扩展性

最困难的部分是，估算需要承担的负载到底有多少。不必精确，但必须在一定的数量级范围内。

还需要大致正确的估计日程表，需要知道底线在哪里。

2.2，为扩展赢得时间

-1，优化性能。
-2，购买性能更强的硬件。

====
2.3，向上扩展，购买更多性能强悍的硬件。

2.4，向外扩展：复制，拆分，数据分片（sharding）

-1，按功能（职责）拆分
归根到底，还是不能通过功能划分来无限的扩展。
因为如果一个功能区域被捆绑到单个mysql节点，就只能进行垂直扩展。

-2，数据分片

无法完全隐藏分片，因为应用通常更了解跟查询相关的一些信息。
太多的抽象会导致低效率。

如果想扩展写容量，就必须切分数据。

如非必要，尽量不分片。
先性能调优，或者更好的设计应用和数据库，推迟分片。

-3，选择分区键

一种方案是，对每个表的主键使用“哈希”来分片。
可扩展性不好，因为可能需要频繁查询所有分片来获取需要的数据。

一个好的分区键常常是数据库中一个非常重要的实体的主键。
这些键值决定了分片单元。

选择分区键的时候，尽可能选择那些能够避免“跨分片查询”的，
同时，也要让分片足够小。

-4，多个分区键

当存在两个或更多个维度时。

-5，跨分片查询

通常更依赖缓存。
也可借助汇总表，冗余存储。

维持数据一致性困难，外键无法在分片间工作。
可以使用XA事务，但开销太大。
可以设计一些定期执行的清理过程。

-6，分配数据、分片和节点

分片和节点不一定是一对一关系。
应该尽可能，让分片大小比节点容量小很多，在单个节点上存储多个分片。

保持分片小更容易管理，例如备份，恢复，更改表结构都更容器。
小一点的分片也便于转移。
分片间转移数据，比转移分片更复杂，尽量避免。

如果分片太小，会产生太多的表，可能引发文件系统或mysql内部结构的问题。
太小的分片，也导致“跨分片查询”增多。

-7，在节点上部署分片

--1，每个分片使用单一数据库，且数据库名相同。

--2，多个分片的表放到一个数据库中，每个表名含有分片好。

--3，每个分片使用一个数据库，数据库名包含分片号，但表名不包含。

--4，每个分片使用一个数据库，数据库名和表名都包含分片好。

--5，每个节点运行多个mysql实例，每个实例有一个或多个分片。

我们倾向于，使用每个分片一个数据库，数据库名和表名都包含分片号。
这可以避免误操作。

-8，固定分配

将数据分配到分片中：固定分配和动态分配。

固定分配仅仅依赖于分区键的值。
有点是简单，开销低。
缺点：
--1，很难平衡不同分片间的负载。
--2，修改分片策略困难，因为需要重新分配已有数据。

迟早还是要动态分配。

-9，动态分配

可以使用一个表作为分区函数。
动态分配增加了分区函数的开销，因为需要额外调用一次外部资源。

最大好处是可以对数据存储位置做细粒度的控制，使得均衡分配更容易。
还可提供适应未知改变的灵活性。
有助于减轻跨分片查询问题。

可以建立多层次的分片策略。

-10，混合动态分配和固定分配

-11，显示分配

-12，重新均衡分片数据

-13，生成全局唯一id

-14，分片工具

hibernate shards：提供分片感知功能，应用无须知道正在使用分片。

====
2.5，通过多实例扩展

（2014.7.7）
