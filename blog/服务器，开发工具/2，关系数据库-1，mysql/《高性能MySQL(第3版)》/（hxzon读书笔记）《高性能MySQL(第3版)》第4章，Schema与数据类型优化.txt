（hxzon读书笔记）《高性能MySQL(第3版)》第4章，Schema与数据类型优化

by hxzon
===========
第4章Schema与数据类型优化111 

4.1选择优化的数据类型111 
4.1.1整数类型113 
4.1.2实数类型113 
4.1.3字符串类型114 
4.1.4日期和时间类型121 
4.1.5位数据类型123 
4.1.6选择标识符（identifier）125 
4.1.7特殊类型数据127 

4.2MySQLschema设计中的陷阱127 

4.3范式和反范式129 
4.3.1范式的优点和缺点130 
4.3.2反范式的优点和缺点130 
4.3.3混用范式化和反范式化131 

4.4缓存表和汇总表132 
4.4.1物化视图134 
4.4.2计数器表135 

4.5加快ALTERTABLE操作的速度136 
4.5.1只修改.frm文件137 
4.5.2快速创建MyISAM索引139 
4.6总结140 

==========
1，选择数据类型

更小的通常更好。
整型比字符串好。
不要用字符串存储日期和时间。
应该用整型存储ip地址。

尽量避免null。
有null的列使得索引、索引统计和值比较都更复杂。
InnoDB使用单独的位存储null值，所以对于稀疏数据有很好的空间效率。
但这点不适用于MyISRAM。

timestamp只使用datetime一半的存储空间，
而且会根据时区变化，具有特殊的自动更新能力。
timestamp允许的时间范围小很多。

integer，bool，numeric都只是数据类型的别名。

2，整数类型

tinyint 8
smallint 16
mediumint 24
int 32
bigint 64

有可选的unsigned属性。

整数计算一般使用64位bigint，即使在32位环境。
聚合函数除外，它们使用decimal或double计算。

可以为整数类型指定宽度，int(11)，这是没有意义的，
它不会限制值的合法范围，
只是某些工具用来控制显示的字符个数。

2，实数类型

float，double，使用标准的浮点运算进行近似计算。
float，32位。
double，64位。
它们只是存储类型，内部使用double计算。

decimal，存储精确的小数，mysql 5.0以后支持精确计算。

浮点和decimal都可以指定精度。
decimal可以指定小数点前后所允许的最大位数。

decimal(18,9)小数点两边各存储9个数字。
小数点前后各用4个字节，小数点本身1个字节，共9个字节。

精度定义是非标准的，建议只指定数据类型，不指定精度。

可以考虑用bigint代替decimal，根据小数位数乘以相应倍数。
这可以避免浮点计算不精确，而decimal精确计算代价高的问题。

3，字符串类型

从mysql4.1开始，每个字符串的列，可以定义自己的字符集和排序规则（或者说校对规则，collation）。

varchar
char
binary，varbinary，二进制字符串。
blob
text

----
varchar，可变长，比定长类型更节省空间。
除非mysql表适用row_format=fixed，这样每一行都使用定长存储。
varchar使用1或2个额外字节记录字符串长度。
mysql5.0以后，varchar会保留末尾的空格。
4.1及之前，会删除varchar末尾的空格。

varchar适用场景：
字符串最大长度比平均长度大很多。
列的更新较少，所以碎片不是问题。
使用了utf8这样复杂的字符集，每个字符的字节数不同。

innoDB会把过长的varchar存储为blob。

varchar(200)和varchar(5)存储“hello”的空间是一样的，
但是更长的列会消耗更多内存，
因为mysql通常会分配固定大小的内存块来保存内部值。

----
char，定长。
char会根据需要采用空格进行填充以方便比较。
char末尾的空格会被删除。

char使用场景：
所有值都很接近，例如md5值。
经常变更的数据，因为定长的char不容易产生碎片。
非常短的列，例如只有y和n两个值，char(1)只有一个字节，
而varchar(1)需要两个字节。

----
binary，采用\0填充而不是空格。
在检索时不会去掉填充值。

----
blob，很大的字符串，采用二进制存储。
text，很大的字符串，采用字符存储。

tinytext,smalltext,text,mediumtext,longtext

tinyblob,smallblob,blob,mediumblob,longblob

blob是smallblob的同义词，
text是smalltext的同义词。

与其它类型不同，mysql把每个blob和text当作一个独立的对象处理。
当blob和text太大时，innoDB使用专门的“外部”存储区域。

对blob和text进行排序时，只对前max_sort_length字节（而不是整个字符串）做排序。
不能将blob和text全部长度的字符串做索引，也不能使用这些索引消除排序。

----
因为memory引擎不支持blob和text，
所以当使用了blob和text列，且需要使用隐式临时表时，
将不得不实用myISAM磁盘临时表。
这会导致严重性能开销。

如果无法避免使用blob和text，
可以在用到blob的地方，使用substring(column,length)将列值转换为字符串，就可以使用内存临时表了。
注意，子字符串要足够短，
使得临时表的大小不超过max_heap_table_size，
或tmp_table_size。

如果explain的extra列包含using temporary，就表明这个查询使用了隐式临时表。

----
使用枚举代替字符串类型

create table enum_test(
e enum('fish','apple','dog') not null);

insert into enum_text(e) values('fish'),('dog'),('apple');

（hxzon：注意，这里插入了三行。）

如果需要顺序，则需要按顺序来定义枚举列。（不会按字符串来排序）

也可以使用field()来显示指定排序顺序，但会导致无法利用索引来消除排序。

select e from enum_test 
order by field(e,'apple','dog','fish');

对于会变的字符串，使用枚举则不是好主意，
除非总是在列表末尾添加元素，
在mysql5.1中，末尾添加可以不用重建整个表。

由于mysql把每个枚举值保存为整数，
必须进行查找才能转换为字符串，所以有开销。
在特定情况下，把char/varchar列与枚举列进行关联，
可能会比直接关联char/varchar列更慢。

这是一个通用的设计实践，在“查找表”时采用整数主键，
而避免采用基于字符串值的关联。

====
4，日期和时间类型








