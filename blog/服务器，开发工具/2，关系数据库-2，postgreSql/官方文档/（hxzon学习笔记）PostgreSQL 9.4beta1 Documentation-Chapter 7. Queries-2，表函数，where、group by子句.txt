（hxzon学习笔记）PostgreSQL 9.4beta1 Documentation-Chapter 7. Queries-2，表函数，where、group by子句

注释by hxzon
====
7. Queries

7.1. Overview
7.2. Table Expressions

7.3. Select Lists
7.4. Combining Queries
7.5. Sorting Rows
7.6. LIMIT and OFFSET
7.7. VALUES Lists

7.8. WITH Queries (Common Table Expressions)

====
7.1. Overview

7.2. Table Expressions
7.2.1. The FROM Clause
7.2.2. The WHERE Clause
7.2.3. The GROUP BY and HAVING Clauses
7.2.4. Window Function Processing


====
7.2.1.4. Table Functions
表函数（hxzon，重点）

Table functions are functions that produce a set of rows,
表函数，指返回一系列行的函数。 
made up of either base data types (scalar types) or composite data types (table rows). 
They are used like a table, view, or subquery in the FROM clause of a query. 
Columns returned by table functions can be included in SELECT, JOIN, or WHERE clauses 
in the same manner as columns of a table, view, or subquery.

Table functions may also be combined using the ROWS FROM syntax, 
with the results returned in parallel columns; 
表函数可以和rows from一起使用。
rows from将多个表函数的返回值“联接”在一起。
the number of result rows in this case is that of the largest function result, 
with smaller results padded with NULLs to match.
结果集的行数为较大的那一个，较小的结果集将用null来填充。

function_call [WITH ORDINALITY] [[AS] table_alias [(column_alias [, ... ])]]

ROWS FROM( function_call [, ... ] ) [WITH ORDINALITY] [[AS] table_alias [(column_alias [, ... ])]]

If the WITH ORDINALITY clause is specified, 
an additional column of type bigint will be added to the function result columns. 
This column numbers the rows of the function result set, starting from 1. 
(This is a generalization of the SQL-standard syntax for UNNEST ... WITH ORDINALITY.) 
By default, the ordinal column is called ordinality, but a different column name can be assigned to it using an AS clause.
如果使用了with ordinality，则会额外多一列（列名为ordinality，可以通过别名子句重命名），
表示行号，从1开始。


The special table function UNNEST may be called with any number of array parameters, 
and it returns a corresponding number of columns, 
as if UNNEST (Section 9.18) had been called on each parameter separately 
and combined using the ROWS FROM construct.
表函数unnest，将多个数组“联接”在一起（hxzon：每个数组是一列）。

UNNEST( array_expression [, ... ] ) [WITH ORDINALITY] [[AS] table_alias [(column_alias [, ... ])]]

If no table_alias is specified, the function name is used as the table name;
如果没有指定表别名，函数名将作为表名。 
in the case of a ROWS FROM() construct, the first function's name is used.
如果使用了rows from()，则使用第一个函数名。

If column aliases are not supplied, then for a function returning a base data type,
如果没有指定列名，如果函数返回基本数据类型，则函数名作为列名。 
the column name is also the same as the function name. 
For a function returning a composite type, 
如果函数返回组合类型，则该组合类型的每个组成部分用来做列名。
the result columns get the names of the individual attributes of the type.

Some examples:

CREATE TABLE foo (fooid int, foosubid int, fooname text);

CREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$
    SELECT * FROM foo WHERE fooid = $1;
$$ LANGUAGE SQL;

（hxzon：setof foo，即返回foo的集合。注意，这里使用的是 “ language sql ”。）

SELECT * FROM getfoo(1) AS t1;

SELECT * FROM foo
    WHERE foosubid IN (
                        SELECT foosubid
                        FROM getfoo(foo.fooid) z
                        WHERE z.fooid = foo.fooid
                      );

CREATE VIEW vw_getfoo AS SELECT * FROM getfoo(1);

SELECT * FROM vw_getfoo;

In some cases it is useful to define table functions that 
can return different column sets depending on how they are invoked.
表函数可以每次返回不同的列。 
To support this, the table function can be declared as returning the pseudotype record.
这时，表函数的返回值可以返回伪数据类型（即记录）。 
When such a function is used in a query, 
the expected row structure must be specified in the query itself, 
so that the system can know how to parse and plan the query.
当使用这样的表函数时，须在查询语句中指明数据的结构（有哪些列）。 
This syntax looks like:
语法如下：

function_call [AS] alias (column_definition [, ... ])

function_call AS [alias] (column_definition [, ... ])

ROWS FROM( ... function_call AS (column_definition [, ... ]) [, ... ] )

When not using the ROWS FROM() syntax, 
the column_definition list replaces the column alias list that could otherwise be attached to the FROM item; 
the names in the column definitions serve as column aliases. 
When using the ROWS FROM() syntax,
当使用rows from()时，每个函数的列声明在rows from()内部分开写。 
a column_definition list can be attached to each member function separately; 
or if there is only one member function and no WITH ORDINALITY clause, 
a column_definition list can be written in place of a column alias list following ROWS FROM().
除非只有一个函数，且不带有with ordinality，此时可以卸载rows from()之后。

Consider this example:

SELECT *
    FROM dblink('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc')
      AS t1(proname name, prosrc text)
    WHERE proname LIKE 'bytea%';

The dblink function (part of the dblink module) executes a remote query.
dblink用来执行一个远程查询。 
It is declared to return record since it might be used for any kind of query. 
The actual column set must be specified in the calling query 
so that the parser knows, for example, what * should expand to.

====
7.2.1.5. LATERAL Subqueries
字面量子查询

Subqueries appearing in FROM can be preceded by the key word LATERAL.
使用关键字lateral。 
This allows them to reference columns provided by preceding FROM items. 
(Without LATERAL, each subquery is evaluated independently 
and so cannot cross-reference any other FROM item.)

Table functions appearing in FROM can also be preceded by the key word LATERAL, 
but for functions the key word is optional; 
the function's arguments can contain references to columns provided by preceding FROM items in any case.

A LATERAL item can appear at top level in the FROM list, or within a JOIN tree. 
In the latter case it can also refer to any items 
that are on the left-hand side of a JOIN that it is on the right-hand side of.

When a FROM item contains LATERAL cross-references, evaluation proceeds as follows: 
for each row of the FROM item providing the cross-referenced column(s), 
or set of rows of multiple FROM items providing the columns, 
the LATERAL item is evaluated using that row or row set's values of the columns. 
The resulting row(s) are joined as usual with the rows they were computed from. 
This is repeated for each row or set of rows from the column source table(s).

A trivial example of LATERAL is

SELECT * FROM foo, LATERAL (SELECT * FROM bar WHERE bar.id = foo.bar_id) ss;

This is not especially useful since it has exactly the same result as the more conventional

SELECT * FROM foo, bar WHERE bar.id = foo.bar_id;

LATERAL is primarily useful when the cross-referenced column 
is necessary for computing the row(s) to be joined. 
A common application is providing an argument value for a set-returning function. 
For example, supposing that vertices(polygon) returns the set of vertices of a polygon, 
we could identify close-together vertices of polygons stored in a table with:

SELECT p1.id, p2.id, v1, v2
FROM polygons p1, polygons p2,
     LATERAL vertices(p1.poly) v1,
     LATERAL vertices(p2.poly) v2
WHERE (v1 <-> v2) < 10 AND p1.id != p2.id;

This query could also be written

SELECT p1.id, p2.id, v1, v2
FROM polygons p1 CROSS JOIN LATERAL vertices(p1.poly) v1,
     polygons p2 CROSS JOIN LATERAL vertices(p2.poly) v2
WHERE (v1 <-> v2) < 10 AND p1.id != p2.id;

or in several other equivalent formulations. 
(As already mentioned, the LATERAL key word is unnecessary in this example, but we use it for clarity.)

It is often particularly handy to LEFT JOIN to a LATERAL subquery, 
so that source rows will appear in the result even if the LATERAL subquery produces no rows for them. 
For example, if get_product_names() returns the names of products made by a manufacturer, 
but some manufacturers in our table currently produce no products, 
we could find out which ones those are like this:

SELECT m.name
FROM manufacturers m LEFT JOIN LATERAL get_product_names(m.id) pname ON true
WHERE pname IS NULL;


========
7.2.2. The WHERE Clause
where子句

The syntax of the WHERE Clause is

WHERE search_condition

where search_condition is any value expression (see Section 4.2) that returns a value of type boolean.

After the processing of the FROM clause is done, each row of the derived virtual table is checked against the search condition. If the result of the condition is true, the row is kept in the output table, otherwise (i.e., if the result is false or null) it is discarded. The search condition typically references at least one column of the table generated in the FROM clause; this is not required, but otherwise the WHERE clause will be fairly useless.

Note: The join condition of an inner join can be written either in the WHERE clause or in the JOIN clause. For example, these table expressions are equivalent:
FROM a, b WHERE a.id = b.id AND b.val > 5
and:
FROM a INNER JOIN b ON (a.id = b.id) WHERE b.val > 5
or perhaps even:
FROM a NATURAL JOIN b WHERE b.val > 5
Which one of these you use is mainly a matter of style. The JOIN syntax in the FROM clause is probably not as portable to other SQL database management systems, even though it is in the SQL standard. For outer joins there is no choice: they must be done in the FROM clause. The ON or USING clause of an outer join is not equivalent to a WHERE condition, because it results in the addition of rows (for unmatched input rows) as well as the removal of rows in the final result.
Here are some examples of WHERE clauses:

SELECT ... FROM fdt WHERE c1 > 5

SELECT ... FROM fdt WHERE c1 IN (1, 2, 3)

SELECT ... FROM fdt WHERE c1 IN (SELECT c1 FROM t2)

SELECT ... FROM fdt WHERE c1 IN (SELECT c3 FROM t2 WHERE c2 = fdt.c1 + 10)

SELECT ... FROM fdt WHERE c1 BETWEEN (SELECT c3 FROM t2 WHERE c2 = fdt.c1 + 10) AND 100

SELECT ... FROM fdt WHERE EXISTS (SELECT c1 FROM t2 WHERE c2 > fdt.c1)
fdt is the table derived in the FROM clause. Rows that do not meet the search condition of the WHERE clause are eliminated from fdt. Notice the use of scalar subqueries as value expressions. Just like any other query, the subqueries can employ complex table expressions. Notice also how fdt is referenced in the subqueries. Qualifying c1 as fdt.c1 is only necessary if c1 is also the name of a column in the derived input table of the subquery. But qualifying the column name adds clarity even when it is not needed. This example shows how the column naming scope of an outer query extends into its inner queries.

==========
7.2.3. The GROUP BY and HAVING Clauses

After passing the WHERE filter, the derived input table might be subject to grouping, using the GROUP BY clause, and elimination of group rows using the HAVING clause.

SELECT select_list
    FROM ...
    [WHERE ...]
    GROUP BY grouping_column_reference [, grouping_column_reference]...
The GROUP BY Clause is used to group together those rows in a table that have the same values in all the columns listed. The order in which the columns are listed does not matter. The effect is to combine each set of rows having common values into one group row that represents all rows in the group. This is done to eliminate redundancy in the output and/or compute aggregates that apply to these groups. For instance:

=> SELECT * FROM test1;
 x | y
---+---
 a | 3
 c | 2
 b | 5
 a | 1
(4 rows)

=> SELECT x FROM test1 GROUP BY x;
 x
---
 a
 b
 c
(3 rows)
In the second query, we could not have written SELECT * FROM test1 GROUP BY x, because there is no single value for the column y that could be associated with each group. The grouped-by columns can be referenced in the select list since they have a single value in each group.

In general, if a table is grouped, columns that are not listed in GROUP BY cannot be referenced except in aggregate expressions. An example with aggregate expressions is:

=> SELECT x, sum(y) FROM test1 GROUP BY x;
 x | sum
---+-----
 a |   4
 b |   5
 c |   2
(3 rows)
Here sum is an aggregate function that computes a single value over the entire group. More information about the available aggregate functions can be found in Section 9.20.

Tip: Grouping without aggregate expressions effectively calculates the set of distinct values in a column. This can also be achieved using the DISTINCT clause (see Section 7.3.3).
Here is another example: it calculates the total sales for each product (rather than the total sales of all products):

SELECT product_id, p.name, (sum(s.units) * p.price) AS sales
    FROM products p LEFT JOIN sales s USING (product_id)
    GROUP BY product_id, p.name, p.price;
In this example, the columns product_id, p.name, and p.price must be in the GROUP BY clause since they are referenced in the query select list (but see below). The column s.units does not have to be in the GROUP BY list since it is only used in an aggregate expression (sum(...)), which represents the sales of a product. For each product, the query returns a summary row about all sales of the product.

If the products table is set up so that, say, product_id is the primary key, then it would be enough to group by product_id in the above example, since name and price would be functionally dependent on the product ID, and so there would be no ambiguity about which name and price value to return for each product ID group.

In strict SQL, GROUP BY can only group by columns of the source table but PostgreSQL extends this to also allow GROUP BY to group by columns in the select list. Grouping by value expressions instead of simple column names is also allowed.

If a table has been grouped using GROUP BY, but only certain groups are of interest, the HAVING clause can be used, much like a WHERE clause, to eliminate groups from the result. The syntax is:

SELECT select_list FROM ... [WHERE ...] GROUP BY ... HAVING boolean_expression
Expressions in the HAVING clause can refer both to grouped expressions and to ungrouped expressions (which necessarily involve an aggregate function).

Example:

=> SELECT x, sum(y) FROM test1 GROUP BY x HAVING sum(y) > 3;
 x | sum
---+-----
 a |   4
 b |   5
(2 rows)

=> SELECT x, sum(y) FROM test1 GROUP BY x HAVING x < 'c';
 x | sum
---+-----
 a |   4
 b |   5
(2 rows)
Again, a more realistic example:

SELECT product_id, p.name, (sum(s.units) * (p.price - p.cost)) AS profit
    FROM products p LEFT JOIN sales s USING (product_id)
    WHERE s.date > CURRENT_DATE - INTERVAL '4 weeks'
    GROUP BY product_id, p.name, p.price, p.cost
    HAVING sum(p.price * s.units) > 5000;
In the example above, the WHERE clause is selecting rows by a column that is not grouped (the expression is only true for sales during the last four weeks), while the HAVING clause restricts the output to groups with total gross sales over 5000. Note that the aggregate expressions do not necessarily need to be the same in all parts of the query.

If a query contains aggregate function calls, but no GROUP BY clause, grouping still occurs: the result is a single group row (or perhaps no rows at all, if the single row is then eliminated by HAVING). The same is true if it contains a HAVING clause, even without any aggregate function calls or GROUP BY clause.

=========
7.2.4. Window Function Processing
窗口函数处理

If the query contains any window functions (see Section 3.5, Section 9.21 and Section 4.2.8), 
these functions are evaluated after any grouping, aggregation, and HAVING filtering is performed. 
如果查询包含窗口函数(参考Section 3.5，Section 9.19和Section 4.2.8)， 
这些函数在执行了分组、聚合和HAVING过滤之后，才计算。 
That is, if the query uses any aggregates, GROUP BY, or HAVING, 
then the rows seen by the window functions are the group rows 
instead of the original table rows from FROM/WHERE.
也就是说，如果查询使用任何的聚合、GROUP BY或HAVING，
那么 由窗口函数发现的行是该组行，而不是从FROM/WHERE得到的原始表行。

When multiple window functions are used, 
all the window functions having syntactically equivalent PARTITION BY and ORDER BY clauses 
in their window definitions are guaranteed to be evaluated in a single pass over the data. 
当多个窗口函数被使用的时候，所有的窗口函数都被保证，在同一轮中处理数据时。 
Therefore they will see the same sort ordering, even if the ORDER BY does not uniquely determine an ordering. 
因此它们看到的数据是同样的顺序，即使ORDER BY不唯一确定一个排序。 

However, no guarantees are made about the evaluation of functions having different PARTITION BY or ORDER BY specifications. 
(In such cases a sort step is typically required between the passes of window function evaluations, 
and the sort is not guaranteed to preserve ordering of rows that its ORDER BY sees as equivalent.)
然而，不确保功能的执行有不同的PARTITION BY或ORDER BY 规范。
（在这种情况下，通常需要在窗口函数执行前先排序，
但顺序不保证一直保留到结果中。）

Currently, window functions always require presorted data,
当前，窗口函数需要已排序的数据。 
and so the query output will be ordered according to one or another of the window functions' PARTITION BY/ORDER BY clauses. 
It is not recommended to rely on this, 
不推荐依赖这种机制所产生的顺序。
however. Use an explicit top-level ORDER BY clause if you want to be sure the results are sorted in a particular way.
需要在最顶层语句中使用order by来保证最终顺序。

