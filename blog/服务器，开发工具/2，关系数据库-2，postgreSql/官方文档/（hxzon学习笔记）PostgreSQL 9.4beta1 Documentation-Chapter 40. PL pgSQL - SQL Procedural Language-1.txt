（hxzon学习笔记）PostgreSQL 9.4beta1 Documentation-Chapter 40. PL/pgSQL - SQL Procedural Language-1

注释by hxzon
====
40.1. Overview
40.1.1. Advantages of Using PL/pgSQL
40.1.2. Supported Argument and Result Data Types 参数和返回值的数据类型

40.2. Structure of PL/pgSQL

40.3. Declarations 声明
40.3.1. Declaring Function Parameters 声明函数参数
40.3.2. ALIAS 别名
40.3.3. Copying Types 跟随类型（跟随表的行类型，或表的列类型）
40.3.4. Row Types 行类型
40.3.5. Record Types 记录类型（不固定结构）
40.3.6. Collation of PL/pgSQL Variables

----
40.4. Expressions 表达式

40.5. Basic Statements 基本语句
40.5.1. Assignment 赋值
40.5.2. Executing a Command With No Result 无结果的语句
40.5.3. Executing a Query with a Single-row Result 单行结果的语句
40.5.4. Executing Dynamic Commands 动态语句
40.5.5. Obtaining the Result Status
40.5.6. Doing Nothing At All

40.6. Control Structures 流程控制
40.6.1. Returning From a Function 从函数返回
40.6.2. Conditionals 条件
40.6.3. Simple Loops 简单的循环
40.6.4. Looping Through Query Results 遍历查询结果
40.6.5. Looping Through Arrays 遍历数组
40.6.6. Trapping Errors
40.6.7. Getting Diagnostics Information

40.7. Cursors 游标
40.7.1. Declaring Cursor Variables 声明游标变量
40.7.2. Opening Cursors 打开游标
40.7.3. Using Cursors 使用游标
40.7.4. Looping Through a Cursor's Result 遍历游标值

40.8. Errors and Messages

40.9. Trigger Procedures 触发器过程
40.9.1. Triggers on data changes 数据变更时的触发器
40.9.2. Triggers on events 事件触发器

40.10. PL/pgSQL Under the Hood
40.10.1. Variable Substitution
40.10.2. Plan Caching

40.11. Tips for Developing in PL/pgSQL
40.11.1. Handling of Quotation Marks
40.11.2. Additional compile-time checks

40.12. Porting from Oracle PL/SQL
40.12.1. Porting Examples
40.12.2. Other Things to Watch For
40.12.3. Appendix

====
40.1. Overview

PL/pgSQL is a loadable procedural language for the PostgreSQL database system. 
The design goals of PL/pgSQL were to create a loadable procedural language that

can be used to create functions and trigger procedures,

adds control structures to the SQL language,

can perform complex computations,

inherits all user-defined types, functions, and operators,

can be defined to be trusted by the server,

is easy to use.

Functions created with PL/pgSQL can be used anywhere that built-in functions could be used. 
For example, it is possible to create complex conditional computation functions 
and later use them to define operators or use them in index expressions.

In PostgreSQL 9.0 and later, PL/pgSQL is installed by default. 
However it is still a loadable module, 
so especially security-conscious administrators could choose to remove it.
它属于加载模块，9.0及之后默认被安装，可以被移除。

====
40.1.1. Advantages of Using PL/pgSQL

SQL is the language PostgreSQL and most other relational databases use as query language. 
It's portable and easy to learn. 
But every SQL statement must be executed individually by the database server.

That means that your client application must send each query to the database server, 
wait for it to be processed, receive and process the results, do some computation, 
then send further queries to the server. 
All this incurs interprocess communication 
and will also incur network overhead if your client is on a different machine than the database server.

With PL/pgSQL you can group a block of computation and a series of queries inside the database server, 
thus having the power of a procedural language and the ease of use of SQL, 
but with considerable savings of client/server communication overhead.

Extra round trips between client and server are eliminated

Intermediate results that the client does not need do not have to be marshaled or transferred between server and client

Multiple rounds of query parsing can be avoided

This can result in a considerable performance increase as compared to an application that does not use stored functions.

Also, with PL/pgSQL you can use all the data types, operators and functions of SQL.

====
40.1.2. Supported Argument and Result Data Types
参数和返回值的数据类型

Functions written in PL/pgSQL can accept as arguments any scalar or array data type supported by the server, 
and they can return a result of any of these types. 
They can also accept or return any composite type (row type) specified by name. 
It is also possible to declare a PL/pgSQL function as returning record,
存储函数可以返回记录类型，它的结构（列）由查询语句指定。 
which means that the result is a row type whose columns 
are determined by specification in the calling query, as discussed in Section 7.2.1.4.

PL/pgSQL functions can be declared to accept a variable number of arguments by using the VARIADIC marker. 
This works exactly the same way as for SQL functions, as discussed in Section 35.4.5.

PL/pgSQL functions can also be declared to accept and return 
the polymorphic types anyelement, anyarray, anynonarray, anyenum, andanyrange. 
The actual data types handled by a polymorphic function can vary from call to call, 
as discussed in Section 35.2.5. 
An example is shown in Section 40.3.1.

（hxzon：重要）
PL/pgSQL functions can also be declared to return a "set" (or table) of any data type 
that can be returned as a single instance.
存储函数可以返回一个表。 
Such a function generates its output by executing RETURN NEXT 
for each desired element of the result set,
使用return next，将元素加入到结果集， 
or by using RETURN QUERY to output the result of evaluating a query.
或者使用return query，返回查询语句的结果集。

Finally, a PL/pgSQL function can be declared to return void if it has no useful return value.

PL/pgSQL functions can also be declared with output parameters in place of an explicit specification of the return type.
存储函数支持“出参数”。 
This does not add any fundamental capability to the language, 
but it is often convenient, especially for returning multiple values.
 
The RETURNS TABLE notation can also be used in place of RETURNS SETOF.
return table可以用于return setof可以使用的地方。

Specific examples appear in Section 40.3.1 and Section 40.6.1.

====
40.2. Structure of PL/pgSQL
存储函数的组成部分

PL/pgSQL is a block-structured language. 
The complete text of a function definition must be a block. 
A block is defined as:

[ <<label>> ]
[ DECLARE
    declarations ]
BEGIN
    statements
END [ label ];

Each declaration and each statement within a block is terminated by a semicolon. 
A block that appears within another block must have a semicolon after END, as shown above;
块内的块的end必须使用分号。 
however the final END that concludes a function body does not require a semicolon.
最外层的块的end则不需要分号。

Tip: A common mistake is to write a semicolon immediately after BEGIN. 
This is incorrect and will result in a syntax error.
A label is only needed if you want to identify the block for use in an EXIT statement,
“块标签”主要用于exit语句，或者用来限定哪个块的变量。 
or to qualify the names of the variables declared in the block. 
If a label is given after END, it must match the label at the block's beginning.

All key words are case-insensitive. 
所有关键字都是大小写无关的。
Identifiers are implicitly converted to lower case unless double-quoted, just as they are in ordinary SQL commands.
除非使用双引号，标识符会隐式转为小写。

Comments work the same way in PL/pgSQL code as in ordinary SQL. 
A double dash (--) starts a comment that extends to the end of the line. 
A /* starts a block comment that extends to the matching occurrence of */. 
Block comments nest.
使用双中横线表示单行注释。
块注释。

Any statement in the statement section of a block can be a subblock. 
Subblocks can be used for logical grouping or to localize variables to a small group of statements. 
Variables declared in a subblock mask any similarly-named variables of outer blocks for the duration of the subblock; 
but you can access the outer variables anyway if you qualify their names with their block's label. 
For example:
内部块的变量会遮住外部块的同名变量。可以用块标签来指明是哪个块的变量。

CREATE FUNCTION somefunc() RETURNS integer AS $$
<< outerblock >>
DECLARE
    quantity integer := 30;
BEGIN
    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 30
    quantity := 50;
    --
    -- Create a subblock
    --
    DECLARE
        quantity integer := 80;
    BEGIN
        RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 80
        RAISE NOTICE 'Outer quantity here is %', outerblock.quantity;  -- Prints 50
    END;

    RAISE NOTICE 'Quantity here is %', quantity;  -- Prints 50

    RETURN quantity;
END;
$$ LANGUAGE plpgsql;

Note: There is actually a hidden "outer block" surrounding the body of any PL/pgSQL function. 
This block provides the declarations of the function's parameters (if any), 
as well as some special variables such as FOUND (see Section 40.5.5). 
The outer block is labeled with the function's name, 
meaning that parameters and special variables can be qualified with the function's name.

It is important not to confuse the use of BEGIN/END for grouping statements in PL/pgSQL 
with the similarly-named SQL commands for transaction control. 
PL/pgSQL's BEGIN/END are only for grouping; they do not start or end a transaction.
注意，不同于普通的sql语句，它们用begin和end开启和结束事务。
而存储过程，begin和end只是用于语句分组，不开启事务。 
Functions and trigger procedures are always executed within a transaction established by an outer query
存储过程和触发器总是运行在包含它们的外层查询的事务中。 
— they cannot start or commit that transaction, since there would be no context for them to execute in. 

However, a block containing an EXCEPTION clause effectively forms a subtransaction 
that can be rolled back without affecting the outer transaction. 
For more about that see Section 40.6.6.
但是，块内的异常，导致子事务回滚，不影响外层的事务。

==========
40.3. Declarations
声明

All variables used in a block must be declared in the declarations section of the block. 
(The only exceptions are that the loop variable of a FOR loop 
iterating over a range of integer values is automatically declared as an integer variable, 
and likewise the loop variable of a FOR loop iterating over a cursor's result 
is automatically declared as a record variable.)

PL/pgSQL variables can have any SQL data type, such as integer, varchar, and char.

Here are some examples of variable declarations:
声明示例：

user_id integer;

quantity numeric(5);

url varchar;

myrow tablename%ROWTYPE;
表的行类型

myfield tablename.columnname%TYPE;
表的列类型

arow RECORD;
记录类型

The general syntax of a variable declaration is:

name [ CONSTANT ] type [ COLLATE collation_name ] [ NOT NULL ] [ { DEFAULT | := | = } expression ];

The DEFAULT clause, if given, specifies the initial value assigned to the variable when the block is entered.
default指明初始值，否则被初始化为null。 
If the DEFAULT clause is not given then the variable is initialized to the SQL null value. 
The CONSTANT option prevents the variable from being assigned to after initialization,
constant表明变量为常量，值不可悲改变。 
so that its value will remain constant for the duration of the block. 
The COLLATE option specifies a collation to use for the variable (see Section 40.3.6). 
If NOT NULL is specified, an assignment of a null value results in a run-time error.
没有指定not null时，当变量被赋值为null会抛出异常。 
All variables declared as NOT NULL must have a nonnull default value specified. 
Equal (=) can be used instead of PL/SQL-compliant :=.

A variable's default value is evaluated and assigned 
to the variable each time the block is entered (not just once per function call).
变量在每次进入块时被初始化，而不是当调用函数时。 
So, for example, assigning now() to a variable of type timestamp 
causes the variable to have the time of the current function call, 
not the time when the function was precompiled.

Examples:

quantity integer DEFAULT 32;

url varchar := 'http://mysite.com';

user_id CONSTANT integer := 10;

====
40.3.1. Declaring Function Parameters
函数参数

Parameters passed to functions are named with the identifiers $1, $2, etc. 
Optionally, aliases can be declared for $n parameter names for increased readability. 
Either the alias or the numeric identifier can then be used to refer to the parameter value.
函数参数以上述方式命名，可以使用别名使得更易读。

There are two ways to create an alias. 
The preferred way is to give a name to the parameter in the CREATE FUNCTION command, for example:
有两种方式指定别名。
一种是在参数列表中指定名字。

CREATE FUNCTION sales_tax(subtotal real) RETURNS real AS $$
BEGIN
    RETURN subtotal * 0.06;
END;
$$ LANGUAGE plpgsql;

The other way is to explicitly declare an alias, using the declaration syntax
另一种是在内部使用alias for关键字。

name ALIAS FOR $n;

The same example in this style looks like:

CREATE FUNCTION sales_tax(real) RETURNS real AS $$
DECLARE
    subtotal ALIAS FOR $1;
BEGIN
    RETURN subtotal * 0.06;
END;
$$ LANGUAGE plpgsql;

Note: These two examples are not perfectly equivalent.
注意，上述两种方式并不完全等价。 
In the first case, subtotal could be referenced as sales_tax.subtotal, 
but in the second case it could not. 
(Had we attached a label to the inner block, subtotal could be qualified with that label, instead.)

Some more examples:

CREATE FUNCTION instr(varchar, integer) RETURNS integer AS $$
DECLARE
    v_string ALIAS FOR $1;
    index ALIAS FOR $2;
BEGIN
    -- some computations using v_string and index here
END;
$$ LANGUAGE plpgsql;


CREATE FUNCTION concat_selected_fields(in_t sometablename) RETURNS text AS $$
BEGIN
    RETURN in_t.f1 || in_t.f3 || in_t.f5 || in_t.f7;
END;
$$ LANGUAGE plpgsql;

When a PL/pgSQL function is declared with output parameters,
“出参数” 
the output parameters are given $n names and optional aliases in just the same way as the normal input parameters. 
An output parameter is effectively a variable that starts out NULL; 
it should be assigned to during the execution of the function. 
The final value of the parameter is what is returned. 
For instance, the sales-tax example could also be done this way:

CREATE FUNCTION sales_tax(subtotal real, OUT tax real) AS $$
BEGIN
    tax := subtotal * 0.06;
END;
$$ LANGUAGE plpgsql;

Notice that we omitted RETURNS real — we could have included it, but it would be redundant.

Output parameters are most useful when returning multiple values. 
A trivial example is:

CREATE FUNCTION sum_n_product(x int, y int, OUT sum int, OUT prod int) AS $$
BEGIN
    sum := x + y;
    prod := x * y;
END;
$$ LANGUAGE plpgsql;

As discussed in Section 35.4.4, this effectively creates an anonymous record type for the function's results. 
If a RETURNS clause is given, it must say RETURNS record.

Another way to declare a PL/pgSQL function is with RETURNS TABLE, for example:
使用return table，表示返回表。

CREATE FUNCTION extended_sales(p_itemno int)
RETURNS TABLE(quantity int, total numeric) AS $$
BEGIN
    RETURN QUERY SELECT quantity, quantity * price FROM sales
                 WHERE itemno = p_itemno;
END;
$$ LANGUAGE plpgsql;

This is exactly equivalent to declaring one or more OUT parameters and specifying RETURNS SETOF some type.
这等价于 return setof 。

When the return type of a PL/pgSQL function is declared as a polymorphic type 
(anyelement, anyarray, anynonarray, anyenum, or anyrange), a special parameter $0 is created. 
Its data type is the actual return type of the function, as deduced from the actual input types (see Section 35.2.5). 
This allows the function to access its actual return type as shown in Section 40.3.3. 
$0 is initialized to null and can be modified by the function, 
so it can be used to hold the return value if desired, though that is not required. 
$0 can also be given an alias. 
For example, this function works on any data type that has a + operator:

CREATE FUNCTION add_three_values(v1 anyelement, v2 anyelement, v3 anyelement)
RETURNS anyelement AS $$
DECLARE
    result ALIAS FOR $0;
BEGIN
    result := v1 + v2 + v3;
    RETURN result;
END;
$$ LANGUAGE plpgsql;

The same effect can be had by declaring one or more output parameters as polymorphic types. 
In this case the special $0 parameter is not used; 
the output parameters themselves serve the same purpose. 
For example:

CREATE FUNCTION add_three_values(v1 anyelement, v2 anyelement, v3 anyelement,
                                 OUT sum anyelement)
AS $$
BEGIN
    sum := v1 + v2 + v3;
END;
$$ LANGUAGE plpgsql;

====
40.3.2. ALIAS
别名

newname ALIAS FOR oldname;

The ALIAS syntax is more general than is suggested in the previous section: 
you can declare an alias for any variable, not just function parameters.
可以给任何变量取别名，不仅仅是函数参数。 
The main practical use for this is to assign a different name for variables with predetermined names, 
such as NEW or OLD within a trigger procedure.

Examples:

DECLARE
  prior ALIAS FOR old;
  updated ALIAS FOR new;

Since ALIAS creates two different ways to name the same object, unrestricted use can be confusing. 
It's best to use it only for the purpose of overriding predetermined names.

====
40.3.3. Copying Types
跟随类型

variable%TYPE

%TYPE provides the data type of a variable or table column. 
You can use this to declare variables that will hold database values. 
For example, let's say you have a column named user_id in your users table. 
To declare a variable with the same data type as users.user_id you write:

user_id users.user_id%TYPE;
跟随表的列的类型。

By using %TYPE you don't need to know the data type of the structure you are referencing, and most importantly, 
if the data type of the referenced item changes in the future 
(for instance: you change the type of user_id from integer to real), 
you might not need to change your function definition.

%TYPE is particularly valuable in polymorphic functions, 
since the data types needed for internal variables can change from one call to the next. 
Appropriate variables can be created by applying %TYPE to the function's arguments or result placeholders.

====
40.3.4. Row Types
行类型（组合类型）

name table_name%ROWTYPE;

name composite_type_name;

A variable of a composite type is called a row variable (or row-type variable). 
Such a variable can hold a whole row of a SELECT or FOR query result, 
so long as that query's column set matches the declared type of the variable. 
The individual fields of the row value are accessed using the usual dot notation, for example rowvar.field.

A row variable can be declared to have the same type as the rows of an existing table or view, 
by using the table_name%ROWTYPE notation; 
or it can be declared by giving a composite type's name. 
(Since every table has an associated composite type of the same name, 
因为每个表都有一个同名的复合类型。
it actually does not matter in PostgreSQL whether you write %ROWTYPE or not. 
But the form with %ROWTYPE is more portable.)

Parameters to a function can be composite types (complete table rows). 
In that case, the corresponding identifier $n will be a row variable, 
and fields can be selected from it, for example $1.user_id.

Only the user-defined columns of a table row are accessible in a row-type variable, 
not the OID or other system columns (because the row could be from a view). 
The fields of the row type inherit the table's field size or precision for data types such as char(n).

Here is an example of using composite types. 
table1 and table2 are existing tables having at least the mentioned fields:

CREATE FUNCTION merge_fields(t_row table1) RETURNS text AS $$
DECLARE
    t2_row table2%ROWTYPE;
BEGIN
    SELECT * INTO t2_row FROM table2 WHERE ... ;
    RETURN t_row.f1 || t2_row.f3 || t_row.f5 || t2_row.f7;
END;
$$ LANGUAGE plpgsql;

SELECT merge_fields(t.*) FROM table1 t WHERE ... ;

====
40.3.5. Record Types
记录类型（不预先定义内部结构）

name RECORD;

Record variables are similar to row-type variables, but they have no predefined structure. 

They take on the actual row structure of the row they are assigned during a SELECT or FOR command. 
The substructure of a record variable can change each time it is assigned to.
随着每次赋值，它的结构可以不断改变。 
A consequence of this is that until a record variable is first assigned to, 
it has no substructure, and any attempt to access a field in it will draw a run-time error.

Note that RECORD is not a true data type, only a placeholder. 
记录其实是一个伪类型，它只是一个占位符。
One should also realize that when a PL/pgSQL function is declared to return type record, 
this is not quite the same concept as a record variable, 
even though such a function might use a record variable to hold its result. 
In both cases the actual row structure is unknown when the function is written, 
but for a function returning record the actual structure is determined 
when the calling query is parsed, whereas a record variable can change its row structure on-the-fly.

====
40.3.6. Collation of PL/pgSQL Variables
字符集
（hxzon：8.1版本的文档没有这一节）

When a PL/pgSQL function has one or more parameters of collatable data types, 
a collation is identified for each function call depending on the collations assigned to the actual arguments, 
as described in Section 22.2. 
If a collation is successfully identified (i.e., there are no conflicts of implicit collations among the arguments) 
then all the collatable parameters are treated as having that collation implicitly. 
This will affect the behavior of collation-sensitive operations within the function. 
For example, consider

CREATE FUNCTION less_than(a text, b text) RETURNS boolean AS $$
BEGIN
    RETURN a < b;
END;
$$ LANGUAGE plpgsql;

SELECT less_than(text_field_1, text_field_2) FROM table1;

SELECT less_than(text_field_1, text_field_2 COLLATE "C") FROM table1;

The first use of less_than will use the common collation of text_field_1 and text_field_2 for the comparison, 
while the second use will use C collation.

Furthermore, the identified collation is also assumed as the collation of any local variables that are of collatable types. 
Thus this function would not work any differently if it were written as

CREATE FUNCTION less_than(a text, b text) RETURNS boolean AS $$
DECLARE
    local_a text := a;
    local_b text := b;
BEGIN
    RETURN local_a < local_b;
END;
$$ LANGUAGE plpgsql;

If there are no parameters of collatable data types, or no common collation can be identified for them, 
then parameters and local variables use the default collation of their data type 
(which is usually the database's default collation, but could be different for variables of domain types).

A local variable of a collatable data type can have a different collation associated with it 
by including the COLLATE option in its declaration, for example

DECLARE
    local_a text COLLATE "en_US";

This option overrides the collation that would otherwise be given to the variable according to the rules above.

Also, of course explicit COLLATE clauses can be written inside a function 
if it is desired to force a particular collation to be used in a particular operation. 
For example,

CREATE FUNCTION less_than_c(a text, b text) RETURNS boolean AS $$
BEGIN
    RETURN a < b COLLATE "C";
END;
$$ LANGUAGE plpgsql;

This overrides the collations associated with the table columns, parameters, or local variables used in the expression, 
just as would happen in a plain SQL command.


