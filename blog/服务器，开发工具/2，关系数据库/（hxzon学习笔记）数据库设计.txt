（hxzon学习笔记）数据库设计

by hxzon
=======
《高性能mysql》第4章：schema与数据类型优化

1，反范式化

使用“触发器”。
缓存衍生值。

缓存表，汇总表的设计。

2，精确统计

问题：统计24小时内发送的消息数。
不需要精确时：每小时生成一张汇总表。

需要精确时：
以每小时汇总表为基础，把完整小时的统计表中的计数加起来，
再加上开始阶段和结束阶段不完整小时的计数。

left(now(),14)来获得当前的日期和时间最接近的小时。

select sum(cnt) from msg_per_hr
where hr between
concat(left(now,14),'00:00') - interval 23 hour
and concat(left(now(),14),'00:00') - interval 1 hour;

select count(*) from message
where posted>=now() - interval 24 hour
and posted< concat(left(now(),14),'00:00') - interval 23 hour;

select count(*) from message
where posted>= concat(left(now(),14),'00:00');

缓存表可以使用不同的存储引擎。

可以定时维护，或定期重建。
定期重建节省资源，可以保持表不会有很多碎片，
以及有完全顺序组织的索引（更高效）。

“影子表”，和原表不断切换。
rename table x to y,y to x;

====
3，计数器表

更新计数器可能碰到并发问题。

方案：将计数器保存成多行，每次随机选择一行进行更新。

create table hit_counter(
cnt int unsigned not null,
slot tinyint unsigned not null primary key
)engine=InnoDB;

然后预填充100行数据。

update hit_counter set cnt= cnt+1 where slot = rand()*100;

获得统计结果：

select sum(cnt) from hit_counter;

==
每隔一段时间开始一个新的计数器。

create table daily_hit_counter(
day date not null,
slot tinyint unsigned not null,
cnt int unsigned not null,
primary key(day,slot)
)engine=InnoDB;

可以使用on duplicate key update语句（即Oracle中的merge语句）。

insert into daily_hit_counter(day,slot,cnt)
values(current_date,rand()*100,1)
on duplicate key update cnt=cnt+1;

可以定期执行一个任务，合并所有结果到0号槽，
并删除其它槽。

update daily_hit_counter as c
inner join(
select day,sum(cnt) as cnt,
min(slot) as mslot
from daily_hit_counter
group by day
)as x using(day)
set c.cnt=if(c.slot=x.mslot,x.cnt,0),
c.slot=if(c.slot=x.mslot,0,c.slot);

delete from daily_hit_counter where slot<>0 and cnt=0;

=======
5，主键选择

=======
6，日期

使用unix式的整数值并不方便处理。
mysql使用 yyyymmddhhmmss 格式的整数，使用8个字节的存储空间。







