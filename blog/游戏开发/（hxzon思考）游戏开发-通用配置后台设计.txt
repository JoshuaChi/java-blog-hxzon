（hxzon思考）游戏开发-通用配置后台设计

1，数据类型：

原始类型：字符串，整数，实数，布尔

结构体：结构体，映射表，列表

2，数据源：

任意输入
预定义项
来自其它对象的数据
开放性约束（字符串长短，数值范围）

3，渲染：

3.1，简单化

原始类型，作为主元素，结构体的字段，列表或映射表的子元素，都渲染成输入控件。

结构体，作为主元素，渲染自己的字段。
映射表，列表作为主元素，渲染自己的子元素。

结构体，映射表，列表作为字段时，渲染为页面链接。
结构体，映射表，列表作为子元素时，渲染为页面链接。

3.2，内嵌

结构体，映射表，列表，作为字段，或子元素时，如果“内嵌”，不再显示为页面链接。

用户浏览时可切换“是否内嵌显示”。

4，输入控件

下拉列表
多选框
文本框：字符串
checkbox
radio

5，配置文件示例：

<?xml version="1.0" encoding="UTF-8"?>
<root label="配置后台">

	<testAttr1 label="属性1-整数" type="i" />
	<testAttr2 label="属性2-实数" type="r" />
	<testAttr3 label="属性3-布尔" type="b" />
	<testAttr4 label="属性4-字符串" type="s" />
	<testAttr5 label="属性5-字符串，文本框" type="s" textarea="true" />

	<appbase>
		<appname label="应用名" type="s" />
		<appVersion label="应用版本" type="s" />
	</appbase>

	<testMap label="测试映射" type="m">
		<map1 label="属性1" type="s" />
		<map2 label="属性2" type="i" />
		<map3 label="属性3" type="b" />
	</testMap>

	<testMaps1 label="测试映射集合1" type="ms" etype="s">
	</testMaps1>

	<testMaps2 label="测试映射集合2" type="ms" etype="s">
		<map1 label="属性1" type="s" />
		<map2 label="属性2" type="i" />
		<map3 label="属性3" type="b" />
	</testMaps2>

	<testList1 label="测试列表1" type="l" etype="s">
	</testList1>

	<testList2 label="测试列表2" type="l" etype="m" labelKey="map1">
		<a1 label="attr1" type="s" />
		<a2 type="i" />
		<a3 type="b" />
		<list4 type="l" etype="m" labelKey="lm1">
			<lm1 type="s"/>
		</list4>
		<maps5 type="ms" etype="s">
			<mm1 type="s" />
			<mm2 type="i" />
			<mm3 type="b" />
		</maps5>
	</testList2>

	<testError type="xx"/>
</root>

6，
元信息CfgInfo
配置数据CfgValue

按元信息浏览，对于list和maps较复杂。
按配置数据浏览，较简单。

如何标识和定位CfgInfo和CfgValue？
使用“从根到节点的路径”。
“路径”需要实时计算，因为节点可能被移动。
好处是，可以修改模式和值，然后重建，因为“路径”不变。
使用uuid，不能重建，因为uuid会变化。

CfgValue的作用：
携带CfgInfo的引用，携带jsonValue的引用，
携带jsonValue没有的信息（parent），
携带cfgInfo和jsonValue都没有的信息（映射表元素对应的key）。

============
通用配置后台设计2

CfgInfo定义浏览方式
CfgInfo从根CfgValue中查找数据，并显示

CfgInfo变化时，如何处理CfgValue，如何知道已处理过
数据类型变更
已经删除
改变位置

不要混淆“数据范围”和“数据来源”。

============
通用配置后台设计3

CfgInfo定义浏览方式
CfgInfo从根CfgValue中查找数据，并显示

已有的数据，正常显示

缺失的数据，都显示为候选的可添加列表（必填项不明显，默认值不一定能解决）
（另一方案：区分必填和可选，必填的总是显示，较复杂。好处，必填项未填时，可提示）

多余的数据，丢弃（如果想保存，则保留模式定义，在模式标签上写明“弃用”等注释）
（另一方案：多余的数据，保留和显示）

优势：
CfgInfo添加新字段，容易处理：CfgValue不变。
否则，难以快速定位对应该CfgInfo的“所有的”CfgValue。

============
数据模式修改的问题：
提交脚本进行处理。

用户同时修改数据：
不处理。后提交的数据覆盖前提交的数据。用户之间彼此协定。

