在洋葱（Onion）架构中实现领域驱动设计
作者 Jan Stenberg ，译者 邵思华 发布于 2014年11月2日 |
http://www.infoq.com/cn/news/2014/11/ddd-onion-architecture

Wade Waldron是一位来自于BoldRadius的资深软件开发者，他在一次演讲中表示，他在几年前开始结合使用领域驱动设计（DDD）与洋葱架构，他的代码质量从此得到了极大的提高。一开始他仅仅使用了DDD，但随着结合使用洋葱架构，他发现他的代码更加易读易懂了，维护的难度也降低了许多。

洋葱架构有时也被称为端口和适配器（Ports and Adapters）架构，或者是六边形（Hexagonal）架构。不过Wade认为，后者应该是洋葱架构的一个超集。

核心（Core）层是与领域或技术无关的基础构件块，它包含了一些通用的构件块，例如list、case类或Actor等等。核心层不包含任何技术层面的概念，例如REST或数据库等等。 
领域（Domain）层是定义业务逻辑的地方，每个类的方法都是按照领域通用语言中的概念进行命名的。对领域层的控制是通过API层进行操作的，而所有的业务逻辑都归属于领域层。这种方式保证了应用程序的可移植性，在不丢失任何业务逻辑的情况下替换掉整个技术实现。 
API层是领域层的入口，它使用领域中的术语和对象。Wade提到：API层应该仅仅向外界暴露不可变的对象，以避免开发者通过暴露的对象获得对底层领域的访问，并任意修改领域行为。Wade通常会从API层开始编码工作，每个方法就是一个骨架，并且对应一个高层次的功能性测试。随后添加代码逻辑以使该测试通过，以此驱动领域层的编码实现。 
基础架构（Infrastructure）层是最外部的一层，它包含了对接各种技术的适配器，例如数据库、用户界面以及外部服务。它能够访问所有处于内部的层次，但多数操作是通过API层进行的。但也有一种例外情况的存在 ，就是负责实现领域层中所定义的某些接口（译注：例如各种Repository的接口）。

洋葱架构中的一个重要概念是依赖，外部的层能够访问内部的层，而内部的层则对外部的层一无所知。

验证某种设计的常见方式是对各种情景进行测试，例如在必须使用一种新的数据库或用户界面技术时，该设计的表现如何。Wade认为，如果认真地遵循了DDD和洋葱架构的原理，那么是完全能够处理好这种变更的。

Alistair Cockburn在2005年时演示了六边形架构，作为对传统分层架构、耦合与牵连等问题的解决方案。

Russ Miles去年在一次演讲中介绍了他构思的Life Preserver设计，这是一种基于六边形架构的设计。

除了以上两者，还存在着第三种变体，就是Robert C. Martin在去年谈到的干净架构（Clean Architecture）。

查看英文原文：Domain-Driven Design with Onion Architecture

